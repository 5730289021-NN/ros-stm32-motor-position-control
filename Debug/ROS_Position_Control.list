
ROS_Position_Control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000662c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000294  080067b4  080067b4  000167b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006a48  08006a48  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  08006a48  08006a48  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006a48  08006a48  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08006a48  08006a48  00016a48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006a50  08006a50  00016a50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08006a54  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b84  20000078  08006acc  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000bfc  08006acc  00020bfc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013b62  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000029a9  00000000  00000000  00033c0a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000fa0  00000000  00000000  000365b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000ea0  00000000  00000000  00037558  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00019de4  00000000  00000000  000383f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000b7be  00000000  00000000  000521dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00090de5  00000000  00000000  0005d99a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000ee77f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004588  00000000  00000000  000ee7fc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000078 	.word	0x20000078
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800679c 	.word	0x0800679c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000007c 	.word	0x2000007c
 80001c4:	0800679c 	.word	0x0800679c

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 80001d8:	b480      	push	{r7}
 80001da:	b085      	sub	sp, #20
 80001dc:	af00      	add	r7, sp, #0
 80001de:	6078      	str	r0, [r7, #4]
 80001e0:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 80001e2:	683b      	ldr	r3, [r7, #0]
 80001e4:	681b      	ldr	r3, [r3, #0]
 80001e6:	0a5a      	lsrs	r2, r3, #9
 80001e8:	490f      	ldr	r1, [pc, #60]	; (8000228 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 80001ea:	fba1 1202 	umull	r1, r2, r1, r2
 80001ee:	09d2      	lsrs	r2, r2, #7
 80001f0:	490e      	ldr	r1, [pc, #56]	; (800022c <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 80001f2:	fb01 f202 	mul.w	r2, r1, r2
 80001f6:	1a9b      	subs	r3, r3, r2
 80001f8:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 80001fa:	683b      	ldr	r3, [r7, #0]
 80001fc:	681b      	ldr	r3, [r3, #0]
 80001fe:	0a5b      	lsrs	r3, r3, #9
 8000200:	4a09      	ldr	r2, [pc, #36]	; (8000228 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8000202:	fba2 2303 	umull	r2, r3, r2, r3
 8000206:	09db      	lsrs	r3, r3, #7
 8000208:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 800020a:	687b      	ldr	r3, [r7, #4]
 800020c:	681a      	ldr	r2, [r3, #0]
 800020e:	68bb      	ldr	r3, [r7, #8]
 8000210:	441a      	add	r2, r3
 8000212:	687b      	ldr	r3, [r7, #4]
 8000214:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 8000216:	683b      	ldr	r3, [r7, #0]
 8000218:	68fa      	ldr	r2, [r7, #12]
 800021a:	601a      	str	r2, [r3, #0]
}
 800021c:	bf00      	nop
 800021e:	3714      	adds	r7, #20
 8000220:	46bd      	mov	sp, r7
 8000222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000226:	4770      	bx	lr
 8000228:	00044b83 	.word	0x00044b83
 800022c:	3b9aca00 	.word	0x3b9aca00

08000230 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000230:	b580      	push	{r7, lr}
 8000232:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000234:	f002 fbe2 	bl	80029fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000238:	f000 f811 	bl	800025e <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800023c:	f000 f9aa 	bl	8000594 <MX_GPIO_Init>
  MX_DMA_Init();
 8000240:	f000 f982 	bl	8000548 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000244:	f000 f950 	bl	80004e8 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000248:	f000 f84a 	bl	80002e0 <MX_TIM2_Init>
  MX_TIM16_Init();
 800024c:	f000 f8d2 	bl	80003f4 <MX_TIM16_Init>
  MX_TIM6_Init();
 8000250:	f000 f89a 	bl	8000388 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  setup();
 8000254:	f001 fb06 	bl	8001864 <setup>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  loop();
 8000258:	f001 fb2a 	bl	80018b0 <loop>
  {
 800025c:	e7fc      	b.n	8000258 <main+0x28>

0800025e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800025e:	b580      	push	{r7, lr}
 8000260:	b090      	sub	sp, #64	; 0x40
 8000262:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000264:	f107 0318 	add.w	r3, r7, #24
 8000268:	2228      	movs	r2, #40	; 0x28
 800026a:	2100      	movs	r1, #0
 800026c:	4618      	mov	r0, r3
 800026e:	f006 f958 	bl	8006522 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000272:	1d3b      	adds	r3, r7, #4
 8000274:	2200      	movs	r2, #0
 8000276:	601a      	str	r2, [r3, #0]
 8000278:	605a      	str	r2, [r3, #4]
 800027a:	609a      	str	r2, [r3, #8]
 800027c:	60da      	str	r2, [r3, #12]
 800027e:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000280:	2302      	movs	r3, #2
 8000282:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000284:	2301      	movs	r3, #1
 8000286:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000288:	2310      	movs	r3, #16
 800028a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800028c:	2302      	movs	r3, #2
 800028e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000290:	2300      	movs	r3, #0
 8000292:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000294:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000298:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800029a:	f107 0318 	add.w	r3, r7, #24
 800029e:	4618      	mov	r0, r3
 80002a0:	f003 f8a4 	bl	80033ec <HAL_RCC_OscConfig>
 80002a4:	4603      	mov	r3, r0
 80002a6:	2b00      	cmp	r3, #0
 80002a8:	d001      	beq.n	80002ae <SystemClock_Config+0x50>
  {
    Error_Handler();
 80002aa:	f000 f9d9 	bl	8000660 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002ae:	230f      	movs	r3, #15
 80002b0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002b2:	2302      	movs	r3, #2
 80002b4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002b6:	2300      	movs	r3, #0
 80002b8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80002be:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002c0:	2300      	movs	r3, #0
 80002c2:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002c4:	1d3b      	adds	r3, r7, #4
 80002c6:	2102      	movs	r1, #2
 80002c8:	4618      	mov	r0, r3
 80002ca:	f003 ff97 	bl	80041fc <HAL_RCC_ClockConfig>
 80002ce:	4603      	mov	r3, r0
 80002d0:	2b00      	cmp	r3, #0
 80002d2:	d001      	beq.n	80002d8 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80002d4:	f000 f9c4 	bl	8000660 <Error_Handler>
  }
}
 80002d8:	bf00      	nop
 80002da:	3740      	adds	r7, #64	; 0x40
 80002dc:	46bd      	mov	sp, r7
 80002de:	bd80      	pop	{r7, pc}

080002e0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80002e0:	b580      	push	{r7, lr}
 80002e2:	b08c      	sub	sp, #48	; 0x30
 80002e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80002e6:	f107 030c 	add.w	r3, r7, #12
 80002ea:	2224      	movs	r2, #36	; 0x24
 80002ec:	2100      	movs	r1, #0
 80002ee:	4618      	mov	r0, r3
 80002f0:	f006 f917 	bl	8006522 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80002f4:	463b      	mov	r3, r7
 80002f6:	2200      	movs	r2, #0
 80002f8:	601a      	str	r2, [r3, #0]
 80002fa:	605a      	str	r2, [r3, #4]
 80002fc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80002fe:	4b21      	ldr	r3, [pc, #132]	; (8000384 <MX_TIM2_Init+0xa4>)
 8000300:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000304:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000306:	4b1f      	ldr	r3, [pc, #124]	; (8000384 <MX_TIM2_Init+0xa4>)
 8000308:	2200      	movs	r2, #0
 800030a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800030c:	4b1d      	ldr	r3, [pc, #116]	; (8000384 <MX_TIM2_Init+0xa4>)
 800030e:	2200      	movs	r2, #0
 8000310:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000312:	4b1c      	ldr	r3, [pc, #112]	; (8000384 <MX_TIM2_Init+0xa4>)
 8000314:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000318:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800031a:	4b1a      	ldr	r3, [pc, #104]	; (8000384 <MX_TIM2_Init+0xa4>)
 800031c:	2200      	movs	r2, #0
 800031e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000320:	4b18      	ldr	r3, [pc, #96]	; (8000384 <MX_TIM2_Init+0xa4>)
 8000322:	2200      	movs	r2, #0
 8000324:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000326:	2301      	movs	r3, #1
 8000328:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800032a:	2300      	movs	r3, #0
 800032c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800032e:	2301      	movs	r3, #1
 8000330:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000332:	2300      	movs	r3, #0
 8000334:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8000336:	230a      	movs	r3, #10
 8000338:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800033a:	2300      	movs	r3, #0
 800033c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800033e:	2301      	movs	r3, #1
 8000340:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000342:	2300      	movs	r3, #0
 8000344:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 8000346:	230a      	movs	r3, #10
 8000348:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 800034a:	f107 030c 	add.w	r3, r7, #12
 800034e:	4619      	mov	r1, r3
 8000350:	480c      	ldr	r0, [pc, #48]	; (8000384 <MX_TIM2_Init+0xa4>)
 8000352:	f004 fa67 	bl	8004824 <HAL_TIM_Encoder_Init>
 8000356:	4603      	mov	r3, r0
 8000358:	2b00      	cmp	r3, #0
 800035a:	d001      	beq.n	8000360 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 800035c:	f000 f980 	bl	8000660 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000360:	2300      	movs	r3, #0
 8000362:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000364:	2300      	movs	r3, #0
 8000366:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000368:	463b      	mov	r3, r7
 800036a:	4619      	mov	r1, r3
 800036c:	4805      	ldr	r0, [pc, #20]	; (8000384 <MX_TIM2_Init+0xa4>)
 800036e:	f005 f8cf 	bl	8005510 <HAL_TIMEx_MasterConfigSynchronization>
 8000372:	4603      	mov	r3, r0
 8000374:	2b00      	cmp	r3, #0
 8000376:	d001      	beq.n	800037c <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8000378:	f000 f972 	bl	8000660 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800037c:	bf00      	nop
 800037e:	3730      	adds	r7, #48	; 0x30
 8000380:	46bd      	mov	sp, r7
 8000382:	bd80      	pop	{r7, pc}
 8000384:	20000af4 	.word	0x20000af4

08000388 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000388:	b580      	push	{r7, lr}
 800038a:	b084      	sub	sp, #16
 800038c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800038e:	1d3b      	adds	r3, r7, #4
 8000390:	2200      	movs	r2, #0
 8000392:	601a      	str	r2, [r3, #0]
 8000394:	605a      	str	r2, [r3, #4]
 8000396:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000398:	4b14      	ldr	r3, [pc, #80]	; (80003ec <MX_TIM6_Init+0x64>)
 800039a:	4a15      	ldr	r2, [pc, #84]	; (80003f0 <MX_TIM6_Init+0x68>)
 800039c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 63999;
 800039e:	4b13      	ldr	r3, [pc, #76]	; (80003ec <MX_TIM6_Init+0x64>)
 80003a0:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 80003a4:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003a6:	4b11      	ldr	r3, [pc, #68]	; (80003ec <MX_TIM6_Init+0x64>)
 80003a8:	2200      	movs	r2, #0
 80003aa:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 9;
 80003ac:	4b0f      	ldr	r3, [pc, #60]	; (80003ec <MX_TIM6_Init+0x64>)
 80003ae:	2209      	movs	r2, #9
 80003b0:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80003b2:	4b0e      	ldr	r3, [pc, #56]	; (80003ec <MX_TIM6_Init+0x64>)
 80003b4:	2200      	movs	r2, #0
 80003b6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80003b8:	480c      	ldr	r0, [pc, #48]	; (80003ec <MX_TIM6_Init+0x64>)
 80003ba:	f004 f955 	bl	8004668 <HAL_TIM_Base_Init>
 80003be:	4603      	mov	r3, r0
 80003c0:	2b00      	cmp	r3, #0
 80003c2:	d001      	beq.n	80003c8 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80003c4:	f000 f94c 	bl	8000660 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80003c8:	2300      	movs	r3, #0
 80003ca:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80003cc:	2300      	movs	r3, #0
 80003ce:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80003d0:	1d3b      	adds	r3, r7, #4
 80003d2:	4619      	mov	r1, r3
 80003d4:	4805      	ldr	r0, [pc, #20]	; (80003ec <MX_TIM6_Init+0x64>)
 80003d6:	f005 f89b 	bl	8005510 <HAL_TIMEx_MasterConfigSynchronization>
 80003da:	4603      	mov	r3, r0
 80003dc:	2b00      	cmp	r3, #0
 80003de:	d001      	beq.n	80003e4 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80003e0:	f000 f93e 	bl	8000660 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80003e4:	bf00      	nop
 80003e6:	3710      	adds	r7, #16
 80003e8:	46bd      	mov	sp, r7
 80003ea:	bd80      	pop	{r7, pc}
 80003ec:	20000ab4 	.word	0x20000ab4
 80003f0:	40001000 	.word	0x40001000

080003f4 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	b092      	sub	sp, #72	; 0x48
 80003f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80003fa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80003fe:	2200      	movs	r2, #0
 8000400:	601a      	str	r2, [r3, #0]
 8000402:	605a      	str	r2, [r3, #4]
 8000404:	609a      	str	r2, [r3, #8]
 8000406:	60da      	str	r2, [r3, #12]
 8000408:	611a      	str	r2, [r3, #16]
 800040a:	615a      	str	r2, [r3, #20]
 800040c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800040e:	463b      	mov	r3, r7
 8000410:	222c      	movs	r2, #44	; 0x2c
 8000412:	2100      	movs	r1, #0
 8000414:	4618      	mov	r0, r3
 8000416:	f006 f884 	bl	8006522 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 800041a:	4b31      	ldr	r3, [pc, #196]	; (80004e0 <MX_TIM16_Init+0xec>)
 800041c:	4a31      	ldr	r2, [pc, #196]	; (80004e4 <MX_TIM16_Init+0xf0>)
 800041e:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 8000420:	4b2f      	ldr	r3, [pc, #188]	; (80004e0 <MX_TIM16_Init+0xec>)
 8000422:	2200      	movs	r2, #0
 8000424:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000426:	4b2e      	ldr	r3, [pc, #184]	; (80004e0 <MX_TIM16_Init+0xec>)
 8000428:	2200      	movs	r2, #0
 800042a:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 3199;
 800042c:	4b2c      	ldr	r3, [pc, #176]	; (80004e0 <MX_TIM16_Init+0xec>)
 800042e:	f640 427f 	movw	r2, #3199	; 0xc7f
 8000432:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000434:	4b2a      	ldr	r3, [pc, #168]	; (80004e0 <MX_TIM16_Init+0xec>)
 8000436:	2200      	movs	r2, #0
 8000438:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800043a:	4b29      	ldr	r3, [pc, #164]	; (80004e0 <MX_TIM16_Init+0xec>)
 800043c:	2200      	movs	r2, #0
 800043e:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000440:	4b27      	ldr	r3, [pc, #156]	; (80004e0 <MX_TIM16_Init+0xec>)
 8000442:	2200      	movs	r2, #0
 8000444:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000446:	4826      	ldr	r0, [pc, #152]	; (80004e0 <MX_TIM16_Init+0xec>)
 8000448:	f004 f90e 	bl	8004668 <HAL_TIM_Base_Init>
 800044c:	4603      	mov	r3, r0
 800044e:	2b00      	cmp	r3, #0
 8000450:	d001      	beq.n	8000456 <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 8000452:	f000 f905 	bl	8000660 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 8000456:	4822      	ldr	r0, [pc, #136]	; (80004e0 <MX_TIM16_Init+0xec>)
 8000458:	f004 f95c 	bl	8004714 <HAL_TIM_PWM_Init>
 800045c:	4603      	mov	r3, r0
 800045e:	2b00      	cmp	r3, #0
 8000460:	d001      	beq.n	8000466 <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 8000462:	f000 f8fd 	bl	8000660 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000466:	2360      	movs	r3, #96	; 0x60
 8000468:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 0;
 800046a:	2300      	movs	r3, #0
 800046c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800046e:	2300      	movs	r3, #0
 8000470:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000472:	2300      	movs	r3, #0
 8000474:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000476:	2300      	movs	r3, #0
 8000478:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800047a:	2300      	movs	r3, #0
 800047c:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800047e:	2300      	movs	r3, #0
 8000480:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000482:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000486:	2200      	movs	r2, #0
 8000488:	4619      	mov	r1, r3
 800048a:	4815      	ldr	r0, [pc, #84]	; (80004e0 <MX_TIM16_Init+0xec>)
 800048c:	f004 fbb2 	bl	8004bf4 <HAL_TIM_PWM_ConfigChannel>
 8000490:	4603      	mov	r3, r0
 8000492:	2b00      	cmp	r3, #0
 8000494:	d001      	beq.n	800049a <MX_TIM16_Init+0xa6>
  {
    Error_Handler();
 8000496:	f000 f8e3 	bl	8000660 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800049a:	2300      	movs	r3, #0
 800049c:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800049e:	2300      	movs	r3, #0
 80004a0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80004a2:	2300      	movs	r3, #0
 80004a4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80004a6:	2300      	movs	r3, #0
 80004a8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80004aa:	2300      	movs	r3, #0
 80004ac:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80004ae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80004b2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80004b4:	2300      	movs	r3, #0
 80004b6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80004b8:	2300      	movs	r3, #0
 80004ba:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 80004bc:	463b      	mov	r3, r7
 80004be:	4619      	mov	r1, r3
 80004c0:	4807      	ldr	r0, [pc, #28]	; (80004e0 <MX_TIM16_Init+0xec>)
 80004c2:	f005 f893 	bl	80055ec <HAL_TIMEx_ConfigBreakDeadTime>
 80004c6:	4603      	mov	r3, r0
 80004c8:	2b00      	cmp	r3, #0
 80004ca:	d001      	beq.n	80004d0 <MX_TIM16_Init+0xdc>
  {
    Error_Handler();
 80004cc:	f000 f8c8 	bl	8000660 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 80004d0:	4803      	ldr	r0, [pc, #12]	; (80004e0 <MX_TIM16_Init+0xec>)
 80004d2:	f002 f8d7 	bl	8002684 <HAL_TIM_MspPostInit>

}
 80004d6:	bf00      	nop
 80004d8:	3748      	adds	r7, #72	; 0x48
 80004da:	46bd      	mov	sp, r7
 80004dc:	bd80      	pop	{r7, pc}
 80004de:	bf00      	nop
 80004e0:	20000bb4 	.word	0x20000bb4
 80004e4:	40014400 	.word	0x40014400

080004e8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80004ec:	4b14      	ldr	r3, [pc, #80]	; (8000540 <MX_USART2_UART_Init+0x58>)
 80004ee:	4a15      	ldr	r2, [pc, #84]	; (8000544 <MX_USART2_UART_Init+0x5c>)
 80004f0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80004f2:	4b13      	ldr	r3, [pc, #76]	; (8000540 <MX_USART2_UART_Init+0x58>)
 80004f4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80004f8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80004fa:	4b11      	ldr	r3, [pc, #68]	; (8000540 <MX_USART2_UART_Init+0x58>)
 80004fc:	2200      	movs	r2, #0
 80004fe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000500:	4b0f      	ldr	r3, [pc, #60]	; (8000540 <MX_USART2_UART_Init+0x58>)
 8000502:	2200      	movs	r2, #0
 8000504:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000506:	4b0e      	ldr	r3, [pc, #56]	; (8000540 <MX_USART2_UART_Init+0x58>)
 8000508:	2200      	movs	r2, #0
 800050a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800050c:	4b0c      	ldr	r3, [pc, #48]	; (8000540 <MX_USART2_UART_Init+0x58>)
 800050e:	220c      	movs	r2, #12
 8000510:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000512:	4b0b      	ldr	r3, [pc, #44]	; (8000540 <MX_USART2_UART_Init+0x58>)
 8000514:	2200      	movs	r2, #0
 8000516:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000518:	4b09      	ldr	r3, [pc, #36]	; (8000540 <MX_USART2_UART_Init+0x58>)
 800051a:	2200      	movs	r2, #0
 800051c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800051e:	4b08      	ldr	r3, [pc, #32]	; (8000540 <MX_USART2_UART_Init+0x58>)
 8000520:	2200      	movs	r2, #0
 8000522:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000524:	4b06      	ldr	r3, [pc, #24]	; (8000540 <MX_USART2_UART_Init+0x58>)
 8000526:	2200      	movs	r2, #0
 8000528:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800052a:	4805      	ldr	r0, [pc, #20]	; (8000540 <MX_USART2_UART_Init+0x58>)
 800052c:	f005 f8f4 	bl	8005718 <HAL_UART_Init>
 8000530:	4603      	mov	r3, r0
 8000532:	2b00      	cmp	r3, #0
 8000534:	d001      	beq.n	800053a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000536:	f000 f893 	bl	8000660 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800053a:	bf00      	nop
 800053c:	bd80      	pop	{r7, pc}
 800053e:	bf00      	nop
 8000540:	20000b34 	.word	0x20000b34
 8000544:	40004400 	.word	0x40004400

08000548 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b082      	sub	sp, #8
 800054c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800054e:	4b10      	ldr	r3, [pc, #64]	; (8000590 <MX_DMA_Init+0x48>)
 8000550:	695b      	ldr	r3, [r3, #20]
 8000552:	4a0f      	ldr	r2, [pc, #60]	; (8000590 <MX_DMA_Init+0x48>)
 8000554:	f043 0301 	orr.w	r3, r3, #1
 8000558:	6153      	str	r3, [r2, #20]
 800055a:	4b0d      	ldr	r3, [pc, #52]	; (8000590 <MX_DMA_Init+0x48>)
 800055c:	695b      	ldr	r3, [r3, #20]
 800055e:	f003 0301 	and.w	r3, r3, #1
 8000562:	607b      	str	r3, [r7, #4]
 8000564:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8000566:	2200      	movs	r2, #0
 8000568:	2100      	movs	r1, #0
 800056a:	2010      	movs	r0, #16
 800056c:	f002 fba9 	bl	8002cc2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000570:	2010      	movs	r0, #16
 8000572:	f002 fbc2 	bl	8002cfa <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8000576:	2200      	movs	r2, #0
 8000578:	2100      	movs	r1, #0
 800057a:	2011      	movs	r0, #17
 800057c:	f002 fba1 	bl	8002cc2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8000580:	2011      	movs	r0, #17
 8000582:	f002 fbba 	bl	8002cfa <HAL_NVIC_EnableIRQ>

}
 8000586:	bf00      	nop
 8000588:	3708      	adds	r7, #8
 800058a:	46bd      	mov	sp, r7
 800058c:	bd80      	pop	{r7, pc}
 800058e:	bf00      	nop
 8000590:	40021000 	.word	0x40021000

08000594 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b088      	sub	sp, #32
 8000598:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800059a:	f107 030c 	add.w	r3, r7, #12
 800059e:	2200      	movs	r2, #0
 80005a0:	601a      	str	r2, [r3, #0]
 80005a2:	605a      	str	r2, [r3, #4]
 80005a4:	609a      	str	r2, [r3, #8]
 80005a6:	60da      	str	r2, [r3, #12]
 80005a8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80005aa:	4b2b      	ldr	r3, [pc, #172]	; (8000658 <MX_GPIO_Init+0xc4>)
 80005ac:	695b      	ldr	r3, [r3, #20]
 80005ae:	4a2a      	ldr	r2, [pc, #168]	; (8000658 <MX_GPIO_Init+0xc4>)
 80005b0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80005b4:	6153      	str	r3, [r2, #20]
 80005b6:	4b28      	ldr	r3, [pc, #160]	; (8000658 <MX_GPIO_Init+0xc4>)
 80005b8:	695b      	ldr	r3, [r3, #20]
 80005ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80005be:	60bb      	str	r3, [r7, #8]
 80005c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005c2:	4b25      	ldr	r3, [pc, #148]	; (8000658 <MX_GPIO_Init+0xc4>)
 80005c4:	695b      	ldr	r3, [r3, #20]
 80005c6:	4a24      	ldr	r2, [pc, #144]	; (8000658 <MX_GPIO_Init+0xc4>)
 80005c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005cc:	6153      	str	r3, [r2, #20]
 80005ce:	4b22      	ldr	r3, [pc, #136]	; (8000658 <MX_GPIO_Init+0xc4>)
 80005d0:	695b      	ldr	r3, [r3, #20]
 80005d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80005d6:	607b      	str	r3, [r7, #4]
 80005d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005da:	4b1f      	ldr	r3, [pc, #124]	; (8000658 <MX_GPIO_Init+0xc4>)
 80005dc:	695b      	ldr	r3, [r3, #20]
 80005de:	4a1e      	ldr	r2, [pc, #120]	; (8000658 <MX_GPIO_Init+0xc4>)
 80005e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80005e4:	6153      	str	r3, [r2, #20]
 80005e6:	4b1c      	ldr	r3, [pc, #112]	; (8000658 <MX_GPIO_Init+0xc4>)
 80005e8:	695b      	ldr	r3, [r3, #20]
 80005ea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80005ee:	603b      	str	r3, [r7, #0]
 80005f0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80005f2:	2200      	movs	r2, #0
 80005f4:	2110      	movs	r1, #16
 80005f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005fa:	f002 fedf 	bl	80033bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 80005fe:	2201      	movs	r2, #1
 8000600:	2120      	movs	r1, #32
 8000602:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000606:	f002 fed9 	bl	80033bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);
 800060a:	2201      	movs	r2, #1
 800060c:	2108      	movs	r1, #8
 800060e:	4813      	ldr	r0, [pc, #76]	; (800065c <MX_GPIO_Init+0xc8>)
 8000610:	f002 fed4 	bl	80033bc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA4 PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000614:	2330      	movs	r3, #48	; 0x30
 8000616:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000618:	2301      	movs	r3, #1
 800061a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800061c:	2300      	movs	r3, #0
 800061e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000620:	2300      	movs	r3, #0
 8000622:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000624:	f107 030c 	add.w	r3, r7, #12
 8000628:	4619      	mov	r1, r3
 800062a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800062e:	f002 fd53 	bl	80030d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000632:	2308      	movs	r3, #8
 8000634:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000636:	2301      	movs	r3, #1
 8000638:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800063a:	2300      	movs	r3, #0
 800063c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800063e:	2300      	movs	r3, #0
 8000640:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000642:	f107 030c 	add.w	r3, r7, #12
 8000646:	4619      	mov	r1, r3
 8000648:	4804      	ldr	r0, [pc, #16]	; (800065c <MX_GPIO_Init+0xc8>)
 800064a:	f002 fd45 	bl	80030d8 <HAL_GPIO_Init>

}
 800064e:	bf00      	nop
 8000650:	3720      	adds	r7, #32
 8000652:	46bd      	mov	sp, r7
 8000654:	bd80      	pop	{r7, pc}
 8000656:	bf00      	nop
 8000658:	40021000 	.word	0x40021000
 800065c:	48000400 	.word	0x48000400

08000660 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000660:	b480      	push	{r7}
 8000662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000664:	bf00      	nop
 8000666:	46bd      	mov	sp, r7
 8000668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066c:	4770      	bx	lr

0800066e <_ZSt3absl>:

  using ::abs;

#ifndef __CORRECT_ISO_CPP_STDLIB_H_PROTO
  inline long
  abs(long __i) { return __builtin_labs(__i); }
 800066e:	b480      	push	{r7}
 8000670:	b083      	sub	sp, #12
 8000672:	af00      	add	r7, sp, #0
 8000674:	6078      	str	r0, [r7, #4]
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	2b00      	cmp	r3, #0
 800067a:	bfb8      	it	lt
 800067c:	425b      	neglt	r3, r3
 800067e:	4618      	mov	r0, r3
 8000680:	370c      	adds	r7, #12
 8000682:	46bd      	mov	sp, r7
 8000684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000688:	4770      	bx	lr
	...

0800068c <_ZN3ros3MsgC1Ev>:

namespace ros
{

/* Base Message Type */
class Msg
 800068c:	b480      	push	{r7}
 800068e:	b083      	sub	sp, #12
 8000690:	af00      	add	r7, sp, #0
 8000692:	6078      	str	r0, [r7, #4]
 8000694:	4a04      	ldr	r2, [pc, #16]	; (80006a8 <_ZN3ros3MsgC1Ev+0x1c>)
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	601a      	str	r2, [r3, #0]
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	4618      	mov	r0, r3
 800069e:	370c      	adds	r7, #12
 80006a0:	46bd      	mov	sp, r7
 80006a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a6:	4770      	bx	lr
 80006a8:	08006a00 	.word	0x08006a00

080006ac <_ZN8std_msgs5Int32C1Ev>:
  {
    public:
      typedef int32_t _data_type;
      _data_type data;

    Int32():
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b082      	sub	sp, #8
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
      data(0)
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	4618      	mov	r0, r3
 80006b8:	f7ff ffe8 	bl	800068c <_ZN3ros3MsgC1Ev>
 80006bc:	4a05      	ldr	r2, [pc, #20]	; (80006d4 <_ZN8std_msgs5Int32C1Ev+0x28>)
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	601a      	str	r2, [r3, #0]
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	2200      	movs	r2, #0
 80006c6:	605a      	str	r2, [r3, #4]
    {
    }
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	4618      	mov	r0, r3
 80006cc:	3708      	adds	r7, #8
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	080069e8 	.word	0x080069e8

080006d8 <_ZNK8std_msgs5Int329serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80006d8:	b480      	push	{r7}
 80006da:	b085      	sub	sp, #20
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
 80006e0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80006e2:	2300      	movs	r3, #0
 80006e4:	60fb      	str	r3, [r7, #12]
      union {
        int32_t real;
        uint32_t base;
      } u_data;
      u_data.real = this->data;
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	685b      	ldr	r3, [r3, #4]
 80006ea:	60bb      	str	r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_data.base >> (8 * 0)) & 0xFF;
 80006ec:	68b9      	ldr	r1, [r7, #8]
 80006ee:	68fb      	ldr	r3, [r7, #12]
 80006f0:	683a      	ldr	r2, [r7, #0]
 80006f2:	4413      	add	r3, r2
 80006f4:	b2ca      	uxtb	r2, r1
 80006f6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_data.base >> (8 * 1)) & 0xFF;
 80006f8:	68bb      	ldr	r3, [r7, #8]
 80006fa:	0a19      	lsrs	r1, r3, #8
 80006fc:	68fb      	ldr	r3, [r7, #12]
 80006fe:	3301      	adds	r3, #1
 8000700:	683a      	ldr	r2, [r7, #0]
 8000702:	4413      	add	r3, r2
 8000704:	b2ca      	uxtb	r2, r1
 8000706:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_data.base >> (8 * 2)) & 0xFF;
 8000708:	68bb      	ldr	r3, [r7, #8]
 800070a:	0c19      	lsrs	r1, r3, #16
 800070c:	68fb      	ldr	r3, [r7, #12]
 800070e:	3302      	adds	r3, #2
 8000710:	683a      	ldr	r2, [r7, #0]
 8000712:	4413      	add	r3, r2
 8000714:	b2ca      	uxtb	r2, r1
 8000716:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_data.base >> (8 * 3)) & 0xFF;
 8000718:	68bb      	ldr	r3, [r7, #8]
 800071a:	0e19      	lsrs	r1, r3, #24
 800071c:	68fb      	ldr	r3, [r7, #12]
 800071e:	3303      	adds	r3, #3
 8000720:	683a      	ldr	r2, [r7, #0]
 8000722:	4413      	add	r3, r2
 8000724:	b2ca      	uxtb	r2, r1
 8000726:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data);
 8000728:	68fb      	ldr	r3, [r7, #12]
 800072a:	3304      	adds	r3, #4
 800072c:	60fb      	str	r3, [r7, #12]
      return offset;
 800072e:	68fb      	ldr	r3, [r7, #12]
    }
 8000730:	4618      	mov	r0, r3
 8000732:	3714      	adds	r7, #20
 8000734:	46bd      	mov	sp, r7
 8000736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073a:	4770      	bx	lr

0800073c <_ZN8std_msgs5Int3211deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 800073c:	b480      	push	{r7}
 800073e:	b085      	sub	sp, #20
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]
 8000744:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000746:	2300      	movs	r3, #0
 8000748:	60fb      	str	r3, [r7, #12]
      union {
        int32_t real;
        uint32_t base;
      } u_data;
      u_data.base = 0;
 800074a:	2300      	movs	r3, #0
 800074c:	60bb      	str	r3, [r7, #8]
      u_data.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800074e:	68bb      	ldr	r3, [r7, #8]
 8000750:	68fa      	ldr	r2, [r7, #12]
 8000752:	6839      	ldr	r1, [r7, #0]
 8000754:	440a      	add	r2, r1
 8000756:	7812      	ldrb	r2, [r2, #0]
 8000758:	4313      	orrs	r3, r2
 800075a:	60bb      	str	r3, [r7, #8]
      u_data.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800075c:	68ba      	ldr	r2, [r7, #8]
 800075e:	68fb      	ldr	r3, [r7, #12]
 8000760:	3301      	adds	r3, #1
 8000762:	6839      	ldr	r1, [r7, #0]
 8000764:	440b      	add	r3, r1
 8000766:	781b      	ldrb	r3, [r3, #0]
 8000768:	021b      	lsls	r3, r3, #8
 800076a:	4313      	orrs	r3, r2
 800076c:	60bb      	str	r3, [r7, #8]
      u_data.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800076e:	68ba      	ldr	r2, [r7, #8]
 8000770:	68fb      	ldr	r3, [r7, #12]
 8000772:	3302      	adds	r3, #2
 8000774:	6839      	ldr	r1, [r7, #0]
 8000776:	440b      	add	r3, r1
 8000778:	781b      	ldrb	r3, [r3, #0]
 800077a:	041b      	lsls	r3, r3, #16
 800077c:	4313      	orrs	r3, r2
 800077e:	60bb      	str	r3, [r7, #8]
      u_data.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8000780:	68ba      	ldr	r2, [r7, #8]
 8000782:	68fb      	ldr	r3, [r7, #12]
 8000784:	3303      	adds	r3, #3
 8000786:	6839      	ldr	r1, [r7, #0]
 8000788:	440b      	add	r3, r1
 800078a:	781b      	ldrb	r3, [r3, #0]
 800078c:	061b      	lsls	r3, r3, #24
 800078e:	4313      	orrs	r3, r2
 8000790:	60bb      	str	r3, [r7, #8]
      this->data = u_data.real;
 8000792:	68ba      	ldr	r2, [r7, #8]
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data);
 8000798:	68fb      	ldr	r3, [r7, #12]
 800079a:	3304      	adds	r3, #4
 800079c:	60fb      	str	r3, [r7, #12]
     return offset;
 800079e:	68fb      	ldr	r3, [r7, #12]
    }
 80007a0:	4618      	mov	r0, r3
 80007a2:	3714      	adds	r7, #20
 80007a4:	46bd      	mov	sp, r7
 80007a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007aa:	4770      	bx	lr

080007ac <_ZN8std_msgs5Int327getTypeEv>:

    const char * getType(){ return "std_msgs/Int32"; };
 80007ac:	b480      	push	{r7}
 80007ae:	b083      	sub	sp, #12
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
 80007b4:	4b03      	ldr	r3, [pc, #12]	; (80007c4 <_ZN8std_msgs5Int327getTypeEv+0x18>)
 80007b6:	4618      	mov	r0, r3
 80007b8:	370c      	adds	r7, #12
 80007ba:	46bd      	mov	sp, r7
 80007bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c0:	4770      	bx	lr
 80007c2:	bf00      	nop
 80007c4:	080067b4 	.word	0x080067b4

080007c8 <_ZN8std_msgs5Int326getMD5Ev>:
    const char * getMD5(){ return "da5909fbe378aeaf85e547e830cc1bb7"; };
 80007c8:	b480      	push	{r7}
 80007ca:	b083      	sub	sp, #12
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
 80007d0:	4b03      	ldr	r3, [pc, #12]	; (80007e0 <_ZN8std_msgs5Int326getMD5Ev+0x18>)
 80007d2:	4618      	mov	r0, r3
 80007d4:	370c      	adds	r7, #12
 80007d6:	46bd      	mov	sp, r7
 80007d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007dc:	4770      	bx	lr
 80007de:	bf00      	nop
 80007e0:	080067c4 	.word	0x080067c4

080007e4 <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 80007e4:	b480      	push	{r7}
 80007e6:	b083      	sub	sp, #12
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	2200      	movs	r2, #0
 80007f0:	601a      	str	r2, [r3, #0]
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	2200      	movs	r2, #0
 80007f6:	605a      	str	r2, [r3, #4]
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	4618      	mov	r0, r3
 80007fc:	370c      	adds	r7, #12
 80007fe:	46bd      	mov	sp, r7
 8000800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000804:	4770      	bx	lr
	...

08000808 <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 8000808:	b580      	push	{r7, lr}
 800080a:	b082      	sub	sp, #8
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
      data()
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	4618      	mov	r0, r3
 8000814:	f7ff ff3a 	bl	800068c <_ZN3ros3MsgC1Ev>
 8000818:	4a06      	ldr	r2, [pc, #24]	; (8000834 <_ZN8std_msgs4TimeC1Ev+0x2c>)
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	601a      	str	r2, [r3, #0]
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	3304      	adds	r3, #4
 8000822:	4618      	mov	r0, r3
 8000824:	f7ff ffde 	bl	80007e4 <_ZN3ros4TimeC1Ev>
    {
    }
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	4618      	mov	r0, r3
 800082c:	3708      	adds	r7, #8
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}
 8000832:	bf00      	nop
 8000834:	080069d0 	.word	0x080069d0

08000838 <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8000838:	b480      	push	{r7}
 800083a:	b085      	sub	sp, #20
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
 8000840:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000842:	2300      	movs	r3, #0
 8000844:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	6859      	ldr	r1, [r3, #4]
 800084a:	68fb      	ldr	r3, [r7, #12]
 800084c:	683a      	ldr	r2, [r7, #0]
 800084e:	4413      	add	r3, r2
 8000850:	b2ca      	uxtb	r2, r1
 8000852:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	685b      	ldr	r3, [r3, #4]
 8000858:	0a19      	lsrs	r1, r3, #8
 800085a:	68fb      	ldr	r3, [r7, #12]
 800085c:	3301      	adds	r3, #1
 800085e:	683a      	ldr	r2, [r7, #0]
 8000860:	4413      	add	r3, r2
 8000862:	b2ca      	uxtb	r2, r1
 8000864:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	685b      	ldr	r3, [r3, #4]
 800086a:	0c19      	lsrs	r1, r3, #16
 800086c:	68fb      	ldr	r3, [r7, #12]
 800086e:	3302      	adds	r3, #2
 8000870:	683a      	ldr	r2, [r7, #0]
 8000872:	4413      	add	r3, r2
 8000874:	b2ca      	uxtb	r2, r1
 8000876:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	685b      	ldr	r3, [r3, #4]
 800087c:	0e19      	lsrs	r1, r3, #24
 800087e:	68fb      	ldr	r3, [r7, #12]
 8000880:	3303      	adds	r3, #3
 8000882:	683a      	ldr	r2, [r7, #0]
 8000884:	4413      	add	r3, r2
 8000886:	b2ca      	uxtb	r2, r1
 8000888:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 800088a:	68fb      	ldr	r3, [r7, #12]
 800088c:	3304      	adds	r3, #4
 800088e:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	6899      	ldr	r1, [r3, #8]
 8000894:	68fb      	ldr	r3, [r7, #12]
 8000896:	683a      	ldr	r2, [r7, #0]
 8000898:	4413      	add	r3, r2
 800089a:	b2ca      	uxtb	r2, r1
 800089c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	689b      	ldr	r3, [r3, #8]
 80008a2:	0a19      	lsrs	r1, r3, #8
 80008a4:	68fb      	ldr	r3, [r7, #12]
 80008a6:	3301      	adds	r3, #1
 80008a8:	683a      	ldr	r2, [r7, #0]
 80008aa:	4413      	add	r3, r2
 80008ac:	b2ca      	uxtb	r2, r1
 80008ae:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	689b      	ldr	r3, [r3, #8]
 80008b4:	0c19      	lsrs	r1, r3, #16
 80008b6:	68fb      	ldr	r3, [r7, #12]
 80008b8:	3302      	adds	r3, #2
 80008ba:	683a      	ldr	r2, [r7, #0]
 80008bc:	4413      	add	r3, r2
 80008be:	b2ca      	uxtb	r2, r1
 80008c0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	689b      	ldr	r3, [r3, #8]
 80008c6:	0e19      	lsrs	r1, r3, #24
 80008c8:	68fb      	ldr	r3, [r7, #12]
 80008ca:	3303      	adds	r3, #3
 80008cc:	683a      	ldr	r2, [r7, #0]
 80008ce:	4413      	add	r3, r2
 80008d0:	b2ca      	uxtb	r2, r1
 80008d2:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 80008d4:	68fb      	ldr	r3, [r7, #12]
 80008d6:	3304      	adds	r3, #4
 80008d8:	60fb      	str	r3, [r7, #12]
      return offset;
 80008da:	68fb      	ldr	r3, [r7, #12]
    }
 80008dc:	4618      	mov	r0, r3
 80008de:	3714      	adds	r7, #20
 80008e0:	46bd      	mov	sp, r7
 80008e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e6:	4770      	bx	lr

080008e8 <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80008e8:	b480      	push	{r7}
 80008ea:	b085      	sub	sp, #20
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
 80008f0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80008f2:	2300      	movs	r3, #0
 80008f4:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 80008f6:	68fb      	ldr	r3, [r7, #12]
 80008f8:	683a      	ldr	r2, [r7, #0]
 80008fa:	4413      	add	r3, r2
 80008fc:	781b      	ldrb	r3, [r3, #0]
 80008fe:	461a      	mov	r2, r3
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	685a      	ldr	r2, [r3, #4]
 8000908:	68fb      	ldr	r3, [r7, #12]
 800090a:	3301      	adds	r3, #1
 800090c:	6839      	ldr	r1, [r7, #0]
 800090e:	440b      	add	r3, r1
 8000910:	781b      	ldrb	r3, [r3, #0]
 8000912:	021b      	lsls	r3, r3, #8
 8000914:	431a      	orrs	r2, r3
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	685a      	ldr	r2, [r3, #4]
 800091e:	68fb      	ldr	r3, [r7, #12]
 8000920:	3302      	adds	r3, #2
 8000922:	6839      	ldr	r1, [r7, #0]
 8000924:	440b      	add	r3, r1
 8000926:	781b      	ldrb	r3, [r3, #0]
 8000928:	041b      	lsls	r3, r3, #16
 800092a:	431a      	orrs	r2, r3
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	685a      	ldr	r2, [r3, #4]
 8000934:	68fb      	ldr	r3, [r7, #12]
 8000936:	3303      	adds	r3, #3
 8000938:	6839      	ldr	r1, [r7, #0]
 800093a:	440b      	add	r3, r1
 800093c:	781b      	ldrb	r3, [r3, #0]
 800093e:	061b      	lsls	r3, r3, #24
 8000940:	431a      	orrs	r2, r3
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 8000946:	68fb      	ldr	r3, [r7, #12]
 8000948:	3304      	adds	r3, #4
 800094a:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 800094c:	68fb      	ldr	r3, [r7, #12]
 800094e:	683a      	ldr	r2, [r7, #0]
 8000950:	4413      	add	r3, r2
 8000952:	781b      	ldrb	r3, [r3, #0]
 8000954:	461a      	mov	r2, r3
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	689a      	ldr	r2, [r3, #8]
 800095e:	68fb      	ldr	r3, [r7, #12]
 8000960:	3301      	adds	r3, #1
 8000962:	6839      	ldr	r1, [r7, #0]
 8000964:	440b      	add	r3, r1
 8000966:	781b      	ldrb	r3, [r3, #0]
 8000968:	021b      	lsls	r3, r3, #8
 800096a:	431a      	orrs	r2, r3
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	689a      	ldr	r2, [r3, #8]
 8000974:	68fb      	ldr	r3, [r7, #12]
 8000976:	3302      	adds	r3, #2
 8000978:	6839      	ldr	r1, [r7, #0]
 800097a:	440b      	add	r3, r1
 800097c:	781b      	ldrb	r3, [r3, #0]
 800097e:	041b      	lsls	r3, r3, #16
 8000980:	431a      	orrs	r2, r3
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	689a      	ldr	r2, [r3, #8]
 800098a:	68fb      	ldr	r3, [r7, #12]
 800098c:	3303      	adds	r3, #3
 800098e:	6839      	ldr	r1, [r7, #0]
 8000990:	440b      	add	r3, r1
 8000992:	781b      	ldrb	r3, [r3, #0]
 8000994:	061b      	lsls	r3, r3, #24
 8000996:	431a      	orrs	r2, r3
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 800099c:	68fb      	ldr	r3, [r7, #12]
 800099e:	3304      	adds	r3, #4
 80009a0:	60fb      	str	r3, [r7, #12]
     return offset;
 80009a2:	68fb      	ldr	r3, [r7, #12]
    }
 80009a4:	4618      	mov	r0, r3
 80009a6:	3714      	adds	r7, #20
 80009a8:	46bd      	mov	sp, r7
 80009aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ae:	4770      	bx	lr

080009b0 <_ZN8std_msgs4Time7getTypeEv>:

    const char * getType(){ return "std_msgs/Time"; };
 80009b0:	b480      	push	{r7}
 80009b2:	b083      	sub	sp, #12
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
 80009b8:	4b03      	ldr	r3, [pc, #12]	; (80009c8 <_ZN8std_msgs4Time7getTypeEv+0x18>)
 80009ba:	4618      	mov	r0, r3
 80009bc:	370c      	adds	r7, #12
 80009be:	46bd      	mov	sp, r7
 80009c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c4:	4770      	bx	lr
 80009c6:	bf00      	nop
 80009c8:	080067e8 	.word	0x080067e8

080009cc <_ZN8std_msgs4Time6getMD5Ev>:
    const char * getMD5(){ return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 80009cc:	b480      	push	{r7}
 80009ce:	b083      	sub	sp, #12
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
 80009d4:	4b03      	ldr	r3, [pc, #12]	; (80009e4 <_ZN8std_msgs4Time6getMD5Ev+0x18>)
 80009d6:	4618      	mov	r0, r3
 80009d8:	370c      	adds	r7, #12
 80009da:	46bd      	mov	sp, r7
 80009dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e0:	4770      	bx	lr
 80009e2:	bf00      	nop
 80009e4:	080067f8 	.word	0x080067f8

080009e8 <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b082      	sub	sp, #8
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	4618      	mov	r0, r3
 80009f4:	f7ff fe4a 	bl	800068c <_ZN3ros3MsgC1Ev>
 80009f8:	4a0b      	ldr	r2, [pc, #44]	; (8000a28 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	601a      	str	r2, [r3, #0]
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	2200      	movs	r2, #0
 8000a02:	809a      	strh	r2, [r3, #4]
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	4a09      	ldr	r2, [pc, #36]	; (8000a2c <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8000a08:	609a      	str	r2, [r3, #8]
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	4a07      	ldr	r2, [pc, #28]	; (8000a2c <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8000a0e:	60da      	str	r2, [r3, #12]
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	4a06      	ldr	r2, [pc, #24]	; (8000a2c <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8000a14:	611a      	str	r2, [r3, #16]
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	2200      	movs	r2, #0
 8000a1a:	615a      	str	r2, [r3, #20]
    {
    }
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	4618      	mov	r0, r3
 8000a20:	3708      	adds	r7, #8
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	bf00      	nop
 8000a28:	080069b8 	.word	0x080069b8
 8000a2c:	0800681c 	.word	0x0800681c

08000a30 <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b088      	sub	sp, #32
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
 8000a38:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	8899      	ldrh	r1, [r3, #4]
 8000a42:	69fb      	ldr	r3, [r7, #28]
 8000a44:	683a      	ldr	r2, [r7, #0]
 8000a46:	4413      	add	r3, r2
 8000a48:	b2ca      	uxtb	r2, r1
 8000a4a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	889b      	ldrh	r3, [r3, #4]
 8000a50:	0a1b      	lsrs	r3, r3, #8
 8000a52:	b299      	uxth	r1, r3
 8000a54:	69fb      	ldr	r3, [r7, #28]
 8000a56:	3301      	adds	r3, #1
 8000a58:	683a      	ldr	r2, [r7, #0]
 8000a5a:	4413      	add	r3, r2
 8000a5c:	b2ca      	uxtb	r2, r1
 8000a5e:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 8000a60:	69fb      	ldr	r3, [r7, #28]
 8000a62:	3302      	adds	r3, #2
 8000a64:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	689b      	ldr	r3, [r3, #8]
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	f7ff fbac 	bl	80001c8 <strlen>
 8000a70:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 8000a72:	69fb      	ldr	r3, [r7, #28]
 8000a74:	683a      	ldr	r2, [r7, #0]
 8000a76:	4413      	add	r3, r2
 8000a78:	69b9      	ldr	r1, [r7, #24]
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	f000 ff32 	bl	80018e4 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8000a80:	69fb      	ldr	r3, [r7, #28]
 8000a82:	3304      	adds	r3, #4
 8000a84:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 8000a86:	69fb      	ldr	r3, [r7, #28]
 8000a88:	683a      	ldr	r2, [r7, #0]
 8000a8a:	18d0      	adds	r0, r2, r3
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	689b      	ldr	r3, [r3, #8]
 8000a90:	69ba      	ldr	r2, [r7, #24]
 8000a92:	4619      	mov	r1, r3
 8000a94:	f005 fd3a 	bl	800650c <memcpy>
      offset += length_topic_name;
 8000a98:	69fa      	ldr	r2, [r7, #28]
 8000a9a:	69bb      	ldr	r3, [r7, #24]
 8000a9c:	4413      	add	r3, r2
 8000a9e:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	68db      	ldr	r3, [r3, #12]
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	f7ff fb8f 	bl	80001c8 <strlen>
 8000aaa:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 8000aac:	69fb      	ldr	r3, [r7, #28]
 8000aae:	683a      	ldr	r2, [r7, #0]
 8000ab0:	4413      	add	r3, r2
 8000ab2:	6979      	ldr	r1, [r7, #20]
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	f000 ff15 	bl	80018e4 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8000aba:	69fb      	ldr	r3, [r7, #28]
 8000abc:	3304      	adds	r3, #4
 8000abe:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 8000ac0:	69fb      	ldr	r3, [r7, #28]
 8000ac2:	683a      	ldr	r2, [r7, #0]
 8000ac4:	18d0      	adds	r0, r2, r3
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	68db      	ldr	r3, [r3, #12]
 8000aca:	697a      	ldr	r2, [r7, #20]
 8000acc:	4619      	mov	r1, r3
 8000ace:	f005 fd1d 	bl	800650c <memcpy>
      offset += length_message_type;
 8000ad2:	69fa      	ldr	r2, [r7, #28]
 8000ad4:	697b      	ldr	r3, [r7, #20]
 8000ad6:	4413      	add	r3, r2
 8000ad8:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	691b      	ldr	r3, [r3, #16]
 8000ade:	4618      	mov	r0, r3
 8000ae0:	f7ff fb72 	bl	80001c8 <strlen>
 8000ae4:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 8000ae6:	69fb      	ldr	r3, [r7, #28]
 8000ae8:	683a      	ldr	r2, [r7, #0]
 8000aea:	4413      	add	r3, r2
 8000aec:	6939      	ldr	r1, [r7, #16]
 8000aee:	4618      	mov	r0, r3
 8000af0:	f000 fef8 	bl	80018e4 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8000af4:	69fb      	ldr	r3, [r7, #28]
 8000af6:	3304      	adds	r3, #4
 8000af8:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 8000afa:	69fb      	ldr	r3, [r7, #28]
 8000afc:	683a      	ldr	r2, [r7, #0]
 8000afe:	18d0      	adds	r0, r2, r3
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	691b      	ldr	r3, [r3, #16]
 8000b04:	693a      	ldr	r2, [r7, #16]
 8000b06:	4619      	mov	r1, r3
 8000b08:	f005 fd00 	bl	800650c <memcpy>
      offset += length_md5sum;
 8000b0c:	69fa      	ldr	r2, [r7, #28]
 8000b0e:	693b      	ldr	r3, [r7, #16]
 8000b10:	4413      	add	r3, r2
 8000b12:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	695b      	ldr	r3, [r3, #20]
 8000b18:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 8000b1a:	68f9      	ldr	r1, [r7, #12]
 8000b1c:	69fb      	ldr	r3, [r7, #28]
 8000b1e:	683a      	ldr	r2, [r7, #0]
 8000b20:	4413      	add	r3, r2
 8000b22:	b2ca      	uxtb	r2, r1
 8000b24:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 8000b26:	68fb      	ldr	r3, [r7, #12]
 8000b28:	0a19      	lsrs	r1, r3, #8
 8000b2a:	69fb      	ldr	r3, [r7, #28]
 8000b2c:	3301      	adds	r3, #1
 8000b2e:	683a      	ldr	r2, [r7, #0]
 8000b30:	4413      	add	r3, r2
 8000b32:	b2ca      	uxtb	r2, r1
 8000b34:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 8000b36:	68fb      	ldr	r3, [r7, #12]
 8000b38:	0c19      	lsrs	r1, r3, #16
 8000b3a:	69fb      	ldr	r3, [r7, #28]
 8000b3c:	3302      	adds	r3, #2
 8000b3e:	683a      	ldr	r2, [r7, #0]
 8000b40:	4413      	add	r3, r2
 8000b42:	b2ca      	uxtb	r2, r1
 8000b44:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 8000b46:	68fb      	ldr	r3, [r7, #12]
 8000b48:	0e19      	lsrs	r1, r3, #24
 8000b4a:	69fb      	ldr	r3, [r7, #28]
 8000b4c:	3303      	adds	r3, #3
 8000b4e:	683a      	ldr	r2, [r7, #0]
 8000b50:	4413      	add	r3, r2
 8000b52:	b2ca      	uxtb	r2, r1
 8000b54:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 8000b56:	69fb      	ldr	r3, [r7, #28]
 8000b58:	3304      	adds	r3, #4
 8000b5a:	61fb      	str	r3, [r7, #28]
      return offset;
 8000b5c:	69fb      	ldr	r3, [r7, #28]
    }
 8000b5e:	4618      	mov	r0, r3
 8000b60:	3720      	adds	r7, #32
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}

08000b66 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8000b66:	b580      	push	{r7, lr}
 8000b68:	b08a      	sub	sp, #40	; 0x28
 8000b6a:	af00      	add	r7, sp, #0
 8000b6c:	6078      	str	r0, [r7, #4]
 8000b6e:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000b70:	2300      	movs	r3, #0
 8000b72:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 8000b74:	69bb      	ldr	r3, [r7, #24]
 8000b76:	683a      	ldr	r2, [r7, #0]
 8000b78:	4413      	add	r3, r2
 8000b7a:	781b      	ldrb	r3, [r3, #0]
 8000b7c:	b29a      	uxth	r2, r3
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	889b      	ldrh	r3, [r3, #4]
 8000b86:	b21a      	sxth	r2, r3
 8000b88:	69bb      	ldr	r3, [r7, #24]
 8000b8a:	3301      	adds	r3, #1
 8000b8c:	6839      	ldr	r1, [r7, #0]
 8000b8e:	440b      	add	r3, r1
 8000b90:	781b      	ldrb	r3, [r3, #0]
 8000b92:	021b      	lsls	r3, r3, #8
 8000b94:	b21b      	sxth	r3, r3
 8000b96:	4313      	orrs	r3, r2
 8000b98:	b21b      	sxth	r3, r3
 8000b9a:	b29a      	uxth	r2, r3
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 8000ba0:	69bb      	ldr	r3, [r7, #24]
 8000ba2:	3302      	adds	r3, #2
 8000ba4:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 8000ba6:	69bb      	ldr	r3, [r7, #24]
 8000ba8:	683a      	ldr	r2, [r7, #0]
 8000baa:	441a      	add	r2, r3
 8000bac:	f107 0314 	add.w	r3, r7, #20
 8000bb0:	4611      	mov	r1, r2
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	f000 feb4 	bl	8001920 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8000bb8:	69bb      	ldr	r3, [r7, #24]
 8000bba:	3304      	adds	r3, #4
 8000bbc:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8000bbe:	69bb      	ldr	r3, [r7, #24]
 8000bc0:	627b      	str	r3, [r7, #36]	; 0x24
 8000bc2:	69ba      	ldr	r2, [r7, #24]
 8000bc4:	697b      	ldr	r3, [r7, #20]
 8000bc6:	4413      	add	r3, r2
 8000bc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000bca:	429a      	cmp	r2, r3
 8000bcc:	d20c      	bcs.n	8000be8 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x82>
          inbuffer[k-1]=inbuffer[k];
 8000bce:	683a      	ldr	r2, [r7, #0]
 8000bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bd2:	441a      	add	r2, r3
 8000bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bd6:	3b01      	subs	r3, #1
 8000bd8:	6839      	ldr	r1, [r7, #0]
 8000bda:	440b      	add	r3, r1
 8000bdc:	7812      	ldrb	r2, [r2, #0]
 8000bde:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8000be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000be2:	3301      	adds	r3, #1
 8000be4:	627b      	str	r3, [r7, #36]	; 0x24
 8000be6:	e7ec      	b.n	8000bc2 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5c>
      }
      inbuffer[offset+length_topic_name-1]=0;
 8000be8:	69ba      	ldr	r2, [r7, #24]
 8000bea:	697b      	ldr	r3, [r7, #20]
 8000bec:	4413      	add	r3, r2
 8000bee:	3b01      	subs	r3, #1
 8000bf0:	683a      	ldr	r2, [r7, #0]
 8000bf2:	4413      	add	r3, r2
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 8000bf8:	69bb      	ldr	r3, [r7, #24]
 8000bfa:	3b01      	subs	r3, #1
 8000bfc:	683a      	ldr	r2, [r7, #0]
 8000bfe:	441a      	add	r2, r3
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 8000c04:	69ba      	ldr	r2, [r7, #24]
 8000c06:	697b      	ldr	r3, [r7, #20]
 8000c08:	4413      	add	r3, r2
 8000c0a:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 8000c0c:	69bb      	ldr	r3, [r7, #24]
 8000c0e:	683a      	ldr	r2, [r7, #0]
 8000c10:	441a      	add	r2, r3
 8000c12:	f107 0310 	add.w	r3, r7, #16
 8000c16:	4611      	mov	r1, r2
 8000c18:	4618      	mov	r0, r3
 8000c1a:	f000 fe81 	bl	8001920 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8000c1e:	69bb      	ldr	r3, [r7, #24]
 8000c20:	3304      	adds	r3, #4
 8000c22:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8000c24:	69bb      	ldr	r3, [r7, #24]
 8000c26:	623b      	str	r3, [r7, #32]
 8000c28:	69ba      	ldr	r2, [r7, #24]
 8000c2a:	693b      	ldr	r3, [r7, #16]
 8000c2c:	4413      	add	r3, r2
 8000c2e:	6a3a      	ldr	r2, [r7, #32]
 8000c30:	429a      	cmp	r2, r3
 8000c32:	d20c      	bcs.n	8000c4e <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xe8>
          inbuffer[k-1]=inbuffer[k];
 8000c34:	683a      	ldr	r2, [r7, #0]
 8000c36:	6a3b      	ldr	r3, [r7, #32]
 8000c38:	441a      	add	r2, r3
 8000c3a:	6a3b      	ldr	r3, [r7, #32]
 8000c3c:	3b01      	subs	r3, #1
 8000c3e:	6839      	ldr	r1, [r7, #0]
 8000c40:	440b      	add	r3, r1
 8000c42:	7812      	ldrb	r2, [r2, #0]
 8000c44:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8000c46:	6a3b      	ldr	r3, [r7, #32]
 8000c48:	3301      	adds	r3, #1
 8000c4a:	623b      	str	r3, [r7, #32]
 8000c4c:	e7ec      	b.n	8000c28 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc2>
      }
      inbuffer[offset+length_message_type-1]=0;
 8000c4e:	69ba      	ldr	r2, [r7, #24]
 8000c50:	693b      	ldr	r3, [r7, #16]
 8000c52:	4413      	add	r3, r2
 8000c54:	3b01      	subs	r3, #1
 8000c56:	683a      	ldr	r2, [r7, #0]
 8000c58:	4413      	add	r3, r2
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 8000c5e:	69bb      	ldr	r3, [r7, #24]
 8000c60:	3b01      	subs	r3, #1
 8000c62:	683a      	ldr	r2, [r7, #0]
 8000c64:	441a      	add	r2, r3
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 8000c6a:	69ba      	ldr	r2, [r7, #24]
 8000c6c:	693b      	ldr	r3, [r7, #16]
 8000c6e:	4413      	add	r3, r2
 8000c70:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 8000c72:	69bb      	ldr	r3, [r7, #24]
 8000c74:	683a      	ldr	r2, [r7, #0]
 8000c76:	441a      	add	r2, r3
 8000c78:	f107 030c 	add.w	r3, r7, #12
 8000c7c:	4611      	mov	r1, r2
 8000c7e:	4618      	mov	r0, r3
 8000c80:	f000 fe4e 	bl	8001920 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8000c84:	69bb      	ldr	r3, [r7, #24]
 8000c86:	3304      	adds	r3, #4
 8000c88:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8000c8a:	69bb      	ldr	r3, [r7, #24]
 8000c8c:	61fb      	str	r3, [r7, #28]
 8000c8e:	69ba      	ldr	r2, [r7, #24]
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	4413      	add	r3, r2
 8000c94:	69fa      	ldr	r2, [r7, #28]
 8000c96:	429a      	cmp	r2, r3
 8000c98:	d20c      	bcs.n	8000cb4 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x14e>
          inbuffer[k-1]=inbuffer[k];
 8000c9a:	683a      	ldr	r2, [r7, #0]
 8000c9c:	69fb      	ldr	r3, [r7, #28]
 8000c9e:	441a      	add	r2, r3
 8000ca0:	69fb      	ldr	r3, [r7, #28]
 8000ca2:	3b01      	subs	r3, #1
 8000ca4:	6839      	ldr	r1, [r7, #0]
 8000ca6:	440b      	add	r3, r1
 8000ca8:	7812      	ldrb	r2, [r2, #0]
 8000caa:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8000cac:	69fb      	ldr	r3, [r7, #28]
 8000cae:	3301      	adds	r3, #1
 8000cb0:	61fb      	str	r3, [r7, #28]
 8000cb2:	e7ec      	b.n	8000c8e <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x128>
      }
      inbuffer[offset+length_md5sum-1]=0;
 8000cb4:	69ba      	ldr	r2, [r7, #24]
 8000cb6:	68fb      	ldr	r3, [r7, #12]
 8000cb8:	4413      	add	r3, r2
 8000cba:	3b01      	subs	r3, #1
 8000cbc:	683a      	ldr	r2, [r7, #0]
 8000cbe:	4413      	add	r3, r2
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 8000cc4:	69bb      	ldr	r3, [r7, #24]
 8000cc6:	3b01      	subs	r3, #1
 8000cc8:	683a      	ldr	r2, [r7, #0]
 8000cca:	441a      	add	r2, r3
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 8000cd0:	69ba      	ldr	r2, [r7, #24]
 8000cd2:	68fb      	ldr	r3, [r7, #12]
 8000cd4:	4413      	add	r3, r2
 8000cd6:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8000cdc:	68bb      	ldr	r3, [r7, #8]
 8000cde:	69ba      	ldr	r2, [r7, #24]
 8000ce0:	6839      	ldr	r1, [r7, #0]
 8000ce2:	440a      	add	r2, r1
 8000ce4:	7812      	ldrb	r2, [r2, #0]
 8000ce6:	4313      	orrs	r3, r2
 8000ce8:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8000cea:	68ba      	ldr	r2, [r7, #8]
 8000cec:	69bb      	ldr	r3, [r7, #24]
 8000cee:	3301      	adds	r3, #1
 8000cf0:	6839      	ldr	r1, [r7, #0]
 8000cf2:	440b      	add	r3, r1
 8000cf4:	781b      	ldrb	r3, [r3, #0]
 8000cf6:	021b      	lsls	r3, r3, #8
 8000cf8:	4313      	orrs	r3, r2
 8000cfa:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8000cfc:	68ba      	ldr	r2, [r7, #8]
 8000cfe:	69bb      	ldr	r3, [r7, #24]
 8000d00:	3302      	adds	r3, #2
 8000d02:	6839      	ldr	r1, [r7, #0]
 8000d04:	440b      	add	r3, r1
 8000d06:	781b      	ldrb	r3, [r3, #0]
 8000d08:	041b      	lsls	r3, r3, #16
 8000d0a:	4313      	orrs	r3, r2
 8000d0c:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8000d0e:	68ba      	ldr	r2, [r7, #8]
 8000d10:	69bb      	ldr	r3, [r7, #24]
 8000d12:	3303      	adds	r3, #3
 8000d14:	6839      	ldr	r1, [r7, #0]
 8000d16:	440b      	add	r3, r1
 8000d18:	781b      	ldrb	r3, [r3, #0]
 8000d1a:	061b      	lsls	r3, r3, #24
 8000d1c:	4313      	orrs	r3, r2
 8000d1e:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 8000d20:	68ba      	ldr	r2, [r7, #8]
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 8000d26:	69bb      	ldr	r3, [r7, #24]
 8000d28:	3304      	adds	r3, #4
 8000d2a:	61bb      	str	r3, [r7, #24]
     return offset;
 8000d2c:	69bb      	ldr	r3, [r7, #24]
    }
 8000d2e:	4618      	mov	r0, r3
 8000d30:	3728      	adds	r7, #40	; 0x28
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}
	...

08000d38 <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/TopicInfo"; };
 8000d38:	b480      	push	{r7}
 8000d3a:	b083      	sub	sp, #12
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
 8000d40:	4b03      	ldr	r3, [pc, #12]	; (8000d50 <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x18>)
 8000d42:	4618      	mov	r0, r3
 8000d44:	370c      	adds	r7, #12
 8000d46:	46bd      	mov	sp, r7
 8000d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4c:	4770      	bx	lr
 8000d4e:	bf00      	nop
 8000d50:	08006820 	.word	0x08006820

08000d54 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    const char * getMD5(){ return "0ad51f88fc44892f8c10684077646005"; };
 8000d54:	b480      	push	{r7}
 8000d56:	b083      	sub	sp, #12
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
 8000d5c:	4b03      	ldr	r3, [pc, #12]	; (8000d6c <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x18>)
 8000d5e:	4618      	mov	r0, r3
 8000d60:	370c      	adds	r7, #12
 8000d62:	46bd      	mov	sp, r7
 8000d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d68:	4770      	bx	lr
 8000d6a:	bf00      	nop
 8000d6c:	0800683c 	.word	0x0800683c

08000d70 <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b082      	sub	sp, #8
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	f7ff fc86 	bl	800068c <_ZN3ros3MsgC1Ev>
 8000d80:	4a06      	ldr	r2, [pc, #24]	; (8000d9c <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	601a      	str	r2, [r3, #0]
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	2200      	movs	r2, #0
 8000d8a:	711a      	strb	r2, [r3, #4]
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	4a04      	ldr	r2, [pc, #16]	; (8000da0 <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 8000d90:	609a      	str	r2, [r3, #8]
    {
    }
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	4618      	mov	r0, r3
 8000d96:	3708      	adds	r7, #8
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bd80      	pop	{r7, pc}
 8000d9c:	080069a0 	.word	0x080069a0
 8000da0:	0800681c 	.word	0x0800681c

08000da4 <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b084      	sub	sp, #16
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
 8000dac:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000dae:	2300      	movs	r3, #0
 8000db0:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 8000db2:	68fb      	ldr	r3, [r7, #12]
 8000db4:	683a      	ldr	r2, [r7, #0]
 8000db6:	4413      	add	r3, r2
 8000db8:	687a      	ldr	r2, [r7, #4]
 8000dba:	7912      	ldrb	r2, [r2, #4]
 8000dbc:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 8000dbe:	68fb      	ldr	r3, [r7, #12]
 8000dc0:	3301      	adds	r3, #1
 8000dc2:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	689b      	ldr	r3, [r3, #8]
 8000dc8:	4618      	mov	r0, r3
 8000dca:	f7ff f9fd 	bl	80001c8 <strlen>
 8000dce:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	683a      	ldr	r2, [r7, #0]
 8000dd4:	4413      	add	r3, r2
 8000dd6:	68b9      	ldr	r1, [r7, #8]
 8000dd8:	4618      	mov	r0, r3
 8000dda:	f000 fd83 	bl	80018e4 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8000dde:	68fb      	ldr	r3, [r7, #12]
 8000de0:	3304      	adds	r3, #4
 8000de2:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	683a      	ldr	r2, [r7, #0]
 8000de8:	18d0      	adds	r0, r2, r3
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	689b      	ldr	r3, [r3, #8]
 8000dee:	68ba      	ldr	r2, [r7, #8]
 8000df0:	4619      	mov	r1, r3
 8000df2:	f005 fb8b 	bl	800650c <memcpy>
      offset += length_msg;
 8000df6:	68fa      	ldr	r2, [r7, #12]
 8000df8:	68bb      	ldr	r3, [r7, #8]
 8000dfa:	4413      	add	r3, r2
 8000dfc:	60fb      	str	r3, [r7, #12]
      return offset;
 8000dfe:	68fb      	ldr	r3, [r7, #12]
    }
 8000e00:	4618      	mov	r0, r3
 8000e02:	3710      	adds	r7, #16
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bd80      	pop	{r7, pc}

08000e08 <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b086      	sub	sp, #24
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
 8000e10:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000e12:	2300      	movs	r3, #0
 8000e14:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 8000e16:	693b      	ldr	r3, [r7, #16]
 8000e18:	683a      	ldr	r2, [r7, #0]
 8000e1a:	4413      	add	r3, r2
 8000e1c:	781a      	ldrb	r2, [r3, #0]
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 8000e22:	693b      	ldr	r3, [r7, #16]
 8000e24:	3301      	adds	r3, #1
 8000e26:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 8000e28:	693b      	ldr	r3, [r7, #16]
 8000e2a:	683a      	ldr	r2, [r7, #0]
 8000e2c:	441a      	add	r2, r3
 8000e2e:	f107 030c 	add.w	r3, r7, #12
 8000e32:	4611      	mov	r1, r2
 8000e34:	4618      	mov	r0, r3
 8000e36:	f000 fd73 	bl	8001920 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8000e3a:	693b      	ldr	r3, [r7, #16]
 8000e3c:	3304      	adds	r3, #4
 8000e3e:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8000e40:	693b      	ldr	r3, [r7, #16]
 8000e42:	617b      	str	r3, [r7, #20]
 8000e44:	693a      	ldr	r2, [r7, #16]
 8000e46:	68fb      	ldr	r3, [r7, #12]
 8000e48:	4413      	add	r3, r2
 8000e4a:	697a      	ldr	r2, [r7, #20]
 8000e4c:	429a      	cmp	r2, r3
 8000e4e:	d20c      	bcs.n	8000e6a <_ZN14rosserial_msgs3Log11deserializeEPh+0x62>
          inbuffer[k-1]=inbuffer[k];
 8000e50:	683a      	ldr	r2, [r7, #0]
 8000e52:	697b      	ldr	r3, [r7, #20]
 8000e54:	441a      	add	r2, r3
 8000e56:	697b      	ldr	r3, [r7, #20]
 8000e58:	3b01      	subs	r3, #1
 8000e5a:	6839      	ldr	r1, [r7, #0]
 8000e5c:	440b      	add	r3, r1
 8000e5e:	7812      	ldrb	r2, [r2, #0]
 8000e60:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8000e62:	697b      	ldr	r3, [r7, #20]
 8000e64:	3301      	adds	r3, #1
 8000e66:	617b      	str	r3, [r7, #20]
 8000e68:	e7ec      	b.n	8000e44 <_ZN14rosserial_msgs3Log11deserializeEPh+0x3c>
      }
      inbuffer[offset+length_msg-1]=0;
 8000e6a:	693a      	ldr	r2, [r7, #16]
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	4413      	add	r3, r2
 8000e70:	3b01      	subs	r3, #1
 8000e72:	683a      	ldr	r2, [r7, #0]
 8000e74:	4413      	add	r3, r2
 8000e76:	2200      	movs	r2, #0
 8000e78:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 8000e7a:	693b      	ldr	r3, [r7, #16]
 8000e7c:	3b01      	subs	r3, #1
 8000e7e:	683a      	ldr	r2, [r7, #0]
 8000e80:	441a      	add	r2, r3
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 8000e86:	693a      	ldr	r2, [r7, #16]
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	4413      	add	r3, r2
 8000e8c:	613b      	str	r3, [r7, #16]
     return offset;
 8000e8e:	693b      	ldr	r3, [r7, #16]
    }
 8000e90:	4618      	mov	r0, r3
 8000e92:	3718      	adds	r7, #24
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bd80      	pop	{r7, pc}

08000e98 <_ZN14rosserial_msgs3Log7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/Log"; };
 8000e98:	b480      	push	{r7}
 8000e9a:	b083      	sub	sp, #12
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
 8000ea0:	4b03      	ldr	r3, [pc, #12]	; (8000eb0 <_ZN14rosserial_msgs3Log7getTypeEv+0x18>)
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	370c      	adds	r7, #12
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop
 8000eb0:	08006860 	.word	0x08006860

08000eb4 <_ZN14rosserial_msgs3Log6getMD5Ev>:
    const char * getMD5(){ return "11abd731c25933261cd6183bd12d6295"; };
 8000eb4:	b480      	push	{r7}
 8000eb6:	b083      	sub	sp, #12
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
 8000ebc:	4b03      	ldr	r3, [pc, #12]	; (8000ecc <_ZN14rosserial_msgs3Log6getMD5Ev+0x18>)
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	370c      	adds	r7, #12
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec8:	4770      	bx	lr
 8000eca:	bf00      	nop
 8000ecc:	08006874 	.word	0x08006874

08000ed0 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b082      	sub	sp, #8
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
      ints_length(0), ints(NULL),
      floats_length(0), floats(NULL),
      strings_length(0), strings(NULL)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	4618      	mov	r0, r3
 8000edc:	f7ff fbd6 	bl	800068c <_ZN3ros3MsgC1Ev>
 8000ee0:	4a0c      	ldr	r2, [pc, #48]	; (8000f14 <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x44>)
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	601a      	str	r2, [r3, #0]
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	2200      	movs	r2, #0
 8000eea:	605a      	str	r2, [r3, #4]
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	2200      	movs	r2, #0
 8000ef0:	60da      	str	r2, [r3, #12]
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	611a      	str	r2, [r3, #16]
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	2200      	movs	r2, #0
 8000efc:	619a      	str	r2, [r3, #24]
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	2200      	movs	r2, #0
 8000f02:	61da      	str	r2, [r3, #28]
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	2200      	movs	r2, #0
 8000f08:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	3708      	adds	r7, #8
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bd80      	pop	{r7, pc}
 8000f14:	08006988 	.word	0x08006988

08000f18 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b08a      	sub	sp, #40	; 0x28
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
 8000f20:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000f22:	2300      	movs	r3, #0
 8000f24:	627b      	str	r3, [r7, #36]	; 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	6859      	ldr	r1, [r3, #4]
 8000f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f2c:	683a      	ldr	r2, [r7, #0]
 8000f2e:	4413      	add	r3, r2
 8000f30:	b2ca      	uxtb	r2, r1
 8000f32:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	685b      	ldr	r3, [r3, #4]
 8000f38:	0a19      	lsrs	r1, r3, #8
 8000f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f3c:	3301      	adds	r3, #1
 8000f3e:	683a      	ldr	r2, [r7, #0]
 8000f40:	4413      	add	r3, r2
 8000f42:	b2ca      	uxtb	r2, r1
 8000f44:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	685b      	ldr	r3, [r3, #4]
 8000f4a:	0c19      	lsrs	r1, r3, #16
 8000f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f4e:	3302      	adds	r3, #2
 8000f50:	683a      	ldr	r2, [r7, #0]
 8000f52:	4413      	add	r3, r2
 8000f54:	b2ca      	uxtb	r2, r1
 8000f56:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	685b      	ldr	r3, [r3, #4]
 8000f5c:	0e19      	lsrs	r1, r3, #24
 8000f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f60:	3303      	adds	r3, #3
 8000f62:	683a      	ldr	r2, [r7, #0]
 8000f64:	4413      	add	r3, r2
 8000f66:	b2ca      	uxtb	r2, r1
 8000f68:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 8000f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f6c:	3304      	adds	r3, #4
 8000f6e:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8000f70:	2300      	movs	r3, #0
 8000f72:	623b      	str	r3, [r7, #32]
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	685b      	ldr	r3, [r3, #4]
 8000f78:	6a3a      	ldr	r2, [r7, #32]
 8000f7a:	429a      	cmp	r2, r3
 8000f7c:	d22b      	bcs.n	8000fd6 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xbe>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	68da      	ldr	r2, [r3, #12]
 8000f82:	6a3b      	ldr	r3, [r7, #32]
 8000f84:	009b      	lsls	r3, r3, #2
 8000f86:	4413      	add	r3, r2
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 8000f8c:	6939      	ldr	r1, [r7, #16]
 8000f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f90:	683a      	ldr	r2, [r7, #0]
 8000f92:	4413      	add	r3, r2
 8000f94:	b2ca      	uxtb	r2, r1
 8000f96:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 8000f98:	693b      	ldr	r3, [r7, #16]
 8000f9a:	0a19      	lsrs	r1, r3, #8
 8000f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f9e:	3301      	adds	r3, #1
 8000fa0:	683a      	ldr	r2, [r7, #0]
 8000fa2:	4413      	add	r3, r2
 8000fa4:	b2ca      	uxtb	r2, r1
 8000fa6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 8000fa8:	693b      	ldr	r3, [r7, #16]
 8000faa:	0c19      	lsrs	r1, r3, #16
 8000fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fae:	3302      	adds	r3, #2
 8000fb0:	683a      	ldr	r2, [r7, #0]
 8000fb2:	4413      	add	r3, r2
 8000fb4:	b2ca      	uxtb	r2, r1
 8000fb6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 8000fb8:	693b      	ldr	r3, [r7, #16]
 8000fba:	0e19      	lsrs	r1, r3, #24
 8000fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fbe:	3303      	adds	r3, #3
 8000fc0:	683a      	ldr	r2, [r7, #0]
 8000fc2:	4413      	add	r3, r2
 8000fc4:	b2ca      	uxtb	r2, r1
 8000fc6:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 8000fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fca:	3304      	adds	r3, #4
 8000fcc:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8000fce:	6a3b      	ldr	r3, [r7, #32]
 8000fd0:	3301      	adds	r3, #1
 8000fd2:	623b      	str	r3, [r7, #32]
 8000fd4:	e7ce      	b.n	8000f74 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5c>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	6919      	ldr	r1, [r3, #16]
 8000fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fdc:	683a      	ldr	r2, [r7, #0]
 8000fde:	4413      	add	r3, r2
 8000fe0:	b2ca      	uxtb	r2, r1
 8000fe2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	691b      	ldr	r3, [r3, #16]
 8000fe8:	0a19      	lsrs	r1, r3, #8
 8000fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fec:	3301      	adds	r3, #1
 8000fee:	683a      	ldr	r2, [r7, #0]
 8000ff0:	4413      	add	r3, r2
 8000ff2:	b2ca      	uxtb	r2, r1
 8000ff4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	691b      	ldr	r3, [r3, #16]
 8000ffa:	0c19      	lsrs	r1, r3, #16
 8000ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ffe:	3302      	adds	r3, #2
 8001000:	683a      	ldr	r2, [r7, #0]
 8001002:	4413      	add	r3, r2
 8001004:	b2ca      	uxtb	r2, r1
 8001006:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	691b      	ldr	r3, [r3, #16]
 800100c:	0e19      	lsrs	r1, r3, #24
 800100e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001010:	3303      	adds	r3, #3
 8001012:	683a      	ldr	r2, [r7, #0]
 8001014:	4413      	add	r3, r2
 8001016:	b2ca      	uxtb	r2, r1
 8001018:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 800101a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800101c:	3304      	adds	r3, #4
 800101e:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8001020:	2300      	movs	r3, #0
 8001022:	61fb      	str	r3, [r7, #28]
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	691b      	ldr	r3, [r3, #16]
 8001028:	69fa      	ldr	r2, [r7, #28]
 800102a:	429a      	cmp	r2, r3
 800102c:	d22b      	bcs.n	8001086 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x16e>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	699a      	ldr	r2, [r3, #24]
 8001032:	69fb      	ldr	r3, [r7, #28]
 8001034:	009b      	lsls	r3, r3, #2
 8001036:	4413      	add	r3, r2
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 800103c:	68f9      	ldr	r1, [r7, #12]
 800103e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001040:	683a      	ldr	r2, [r7, #0]
 8001042:	4413      	add	r3, r2
 8001044:	b2ca      	uxtb	r2, r1
 8001046:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	0a19      	lsrs	r1, r3, #8
 800104c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800104e:	3301      	adds	r3, #1
 8001050:	683a      	ldr	r2, [r7, #0]
 8001052:	4413      	add	r3, r2
 8001054:	b2ca      	uxtb	r2, r1
 8001056:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	0c19      	lsrs	r1, r3, #16
 800105c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800105e:	3302      	adds	r3, #2
 8001060:	683a      	ldr	r2, [r7, #0]
 8001062:	4413      	add	r3, r2
 8001064:	b2ca      	uxtb	r2, r1
 8001066:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	0e19      	lsrs	r1, r3, #24
 800106c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800106e:	3303      	adds	r3, #3
 8001070:	683a      	ldr	r2, [r7, #0]
 8001072:	4413      	add	r3, r2
 8001074:	b2ca      	uxtb	r2, r1
 8001076:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 8001078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800107a:	3304      	adds	r3, #4
 800107c:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 800107e:	69fb      	ldr	r3, [r7, #28]
 8001080:	3301      	adds	r3, #1
 8001082:	61fb      	str	r3, [r7, #28]
 8001084:	e7ce      	b.n	8001024 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10c>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	69d9      	ldr	r1, [r3, #28]
 800108a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800108c:	683a      	ldr	r2, [r7, #0]
 800108e:	4413      	add	r3, r2
 8001090:	b2ca      	uxtb	r2, r1
 8001092:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	69db      	ldr	r3, [r3, #28]
 8001098:	0a19      	lsrs	r1, r3, #8
 800109a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800109c:	3301      	adds	r3, #1
 800109e:	683a      	ldr	r2, [r7, #0]
 80010a0:	4413      	add	r3, r2
 80010a2:	b2ca      	uxtb	r2, r1
 80010a4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	69db      	ldr	r3, [r3, #28]
 80010aa:	0c19      	lsrs	r1, r3, #16
 80010ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010ae:	3302      	adds	r3, #2
 80010b0:	683a      	ldr	r2, [r7, #0]
 80010b2:	4413      	add	r3, r2
 80010b4:	b2ca      	uxtb	r2, r1
 80010b6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	69db      	ldr	r3, [r3, #28]
 80010bc:	0e19      	lsrs	r1, r3, #24
 80010be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010c0:	3303      	adds	r3, #3
 80010c2:	683a      	ldr	r2, [r7, #0]
 80010c4:	4413      	add	r3, r2
 80010c6:	b2ca      	uxtb	r2, r1
 80010c8:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 80010ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010cc:	3304      	adds	r3, #4
 80010ce:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 80010d0:	2300      	movs	r3, #0
 80010d2:	61bb      	str	r3, [r7, #24]
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	69db      	ldr	r3, [r3, #28]
 80010d8:	69ba      	ldr	r2, [r7, #24]
 80010da:	429a      	cmp	r2, r3
 80010dc:	d228      	bcs.n	8001130 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x218>
      uint32_t length_stringsi = strlen(this->strings[i]);
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80010e2:	69bb      	ldr	r3, [r7, #24]
 80010e4:	009b      	lsls	r3, r3, #2
 80010e6:	4413      	add	r3, r2
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	4618      	mov	r0, r3
 80010ec:	f7ff f86c 	bl	80001c8 <strlen>
 80010f0:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 80010f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010f4:	683a      	ldr	r2, [r7, #0]
 80010f6:	4413      	add	r3, r2
 80010f8:	6979      	ldr	r1, [r7, #20]
 80010fa:	4618      	mov	r0, r3
 80010fc:	f000 fbf2 	bl	80018e4 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001102:	3304      	adds	r3, #4
 8001104:	627b      	str	r3, [r7, #36]	; 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 8001106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001108:	683a      	ldr	r2, [r7, #0]
 800110a:	18d0      	adds	r0, r2, r3
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001110:	69bb      	ldr	r3, [r7, #24]
 8001112:	009b      	lsls	r3, r3, #2
 8001114:	4413      	add	r3, r2
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	697a      	ldr	r2, [r7, #20]
 800111a:	4619      	mov	r1, r3
 800111c:	f005 f9f6 	bl	800650c <memcpy>
      offset += length_stringsi;
 8001120:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001122:	697b      	ldr	r3, [r7, #20]
 8001124:	4413      	add	r3, r2
 8001126:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8001128:	69bb      	ldr	r3, [r7, #24]
 800112a:	3301      	adds	r3, #1
 800112c:	61bb      	str	r3, [r7, #24]
 800112e:	e7d1      	b.n	80010d4 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1bc>
      }
      return offset;
 8001130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8001132:	4618      	mov	r0, r3
 8001134:	3728      	adds	r7, #40	; 0x28
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}

0800113a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 800113a:	b580      	push	{r7, lr}
 800113c:	b08e      	sub	sp, #56	; 0x38
 800113e:	af00      	add	r7, sp, #0
 8001140:	6078      	str	r0, [r7, #4]
 8001142:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001144:	2300      	movs	r3, #0
 8001146:	637b      	str	r3, [r7, #52]	; 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8001148:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800114a:	683a      	ldr	r2, [r7, #0]
 800114c:	4413      	add	r3, r2
 800114e:	781b      	ldrb	r3, [r3, #0]
 8001150:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8001152:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001154:	3301      	adds	r3, #1
 8001156:	683a      	ldr	r2, [r7, #0]
 8001158:	4413      	add	r3, r2
 800115a:	781b      	ldrb	r3, [r3, #0]
 800115c:	021b      	lsls	r3, r3, #8
 800115e:	6a3a      	ldr	r2, [r7, #32]
 8001160:	4313      	orrs	r3, r2
 8001162:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8001164:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001166:	3302      	adds	r3, #2
 8001168:	683a      	ldr	r2, [r7, #0]
 800116a:	4413      	add	r3, r2
 800116c:	781b      	ldrb	r3, [r3, #0]
 800116e:	041b      	lsls	r3, r3, #16
 8001170:	6a3a      	ldr	r2, [r7, #32]
 8001172:	4313      	orrs	r3, r2
 8001174:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8001176:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001178:	3303      	adds	r3, #3
 800117a:	683a      	ldr	r2, [r7, #0]
 800117c:	4413      	add	r3, r2
 800117e:	781b      	ldrb	r3, [r3, #0]
 8001180:	061b      	lsls	r3, r3, #24
 8001182:	6a3a      	ldr	r2, [r7, #32]
 8001184:	4313      	orrs	r3, r2
 8001186:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 8001188:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800118a:	3304      	adds	r3, #4
 800118c:	637b      	str	r3, [r7, #52]	; 0x34
      if(ints_lengthT > ints_length)
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	685b      	ldr	r3, [r3, #4]
 8001192:	6a3a      	ldr	r2, [r7, #32]
 8001194:	429a      	cmp	r2, r3
 8001196:	d90a      	bls.n	80011ae <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	68da      	ldr	r2, [r3, #12]
 800119c:	6a3b      	ldr	r3, [r7, #32]
 800119e:	009b      	lsls	r3, r3, #2
 80011a0:	4619      	mov	r1, r3
 80011a2:	4610      	mov	r0, r2
 80011a4:	f005 f9c6 	bl	8006534 <realloc>
 80011a8:	4602      	mov	r2, r0
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	6a3a      	ldr	r2, [r7, #32]
 80011b2:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 80011b4:	2300      	movs	r3, #0
 80011b6:	633b      	str	r3, [r7, #48]	; 0x30
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	685b      	ldr	r3, [r3, #4]
 80011bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80011be:	429a      	cmp	r2, r3
 80011c0:	d236      	bcs.n	8001230 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xf6>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 80011c2:	2300      	movs	r3, #0
 80011c4:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80011c6:	697b      	ldr	r3, [r7, #20]
 80011c8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80011ca:	6839      	ldr	r1, [r7, #0]
 80011cc:	440a      	add	r2, r1
 80011ce:	7812      	ldrb	r2, [r2, #0]
 80011d0:	4313      	orrs	r3, r2
 80011d2:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80011d4:	697a      	ldr	r2, [r7, #20]
 80011d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80011d8:	3301      	adds	r3, #1
 80011da:	6839      	ldr	r1, [r7, #0]
 80011dc:	440b      	add	r3, r1
 80011de:	781b      	ldrb	r3, [r3, #0]
 80011e0:	021b      	lsls	r3, r3, #8
 80011e2:	4313      	orrs	r3, r2
 80011e4:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80011e6:	697a      	ldr	r2, [r7, #20]
 80011e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80011ea:	3302      	adds	r3, #2
 80011ec:	6839      	ldr	r1, [r7, #0]
 80011ee:	440b      	add	r3, r1
 80011f0:	781b      	ldrb	r3, [r3, #0]
 80011f2:	041b      	lsls	r3, r3, #16
 80011f4:	4313      	orrs	r3, r2
 80011f6:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80011f8:	697a      	ldr	r2, [r7, #20]
 80011fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80011fc:	3303      	adds	r3, #3
 80011fe:	6839      	ldr	r1, [r7, #0]
 8001200:	440b      	add	r3, r1
 8001202:	781b      	ldrb	r3, [r3, #0]
 8001204:	061b      	lsls	r3, r3, #24
 8001206:	4313      	orrs	r3, r2
 8001208:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 800120a:	697a      	ldr	r2, [r7, #20]
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 8001210:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001212:	3304      	adds	r3, #4
 8001214:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	68da      	ldr	r2, [r3, #12]
 800121a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800121c:	009b      	lsls	r3, r3, #2
 800121e:	4413      	add	r3, r2
 8001220:	687a      	ldr	r2, [r7, #4]
 8001222:	3208      	adds	r2, #8
 8001224:	6812      	ldr	r2, [r2, #0]
 8001226:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 8001228:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800122a:	3301      	adds	r3, #1
 800122c:	633b      	str	r3, [r7, #48]	; 0x30
 800122e:	e7c3      	b.n	80011b8 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x7e>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8001230:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001232:	683a      	ldr	r2, [r7, #0]
 8001234:	4413      	add	r3, r2
 8001236:	781b      	ldrb	r3, [r3, #0]
 8001238:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 800123a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800123c:	3301      	adds	r3, #1
 800123e:	683a      	ldr	r2, [r7, #0]
 8001240:	4413      	add	r3, r2
 8001242:	781b      	ldrb	r3, [r3, #0]
 8001244:	021b      	lsls	r3, r3, #8
 8001246:	69fa      	ldr	r2, [r7, #28]
 8001248:	4313      	orrs	r3, r2
 800124a:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 800124c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800124e:	3302      	adds	r3, #2
 8001250:	683a      	ldr	r2, [r7, #0]
 8001252:	4413      	add	r3, r2
 8001254:	781b      	ldrb	r3, [r3, #0]
 8001256:	041b      	lsls	r3, r3, #16
 8001258:	69fa      	ldr	r2, [r7, #28]
 800125a:	4313      	orrs	r3, r2
 800125c:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 800125e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001260:	3303      	adds	r3, #3
 8001262:	683a      	ldr	r2, [r7, #0]
 8001264:	4413      	add	r3, r2
 8001266:	781b      	ldrb	r3, [r3, #0]
 8001268:	061b      	lsls	r3, r3, #24
 800126a:	69fa      	ldr	r2, [r7, #28]
 800126c:	4313      	orrs	r3, r2
 800126e:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 8001270:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001272:	3304      	adds	r3, #4
 8001274:	637b      	str	r3, [r7, #52]	; 0x34
      if(floats_lengthT > floats_length)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	691b      	ldr	r3, [r3, #16]
 800127a:	69fa      	ldr	r2, [r7, #28]
 800127c:	429a      	cmp	r2, r3
 800127e:	d90a      	bls.n	8001296 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	699a      	ldr	r2, [r3, #24]
 8001284:	69fb      	ldr	r3, [r7, #28]
 8001286:	009b      	lsls	r3, r3, #2
 8001288:	4619      	mov	r1, r3
 800128a:	4610      	mov	r0, r2
 800128c:	f005 f952 	bl	8006534 <realloc>
 8001290:	4602      	mov	r2, r0
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	69fa      	ldr	r2, [r7, #28]
 800129a:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 800129c:	2300      	movs	r3, #0
 800129e:	62fb      	str	r3, [r7, #44]	; 0x2c
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	691b      	ldr	r3, [r3, #16]
 80012a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80012a6:	429a      	cmp	r2, r3
 80012a8:	d236      	bcs.n	8001318 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1de>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 80012aa:	2300      	movs	r3, #0
 80012ac:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80012ae:	693b      	ldr	r3, [r7, #16]
 80012b0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80012b2:	6839      	ldr	r1, [r7, #0]
 80012b4:	440a      	add	r2, r1
 80012b6:	7812      	ldrb	r2, [r2, #0]
 80012b8:	4313      	orrs	r3, r2
 80012ba:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80012bc:	693a      	ldr	r2, [r7, #16]
 80012be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80012c0:	3301      	adds	r3, #1
 80012c2:	6839      	ldr	r1, [r7, #0]
 80012c4:	440b      	add	r3, r1
 80012c6:	781b      	ldrb	r3, [r3, #0]
 80012c8:	021b      	lsls	r3, r3, #8
 80012ca:	4313      	orrs	r3, r2
 80012cc:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80012ce:	693a      	ldr	r2, [r7, #16]
 80012d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80012d2:	3302      	adds	r3, #2
 80012d4:	6839      	ldr	r1, [r7, #0]
 80012d6:	440b      	add	r3, r1
 80012d8:	781b      	ldrb	r3, [r3, #0]
 80012da:	041b      	lsls	r3, r3, #16
 80012dc:	4313      	orrs	r3, r2
 80012de:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80012e0:	693a      	ldr	r2, [r7, #16]
 80012e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80012e4:	3303      	adds	r3, #3
 80012e6:	6839      	ldr	r1, [r7, #0]
 80012e8:	440b      	add	r3, r1
 80012ea:	781b      	ldrb	r3, [r3, #0]
 80012ec:	061b      	lsls	r3, r3, #24
 80012ee:	4313      	orrs	r3, r2
 80012f0:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 80012f2:	693a      	ldr	r2, [r7, #16]
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 80012f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80012fa:	3304      	adds	r3, #4
 80012fc:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	699a      	ldr	r2, [r3, #24]
 8001302:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001304:	009b      	lsls	r3, r3, #2
 8001306:	4413      	add	r3, r2
 8001308:	687a      	ldr	r2, [r7, #4]
 800130a:	3214      	adds	r2, #20
 800130c:	6812      	ldr	r2, [r2, #0]
 800130e:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 8001310:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001312:	3301      	adds	r3, #1
 8001314:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001316:	e7c3      	b.n	80012a0 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x166>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8001318:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800131a:	683a      	ldr	r2, [r7, #0]
 800131c:	4413      	add	r3, r2
 800131e:	781b      	ldrb	r3, [r3, #0]
 8001320:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8001322:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001324:	3301      	adds	r3, #1
 8001326:	683a      	ldr	r2, [r7, #0]
 8001328:	4413      	add	r3, r2
 800132a:	781b      	ldrb	r3, [r3, #0]
 800132c:	021b      	lsls	r3, r3, #8
 800132e:	69ba      	ldr	r2, [r7, #24]
 8001330:	4313      	orrs	r3, r2
 8001332:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8001334:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001336:	3302      	adds	r3, #2
 8001338:	683a      	ldr	r2, [r7, #0]
 800133a:	4413      	add	r3, r2
 800133c:	781b      	ldrb	r3, [r3, #0]
 800133e:	041b      	lsls	r3, r3, #16
 8001340:	69ba      	ldr	r2, [r7, #24]
 8001342:	4313      	orrs	r3, r2
 8001344:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8001346:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001348:	3303      	adds	r3, #3
 800134a:	683a      	ldr	r2, [r7, #0]
 800134c:	4413      	add	r3, r2
 800134e:	781b      	ldrb	r3, [r3, #0]
 8001350:	061b      	lsls	r3, r3, #24
 8001352:	69ba      	ldr	r2, [r7, #24]
 8001354:	4313      	orrs	r3, r2
 8001356:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 8001358:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800135a:	3304      	adds	r3, #4
 800135c:	637b      	str	r3, [r7, #52]	; 0x34
      if(strings_lengthT > strings_length)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	69db      	ldr	r3, [r3, #28]
 8001362:	69ba      	ldr	r2, [r7, #24]
 8001364:	429a      	cmp	r2, r3
 8001366:	d90a      	bls.n	800137e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800136c:	69bb      	ldr	r3, [r7, #24]
 800136e:	009b      	lsls	r3, r3, #2
 8001370:	4619      	mov	r1, r3
 8001372:	4610      	mov	r0, r2
 8001374:	f005 f8de 	bl	8006534 <realloc>
 8001378:	4602      	mov	r2, r0
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	625a      	str	r2, [r3, #36]	; 0x24
      strings_length = strings_lengthT;
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	69ba      	ldr	r2, [r7, #24]
 8001382:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 8001384:	2300      	movs	r3, #0
 8001386:	62bb      	str	r3, [r7, #40]	; 0x28
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	69db      	ldr	r3, [r3, #28]
 800138c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800138e:	429a      	cmp	r2, r3
 8001390:	d23f      	bcs.n	8001412 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2d8>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 8001392:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001394:	683a      	ldr	r2, [r7, #0]
 8001396:	441a      	add	r2, r3
 8001398:	f107 030c 	add.w	r3, r7, #12
 800139c:	4611      	mov	r1, r2
 800139e:	4618      	mov	r0, r3
 80013a0:	f000 fabe 	bl	8001920 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80013a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013a6:	3304      	adds	r3, #4
 80013a8:	637b      	str	r3, [r7, #52]	; 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 80013aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013ac:	627b      	str	r3, [r7, #36]	; 0x24
 80013ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	4413      	add	r3, r2
 80013b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013b6:	429a      	cmp	r2, r3
 80013b8:	d20c      	bcs.n	80013d4 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x29a>
          inbuffer[k-1]=inbuffer[k];
 80013ba:	683a      	ldr	r2, [r7, #0]
 80013bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013be:	441a      	add	r2, r3
 80013c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013c2:	3b01      	subs	r3, #1
 80013c4:	6839      	ldr	r1, [r7, #0]
 80013c6:	440b      	add	r3, r1
 80013c8:	7812      	ldrb	r2, [r2, #0]
 80013ca:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 80013cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013ce:	3301      	adds	r3, #1
 80013d0:	627b      	str	r3, [r7, #36]	; 0x24
 80013d2:	e7ec      	b.n	80013ae <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x274>
      }
      inbuffer[offset+length_st_strings-1]=0;
 80013d4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	4413      	add	r3, r2
 80013da:	3b01      	subs	r3, #1
 80013dc:	683a      	ldr	r2, [r7, #0]
 80013de:	4413      	add	r3, r2
 80013e0:	2200      	movs	r2, #0
 80013e2:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 80013e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013e6:	3b01      	subs	r3, #1
 80013e8:	683a      	ldr	r2, [r7, #0]
 80013ea:	441a      	add	r2, r3
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 80013f0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	4413      	add	r3, r2
 80013f6:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80013fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013fe:	009b      	lsls	r3, r3, #2
 8001400:	4413      	add	r3, r2
 8001402:	687a      	ldr	r2, [r7, #4]
 8001404:	3220      	adds	r2, #32
 8001406:	6812      	ldr	r2, [r2, #0]
 8001408:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 800140a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800140c:	3301      	adds	r3, #1
 800140e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001410:	e7ba      	b.n	8001388 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x24e>
      }
     return offset;
 8001412:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 8001414:	4618      	mov	r0, r3
 8001416:	3738      	adds	r7, #56	; 0x38
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}

0800141c <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    const char * getType(){ return REQUESTPARAM; };
 800141c:	b480      	push	{r7}
 800141e:	b083      	sub	sp, #12
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
 8001424:	4b03      	ldr	r3, [pc, #12]	; (8001434 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x18>)
 8001426:	4618      	mov	r0, r3
 8001428:	370c      	adds	r7, #12
 800142a:	46bd      	mov	sp, r7
 800142c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001430:	4770      	bx	lr
 8001432:	bf00      	nop
 8001434:	0800690c 	.word	0x0800690c

08001438 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    const char * getMD5(){ return "9f0e98bda65981986ddf53afa7a40e49"; };
 8001438:	b480      	push	{r7}
 800143a:	b083      	sub	sp, #12
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
 8001440:	4b03      	ldr	r3, [pc, #12]	; (8001450 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x18>)
 8001442:	4618      	mov	r0, r3
 8001444:	370c      	adds	r7, #12
 8001446:	46bd      	mov	sp, r7
 8001448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144c:	4770      	bx	lr
 800144e:	bf00      	nop
 8001450:	08006898 	.word	0x08006898

08001454 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>:

/* Generic Publisher */
class Publisher
{
public:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
 8001454:	b480      	push	{r7}
 8001456:	b085      	sub	sp, #20
 8001458:	af00      	add	r7, sp, #0
 800145a:	60f8      	str	r0, [r7, #12]
 800145c:	60b9      	str	r1, [r7, #8]
 800145e:	607a      	str	r2, [r7, #4]
 8001460:	603b      	str	r3, [r7, #0]
    topic_(topic_name),
    msg_(msg),
    endpoint_(endpoint) {};
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	68ba      	ldr	r2, [r7, #8]
 8001466:	601a      	str	r2, [r3, #0]
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	687a      	ldr	r2, [r7, #4]
 800146c:	605a      	str	r2, [r3, #4]
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	683a      	ldr	r2, [r7, #0]
 8001472:	611a      	str	r2, [r3, #16]
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	4618      	mov	r0, r3
 8001478:	3714      	adds	r7, #20
 800147a:	46bd      	mov	sp, r7
 800147c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001480:	4770      	bx	lr

08001482 <_ZN3ros9Publisher7publishEPKNS_3MsgE>:

  int publish(const Msg * msg)
 8001482:	b580      	push	{r7, lr}
 8001484:	b082      	sub	sp, #8
 8001486:	af00      	add	r7, sp, #0
 8001488:	6078      	str	r0, [r7, #4]
 800148a:	6039      	str	r1, [r7, #0]
  {
    return nh_->publish(id_, msg);
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	68d8      	ldr	r0, [r3, #12]
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	68db      	ldr	r3, [r3, #12]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	687a      	ldr	r2, [r7, #4]
 800149a:	6891      	ldr	r1, [r2, #8]
 800149c:	683a      	ldr	r2, [r7, #0]
 800149e:	4798      	blx	r3
 80014a0:	4603      	mov	r3, r0
  };
 80014a2:	4618      	mov	r0, r3
 80014a4:	3708      	adds	r7, #8
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}

080014aa <_ZN3ros9Publisher15getEndpointTypeEv>:
  int getEndpointType()
 80014aa:	b480      	push	{r7}
 80014ac:	b083      	sub	sp, #12
 80014ae:	af00      	add	r7, sp, #0
 80014b0:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	691b      	ldr	r3, [r3, #16]
  }
 80014b6:	4618      	mov	r0, r3
 80014b8:	370c      	adds	r7, #12
 80014ba:	46bd      	mov	sp, r7
 80014bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c0:	4770      	bx	lr

080014c2 <_ZN13STM32Hardware10getRdmaIndEv>:
    UART_HandleTypeDef *huart;

    const static uint16_t rbuflen = 512;
    uint8_t rbuf[rbuflen];
    uint32_t rind;
    inline uint32_t getRdmaInd(void){ return (rbuflen - __HAL_DMA_GET_COUNTER(huart->hdmarx)) & (rbuflen - 1); }
 80014c2:	b480      	push	{r7}
 80014c4:	b083      	sub	sp, #12
 80014c6:	af00      	add	r7, sp, #0
 80014c8:	6078      	str	r0, [r7, #4]
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	425b      	negs	r3, r3
 80014d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80014da:	4618      	mov	r0, r3
 80014dc:	370c      	adds	r7, #12
 80014de:	46bd      	mov	sp, r7
 80014e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e4:	4770      	bx	lr
	...

080014e8 <_ZN13STM32HardwareC1Ev>:
    const static uint16_t tbuflen = 512;
    uint8_t tbuf[tbuflen];
    uint32_t twind, tfind;

  public:
    STM32Hardware():
 80014e8:	b480      	push	{r7}
 80014ea:	b083      	sub	sp, #12
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
      huart(&huart2), rind(0), twind(0), tfind(0){
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	4a0a      	ldr	r2, [pc, #40]	; (800151c <_ZN13STM32HardwareC1Ev+0x34>)
 80014f4:	601a      	str	r2, [r3, #0]
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	2200      	movs	r2, #0
 80014fa:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	2200      	movs	r2, #0
 8001502:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	2200      	movs	r2, #0
 800150a:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
    }
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	4618      	mov	r0, r3
 8001512:	370c      	adds	r7, #12
 8001514:	46bd      	mov	sp, r7
 8001516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151a:	4770      	bx	lr
 800151c:	20000b34 	.word	0x20000b34

08001520 <_ZN13STM32Hardware4initEv>:

    STM32Hardware(UART_HandleTypeDef *huart_):
      huart(huart_), rind(0), twind(0), tfind(0){
    }
  
    void init(){
 8001520:	b580      	push	{r7, lr}
 8001522:	b082      	sub	sp, #8
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
      reset_rbuf();
 8001528:	6878      	ldr	r0, [r7, #4]
 800152a:	f000 f804 	bl	8001536 <_ZN13STM32Hardware10reset_rbufEv>
    }
 800152e:	bf00      	nop
 8001530:	3708      	adds	r7, #8
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}

08001536 <_ZN13STM32Hardware10reset_rbufEv>:

    void reset_rbuf(void){
 8001536:	b580      	push	{r7, lr}
 8001538:	b082      	sub	sp, #8
 800153a:	af00      	add	r7, sp, #0
 800153c:	6078      	str	r0, [r7, #4]
      HAL_UART_Receive_DMA(huart, rbuf, rbuflen);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	6818      	ldr	r0, [r3, #0]
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	3304      	adds	r3, #4
 8001546:	f44f 7200 	mov.w	r2, #512	; 0x200
 800154a:	4619      	mov	r1, r3
 800154c:	f004 f9ae 	bl	80058ac <HAL_UART_Receive_DMA>
    }
 8001550:	bf00      	nop
 8001552:	3708      	adds	r7, #8
 8001554:	46bd      	mov	sp, r7
 8001556:	bd80      	pop	{r7, pc}

08001558 <_ZN13STM32Hardware4readEv>:

    int read(){
 8001558:	b590      	push	{r4, r7, lr}
 800155a:	b085      	sub	sp, #20
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
      int c = -1;
 8001560:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001564:	60fb      	str	r3, [r7, #12]
      if(rind != getRdmaInd()){
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	f8d3 4204 	ldr.w	r4, [r3, #516]	; 0x204
 800156c:	6878      	ldr	r0, [r7, #4]
 800156e:	f7ff ffa8 	bl	80014c2 <_ZN13STM32Hardware10getRdmaIndEv>
 8001572:	4603      	mov	r3, r0
 8001574:	429c      	cmp	r4, r3
 8001576:	bf14      	ite	ne
 8001578:	2301      	movne	r3, #1
 800157a:	2300      	moveq	r3, #0
 800157c:	b2db      	uxtb	r3, r3
 800157e:	2b00      	cmp	r3, #0
 8001580:	d012      	beq.n	80015a8 <_ZN13STM32Hardware4readEv+0x50>
        c = rbuf[rind++];
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001588:	1c59      	adds	r1, r3, #1
 800158a:	687a      	ldr	r2, [r7, #4]
 800158c:	f8c2 1204 	str.w	r1, [r2, #516]	; 0x204
 8001590:	687a      	ldr	r2, [r7, #4]
 8001592:	4413      	add	r3, r2
 8001594:	791b      	ldrb	r3, [r3, #4]
 8001596:	60fb      	str	r3, [r7, #12]
        rind &= rbuflen - 1;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800159e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
      }
      return c;
 80015a8:	68fb      	ldr	r3, [r7, #12]
    }
 80015aa:	4618      	mov	r0, r3
 80015ac:	3714      	adds	r7, #20
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd90      	pop	{r4, r7, pc}
	...

080015b4 <_ZN13STM32Hardware5flushEv>:

    void flush(void){
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b084      	sub	sp, #16
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
      static bool mutex = false;

      if((huart->gState == HAL_UART_STATE_READY) && !mutex){
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80015c2:	2b20      	cmp	r3, #32
 80015c4:	d108      	bne.n	80015d8 <_ZN13STM32Hardware5flushEv+0x24>
 80015c6:	4b28      	ldr	r3, [pc, #160]	; (8001668 <_ZN13STM32Hardware5flushEv+0xb4>)
 80015c8:	781b      	ldrb	r3, [r3, #0]
 80015ca:	f083 0301 	eor.w	r3, r3, #1
 80015ce:	b2db      	uxtb	r3, r3
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d001      	beq.n	80015d8 <_ZN13STM32Hardware5flushEv+0x24>
 80015d4:	2301      	movs	r3, #1
 80015d6:	e000      	b.n	80015da <_ZN13STM32Hardware5flushEv+0x26>
 80015d8:	2300      	movs	r3, #0
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d03f      	beq.n	800165e <_ZN13STM32Hardware5flushEv+0xaa>
        mutex = true;
 80015de:	4b22      	ldr	r3, [pc, #136]	; (8001668 <_ZN13STM32Hardware5flushEv+0xb4>)
 80015e0:	2201      	movs	r2, #1
 80015e2:	701a      	strb	r2, [r3, #0]

        if(twind != tfind){
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80015f0:	429a      	cmp	r2, r3
 80015f2:	d031      	beq.n	8001658 <_ZN13STM32Hardware5flushEv+0xa4>
          uint16_t len = tfind < twind ? twind - tfind : tbuflen - tfind;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8001600:	429a      	cmp	r2, r3
 8001602:	d20a      	bcs.n	800161a <_ZN13STM32Hardware5flushEv+0x66>
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 800160a:	b29a      	uxth	r2, r3
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8001612:	b29b      	uxth	r3, r3
 8001614:	1ad3      	subs	r3, r2, r3
 8001616:	b29b      	uxth	r3, r3
 8001618:	e006      	b.n	8001628 <_ZN13STM32Hardware5flushEv+0x74>
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8001620:	b29b      	uxth	r3, r3
 8001622:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8001626:	b29b      	uxth	r3, r3
 8001628:	81fb      	strh	r3, [r7, #14]
          HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6818      	ldr	r0, [r3, #0]
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8001634:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001638:	687a      	ldr	r2, [r7, #4]
 800163a:	4413      	add	r3, r2
 800163c:	89fa      	ldrh	r2, [r7, #14]
 800163e:	4619      	mov	r1, r3
 8001640:	f004 f8b8 	bl	80057b4 <HAL_UART_Transmit_DMA>
          tfind = (tfind + len) & (tbuflen - 1);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 800164a:	89fb      	ldrh	r3, [r7, #14]
 800164c:	4413      	add	r3, r2
 800164e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
        }
        mutex = false;
 8001658:	4b03      	ldr	r3, [pc, #12]	; (8001668 <_ZN13STM32Hardware5flushEv+0xb4>)
 800165a:	2200      	movs	r2, #0
 800165c:	701a      	strb	r2, [r3, #0]
      }
    }
 800165e:	bf00      	nop
 8001660:	3710      	adds	r7, #16
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	20000094 	.word	0x20000094

0800166c <_ZN13STM32Hardware5writeEPhi>:

    void write(uint8_t* data, int length){
 800166c:	b580      	push	{r7, lr}
 800166e:	b086      	sub	sp, #24
 8001670:	af00      	add	r7, sp, #0
 8001672:	60f8      	str	r0, [r7, #12]
 8001674:	60b9      	str	r1, [r7, #8]
 8001676:	607a      	str	r2, [r7, #4]
      int n = length;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	617b      	str	r3, [r7, #20]
      n = n <= tbuflen ? n : tbuflen;
 800167c:	697b      	ldr	r3, [r7, #20]
 800167e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001682:	bfa8      	it	ge
 8001684:	f44f 7300 	movge.w	r3, #512	; 0x200
 8001688:	617b      	str	r3, [r7, #20]

      int n_tail = n <= tbuflen - twind ? n : tbuflen - twind;
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8001690:	f5c3 7200 	rsb	r2, r3, #512	; 0x200
 8001694:	697b      	ldr	r3, [r7, #20]
 8001696:	4293      	cmp	r3, r2
 8001698:	bf28      	it	cs
 800169a:	4613      	movcs	r3, r2
 800169c:	613b      	str	r3, [r7, #16]
      memcpy(&(tbuf[twind]), data, n_tail);
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 80016a4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80016a8:	68fa      	ldr	r2, [r7, #12]
 80016aa:	4413      	add	r3, r2
 80016ac:	693a      	ldr	r2, [r7, #16]
 80016ae:	68b9      	ldr	r1, [r7, #8]
 80016b0:	4618      	mov	r0, r3
 80016b2:	f004 ff2b 	bl	800650c <memcpy>
      twind = (twind + n) & (tbuflen - 1);
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 80016bc:	697b      	ldr	r3, [r7, #20]
 80016be:	4413      	add	r3, r2
 80016c0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

      if(n != n_tail){
 80016ca:	697a      	ldr	r2, [r7, #20]
 80016cc:	693b      	ldr	r3, [r7, #16]
 80016ce:	429a      	cmp	r2, r3
 80016d0:	d00b      	beq.n	80016ea <_ZN13STM32Hardware5writeEPhi+0x7e>
        memcpy(tbuf, &(data[n_tail]), n - n_tail);
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	f503 7002 	add.w	r0, r3, #520	; 0x208
 80016d8:	693b      	ldr	r3, [r7, #16]
 80016da:	68ba      	ldr	r2, [r7, #8]
 80016dc:	18d1      	adds	r1, r2, r3
 80016de:	697a      	ldr	r2, [r7, #20]
 80016e0:	693b      	ldr	r3, [r7, #16]
 80016e2:	1ad3      	subs	r3, r2, r3
 80016e4:	461a      	mov	r2, r3
 80016e6:	f004 ff11 	bl	800650c <memcpy>
      }

      flush();
 80016ea:	68f8      	ldr	r0, [r7, #12]
 80016ec:	f7ff ff62 	bl	80015b4 <_ZN13STM32Hardware5flushEv>
    }
 80016f0:	bf00      	nop
 80016f2:	3718      	adds	r7, #24
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bd80      	pop	{r7, pc}

080016f8 <_ZN13STM32Hardware4timeEv>:

    unsigned long time(){ return HAL_GetTick();; }
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b082      	sub	sp, #8
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
 8001700:	f001 f9d6 	bl	8002ab0 <HAL_GetTick>
 8001704:	4603      	mov	r3, r0
 8001706:	4618      	mov	r0, r3
 8001708:	3708      	adds	r7, #8
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}
	...

08001710 <HAL_UART_TxCpltCallback>:
//ros::Subscriber<std_msgs::Int16> cmd_subscriber("command", &command_cb);
ros::Subscriber<std_msgs::Int32> position_subscriber("position", &read_position_cb);
std_msgs::Int32 error_msg;
ros::Publisher error_publisher("error", &error_msg);

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 8001710:	b580      	push	{r7, lr}
 8001712:	b082      	sub	sp, #8
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  nh.getHardware()->flush();
 8001718:	4805      	ldr	r0, [pc, #20]	; (8001730 <HAL_UART_TxCpltCallback+0x20>)
 800171a:	f000 f9eb 	bl	8001af4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 800171e:	4603      	mov	r3, r0
 8001720:	4618      	mov	r0, r3
 8001722:	f7ff ff47 	bl	80015b4 <_ZN13STM32Hardware5flushEv>
}
 8001726:	bf00      	nop
 8001728:	3708      	adds	r7, #8
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	20000098 	.word	0x20000098

08001734 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8001734:	b580      	push	{r7, lr}
 8001736:	b082      	sub	sp, #8
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  nh.getHardware()->reset_rbuf();
 800173c:	4805      	ldr	r0, [pc, #20]	; (8001754 <HAL_UART_RxCpltCallback+0x20>)
 800173e:	f000 f9d9 	bl	8001af4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 8001742:	4603      	mov	r3, r0
 8001744:	4618      	mov	r0, r3
 8001746:	f7ff fef6 	bl	8001536 <_ZN13STM32Hardware10reset_rbufEv>
}
 800174a:	bf00      	nop
 800174c:	3708      	adds	r7, #8
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	20000098 	.word	0x20000098

08001758 <read_position_cb>:

void read_position_cb(const std_msgs::Int32& desired_position_msg){
 8001758:	b480      	push	{r7}
 800175a:	b083      	sub	sp, #12
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
	desired_position = desired_position_msg.data;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	685b      	ldr	r3, [r3, #4]
 8001764:	4a03      	ldr	r2, [pc, #12]	; (8001774 <read_position_cb+0x1c>)
 8001766:	6013      	str	r3, [r2, #0]
}
 8001768:	bf00      	nop
 800176a:	370c      	adds	r7, #12
 800176c:	46bd      	mov	sp, r7
 800176e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001772:	4770      	bx	lr
 8001774:	200009dc 	.word	0x200009dc

08001778 <PID_position_control_cb>:
//	direction = cmd_msg.data >= 0;
//	pwm_cmd = abs(cmd_msg.data);
//	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);
//}

void PID_position_control_cb() {
 8001778:	b580      	push	{r7, lr}
 800177a:	b082      	sub	sp, #8
 800177c:	af00      	add	r7, sp, #0
	int32_t error_angle_diff = desired_position - TIM2->CNT - error_angle;
 800177e:	4b32      	ldr	r3, [pc, #200]	; (8001848 <PID_position_control_cb+0xd0>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	461a      	mov	r2, r3
 8001784:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800178a:	1ad3      	subs	r3, r2, r3
 800178c:	4a2f      	ldr	r2, [pc, #188]	; (800184c <PID_position_control_cb+0xd4>)
 800178e:	6812      	ldr	r2, [r2, #0]
 8001790:	1a9b      	subs	r3, r3, r2
 8001792:	607b      	str	r3, [r7, #4]
	error_angle = desired_position - TIM2->CNT;
 8001794:	4b2c      	ldr	r3, [pc, #176]	; (8001848 <PID_position_control_cb+0xd0>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	461a      	mov	r2, r3
 800179a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800179e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017a0:	1ad3      	subs	r3, r2, r3
 80017a2:	461a      	mov	r2, r3
 80017a4:	4b29      	ldr	r3, [pc, #164]	; (800184c <PID_position_control_cb+0xd4>)
 80017a6:	601a      	str	r2, [r3, #0]
	error_angle_sum += error_angle;
 80017a8:	4b29      	ldr	r3, [pc, #164]	; (8001850 <PID_position_control_cb+0xd8>)
 80017aa:	681a      	ldr	r2, [r3, #0]
 80017ac:	4b27      	ldr	r3, [pc, #156]	; (800184c <PID_position_control_cb+0xd4>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4413      	add	r3, r2
 80017b2:	4a27      	ldr	r2, [pc, #156]	; (8001850 <PID_position_control_cb+0xd8>)
 80017b4:	6013      	str	r3, [r2, #0]

	int32_t effort_voltage = Kp * error_angle + Ki * error_angle_sum * Kd * error_angle_diff;
 80017b6:	4b25      	ldr	r3, [pc, #148]	; (800184c <PID_position_control_cb+0xd4>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	ee07 3a90 	vmov	s15, r3
 80017be:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80017c2:	4b24      	ldr	r3, [pc, #144]	; (8001854 <PID_position_control_cb+0xdc>)
 80017c4:	edd3 7a00 	vldr	s15, [r3]
 80017c8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80017cc:	4b20      	ldr	r3, [pc, #128]	; (8001850 <PID_position_control_cb+0xd8>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	ee07 3a90 	vmov	s15, r3
 80017d4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80017d8:	4b1f      	ldr	r3, [pc, #124]	; (8001858 <PID_position_control_cb+0xe0>)
 80017da:	edd3 7a00 	vldr	s15, [r3]
 80017de:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80017e2:	4b1e      	ldr	r3, [pc, #120]	; (800185c <PID_position_control_cb+0xe4>)
 80017e4:	edd3 7a00 	vldr	s15, [r3]
 80017e8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	ee07 3a90 	vmov	s15, r3
 80017f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017f6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80017fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017fe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001802:	ee17 3a90 	vmov	r3, s15
 8001806:	603b      	str	r3, [r7, #0]
	GPIOA->ODR = effort_voltage >= 0 ? 0x20:0x10; //Control Direction
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	2b00      	cmp	r3, #0
 800180c:	db01      	blt.n	8001812 <PID_position_control_cb+0x9a>
 800180e:	2320      	movs	r3, #32
 8001810:	e000      	b.n	8001814 <PID_position_control_cb+0x9c>
 8001812:	2310      	movs	r3, #16
 8001814:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001818:	6153      	str	r3, [r2, #20]
	effort_voltage = abs(effort_voltage) > 3200 ? 3200:abs(effort_voltage); //Limit Pulse not beyond than 3200(ARR + 1)
 800181a:	6838      	ldr	r0, [r7, #0]
 800181c:	f7fe ff27 	bl	800066e <_ZSt3absl>
 8001820:	4603      	mov	r3, r0
 8001822:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
 8001826:	dc04      	bgt.n	8001832 <PID_position_control_cb+0xba>
 8001828:	6838      	ldr	r0, [r7, #0]
 800182a:	f7fe ff20 	bl	800066e <_ZSt3absl>
 800182e:	4603      	mov	r3, r0
 8001830:	e001      	b.n	8001836 <PID_position_control_cb+0xbe>
 8001832:	f44f 6348 	mov.w	r3, #3200	; 0xc80
 8001836:	603b      	str	r3, [r7, #0]
	TIM16->CCR1 = effort_voltage;
 8001838:	4a09      	ldr	r2, [pc, #36]	; (8001860 <PID_position_control_cb+0xe8>)
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	6353      	str	r3, [r2, #52]	; 0x34
}
 800183e:	bf00      	nop
 8001840:	3708      	adds	r7, #8
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}
 8001846:	bf00      	nop
 8001848:	200009dc 	.word	0x200009dc
 800184c:	200009d4 	.word	0x200009d4
 8001850:	200009d8 	.word	0x200009d8
 8001854:	20000000 	.word	0x20000000
 8001858:	200009e0 	.word	0x200009e0
 800185c:	200009e4 	.word	0x200009e4
 8001860:	40014400 	.word	0x40014400

08001864 <setup>:

void setup(void)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	af00      	add	r7, sp, #0
	nh.initNode();
 8001868:	480b      	ldr	r0, [pc, #44]	; (8001898 <setup+0x34>)
 800186a:	f000 f94f 	bl	8001b0c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>
	//nh.advertise(encoder_publisher);
	//nh.subscribe(cmd_subscriber);
	nh.advertise(error_publisher);
 800186e:	490b      	ldr	r1, [pc, #44]	; (800189c <setup+0x38>)
 8001870:	4809      	ldr	r0, [pc, #36]	; (8001898 <setup+0x34>)
 8001872:	f000 f968 	bl	8001b46 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
	nh.subscribe(position_subscriber);
 8001876:	490a      	ldr	r1, [pc, #40]	; (80018a0 <setup+0x3c>)
 8001878:	4807      	ldr	r0, [pc, #28]	; (8001898 <setup+0x34>)
 800187a:	f000 f994 	bl	8001ba6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs5Int32EvEEEEbRT_>

	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 800187e:	213c      	movs	r1, #60	; 0x3c
 8001880:	4808      	ldr	r0, [pc, #32]	; (80018a4 <setup+0x40>)
 8001882:	f003 f861 	bl	8004948 <HAL_TIM_Encoder_Start>
	HAL_TIM_PWM_Start(&htim16, TIM_CHANNEL_1);
 8001886:	2100      	movs	r1, #0
 8001888:	4807      	ldr	r0, [pc, #28]	; (80018a8 <setup+0x44>)
 800188a:	f002 ff79 	bl	8004780 <HAL_TIM_PWM_Start>
	HAL_TIM_Base_Start_IT(&htim6);
 800188e:	4807      	ldr	r0, [pc, #28]	; (80018ac <setup+0x48>)
 8001890:	f002 ff16 	bl	80046c0 <HAL_TIM_Base_Start_IT>
}
 8001894:	bf00      	nop
 8001896:	bd80      	pop	{r7, pc}
 8001898:	20000098 	.word	0x20000098
 800189c:	20000a0c 	.word	0x20000a0c
 80018a0:	200009e8 	.word	0x200009e8
 80018a4:	20000af4 	.word	0x20000af4
 80018a8:	20000bb4 	.word	0x20000bb4
 80018ac:	20000ab4 	.word	0x20000ab4

080018b0 <loop>:

void loop(void)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	af00      	add	r7, sp, #0
	GPIOA->ODR = direction ? 0x10:0x20;
	TIM16->CCR1 = pwm_cmd;
	encoder_msg.data = TIM2->CNT;
	encoder_publisher.publish(&encoder_msg);
	*/
	error_msg.data = error_angle;
 80018b4:	4b07      	ldr	r3, [pc, #28]	; (80018d4 <loop+0x24>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4a07      	ldr	r2, [pc, #28]	; (80018d8 <loop+0x28>)
 80018ba:	6053      	str	r3, [r2, #4]
	error_publisher.publish(&error_msg);
 80018bc:	4906      	ldr	r1, [pc, #24]	; (80018d8 <loop+0x28>)
 80018be:	4807      	ldr	r0, [pc, #28]	; (80018dc <loop+0x2c>)
 80018c0:	f7ff fddf 	bl	8001482 <_ZN3ros9Publisher7publishEPKNS_3MsgE>

	nh.spinOnce();
 80018c4:	4806      	ldr	r0, [pc, #24]	; (80018e0 <loop+0x30>)
 80018c6:	f000 f999 	bl	8001bfc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>
	HAL_Delay(100); //
 80018ca:	2064      	movs	r0, #100	; 0x64
 80018cc:	f001 f8fc 	bl	8002ac8 <HAL_Delay>
}
 80018d0:	bf00      	nop
 80018d2:	bd80      	pop	{r7, pc}
 80018d4:	200009d4 	.word	0x200009d4
 80018d8:	20000a04 	.word	0x20000a04
 80018dc:	20000a0c 	.word	0x20000a0c
 80018e0:	20000098 	.word	0x20000098

080018e4 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:
    return 8;
  }

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 80018e4:	b480      	push	{r7}
 80018e6:	b085      	sub	sp, #20
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
 80018ec:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 80018ee:	2300      	movs	r3, #0
 80018f0:	60fb      	str	r3, [r7, #12]
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	2b03      	cmp	r3, #3
 80018f6:	d80d      	bhi.n	8001914 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x30>
      arr[i] = (var >> (8 * i));
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	00db      	lsls	r3, r3, #3
 80018fc:	683a      	ldr	r2, [r7, #0]
 80018fe:	fa22 f103 	lsr.w	r1, r2, r3
 8001902:	687a      	ldr	r2, [r7, #4]
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	4413      	add	r3, r2
 8001908:	b2ca      	uxtb	r2, r1
 800190a:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	3301      	adds	r3, #1
 8001910:	60fb      	str	r3, [r7, #12]
 8001912:	e7ee      	b.n	80018f2 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0xe>
  }
 8001914:	bf00      	nop
 8001916:	3714      	adds	r7, #20
 8001918:	46bd      	mov	sp, r7
 800191a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191e:	4770      	bx	lr

08001920 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 8001920:	b480      	push	{r7}
 8001922:	b085      	sub	sp, #20
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
 8001928:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	2200      	movs	r2, #0
 800192e:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8001930:	2300      	movs	r3, #0
 8001932:	60fb      	str	r3, [r7, #12]
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	2b03      	cmp	r3, #3
 8001938:	d811      	bhi.n	800195e <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x3e>
      var |= (arr[i] << (8 * i));
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	6839      	ldr	r1, [r7, #0]
 8001940:	68fa      	ldr	r2, [r7, #12]
 8001942:	440a      	add	r2, r1
 8001944:	7812      	ldrb	r2, [r2, #0]
 8001946:	4611      	mov	r1, r2
 8001948:	68fa      	ldr	r2, [r7, #12]
 800194a:	00d2      	lsls	r2, r2, #3
 800194c:	fa01 f202 	lsl.w	r2, r1, r2
 8001950:	431a      	orrs	r2, r3
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	3301      	adds	r3, #1
 800195a:	60fb      	str	r3, [r7, #12]
 800195c:	e7ea      	b.n	8001934 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x14>
  }
 800195e:	bf00      	nop
 8001960:	3714      	adds	r7, #20
 8001962:	46bd      	mov	sp, r7
 8001964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001968:	4770      	bx	lr
	...

0800196c <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ros/msg.h"

namespace ros
{

class NodeHandleBase_
 800196c:	b480      	push	{r7}
 800196e:	b083      	sub	sp, #12
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
 8001974:	4a04      	ldr	r2, [pc, #16]	; (8001988 <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	601a      	str	r2, [r3, #0]
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	4618      	mov	r0, r3
 800197e:	370c      	adds	r7, #12
 8001980:	46bd      	mov	sp, r7
 8001982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001986:	4770      	bx	lr
 8001988:	08006974 	.word	0x08006974

0800198c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>:

  /*
   * Setup Functions
   */
public:
  NodeHandle_() : configured_(false)
 800198c:	b580      	push	{r7, lr}
 800198e:	b086      	sub	sp, #24
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	4618      	mov	r0, r3
 8001998:	f7ff ffe8 	bl	800196c <_ZN3ros15NodeHandleBase_C1Ev>
 800199c:	4a3a      	ldr	r2, [pc, #232]	; (8001a88 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xfc>)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	601a      	str	r2, [r3, #0]
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	3304      	adds	r3, #4
 80019a6:	4618      	mov	r0, r3
 80019a8:	f7ff fd9e 	bl	80014e8 <_ZN13STM32HardwareC1Ev>
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	2200      	movs	r2, #0
 80019b0:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	f603 1314 	addw	r3, r3, #2324	; 0x914
 80019ba:	4618      	mov	r0, r3
 80019bc:	f7ff fa88 	bl	8000ed0 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
  {

    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 80019c0:	2300      	movs	r3, #0
 80019c2:	617b      	str	r3, [r7, #20]
 80019c4:	697b      	ldr	r3, [r7, #20]
 80019c6:	2b18      	cmp	r3, #24
 80019c8:	d80b      	bhi.n	80019e2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x56>
      publishers[i] = 0;
 80019ca:	687a      	ldr	r2, [r7, #4]
 80019cc:	697b      	ldr	r3, [r7, #20]
 80019ce:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80019d2:	009b      	lsls	r3, r3, #2
 80019d4:	4413      	add	r3, r2
 80019d6:	2200      	movs	r2, #0
 80019d8:	605a      	str	r2, [r3, #4]
    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 80019da:	697b      	ldr	r3, [r7, #20]
 80019dc:	3301      	adds	r3, #1
 80019de:	617b      	str	r3, [r7, #20]
 80019e0:	e7f0      	b.n	80019c4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x38>

    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 80019e2:	2300      	movs	r3, #0
 80019e4:	613b      	str	r3, [r7, #16]
 80019e6:	693b      	ldr	r3, [r7, #16]
 80019e8:	2b18      	cmp	r3, #24
 80019ea:	d80a      	bhi.n	8001a02 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x76>
      subscribers[i] = 0;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	693a      	ldr	r2, [r7, #16]
 80019f0:	f202 2222 	addw	r2, r2, #546	; 0x222
 80019f4:	2100      	movs	r1, #0
 80019f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 80019fa:	693b      	ldr	r3, [r7, #16]
 80019fc:	3301      	adds	r3, #1
 80019fe:	613b      	str	r3, [r7, #16]
 8001a00:	e7f1      	b.n	80019e6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x5a>

    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 8001a02:	2300      	movs	r3, #0
 8001a04:	60fb      	str	r3, [r7, #12]
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001a0c:	d20a      	bcs.n	8001a24 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x98>
      message_in[i] = 0;
 8001a0e:	687a      	ldr	r2, [r7, #4]
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	4413      	add	r3, r2
 8001a14:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8001a18:	2200      	movs	r2, #0
 8001a1a:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	3301      	adds	r3, #1
 8001a20:	60fb      	str	r3, [r7, #12]
 8001a22:	e7f0      	b.n	8001a06 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x7a>

    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 8001a24:	2300      	movs	r3, #0
 8001a26:	60bb      	str	r3, [r7, #8]
 8001a28:	68bb      	ldr	r3, [r7, #8]
 8001a2a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001a2e:	d20a      	bcs.n	8001a46 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xba>
      message_out[i] = 0;
 8001a30:	687a      	ldr	r2, [r7, #4]
 8001a32:	68bb      	ldr	r3, [r7, #8]
 8001a34:	4413      	add	r3, r2
 8001a36:	f203 6324 	addw	r3, r3, #1572	; 0x624
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 8001a3e:	68bb      	ldr	r3, [r7, #8]
 8001a40:	3301      	adds	r3, #1
 8001a42:	60bb      	str	r3, [r7, #8]
 8001a44:	e7f0      	b.n	8001a28 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x9c>

    req_param_resp.ints_length = 0;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	2200      	movs	r2, #0
 8001a4a:	f8c3 2918 	str.w	r2, [r3, #2328]	; 0x918
    req_param_resp.ints = NULL;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	2200      	movs	r2, #0
 8001a52:	f8c3 2920 	str.w	r2, [r3, #2336]	; 0x920
    req_param_resp.floats_length = 0;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	2200      	movs	r2, #0
 8001a5a:	f8c3 2924 	str.w	r2, [r3, #2340]	; 0x924
    req_param_resp.floats = NULL;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	2200      	movs	r2, #0
 8001a62:	f8c3 292c 	str.w	r2, [r3, #2348]	; 0x92c
    req_param_resp.ints_length = 0;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	2200      	movs	r2, #0
 8001a6a:	f8c3 2918 	str.w	r2, [r3, #2328]	; 0x918
    req_param_resp.ints = NULL;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	2200      	movs	r2, #0
 8001a72:	f8c3 2920 	str.w	r2, [r3, #2336]	; 0x920

    spin_timeout_ = 0;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	2200      	movs	r2, #0
 8001a7a:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
  }
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	4618      	mov	r0, r3
 8001a82:	3718      	adds	r7, #24
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bd80      	pop	{r7, pc}
 8001a88:	08006948 	.word	0x08006948

08001a8c <_ZN3ros11Subscriber_C1Ev>:

namespace ros
{

/* Base class for objects subscribers. */
class Subscriber_
 8001a8c:	b480      	push	{r7}
 8001a8e:	b083      	sub	sp, #12
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
 8001a94:	4a04      	ldr	r2, [pc, #16]	; (8001aa8 <_ZN3ros11Subscriber_C1Ev+0x1c>)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	601a      	str	r2, [r3, #0]
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	370c      	adds	r7, #12
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa6:	4770      	bx	lr
 8001aa8:	0800695c 	.word	0x0800695c

08001aac <_ZN3ros10SubscriberIN8std_msgs5Int32EvEC1EPKcPFvRKS2_Ei>:
{
public:
  typedef void(*CallbackT)(const MsgT&);
  MsgT msg;

  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b084      	sub	sp, #16
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	60f8      	str	r0, [r7, #12]
 8001ab4:	60b9      	str	r1, [r7, #8]
 8001ab6:	607a      	str	r2, [r7, #4]
 8001ab8:	603b      	str	r3, [r7, #0]
    cb_(cb),
    endpoint_(endpoint)
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	4618      	mov	r0, r3
 8001abe:	f7ff ffe5 	bl	8001a8c <_ZN3ros11Subscriber_C1Ev>
 8001ac2:	4a0b      	ldr	r2, [pc, #44]	; (8001af0 <_ZN3ros10SubscriberIN8std_msgs5Int32EvEC1EPKcPFvRKS2_Ei+0x44>)
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	601a      	str	r2, [r3, #0]
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	330c      	adds	r3, #12
 8001acc:	4618      	mov	r0, r3
 8001ace:	f7fe fded 	bl	80006ac <_ZN8std_msgs5Int32C1Ev>
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	687a      	ldr	r2, [r7, #4]
 8001ad6:	615a      	str	r2, [r3, #20]
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	683a      	ldr	r2, [r7, #0]
 8001adc:	619a      	str	r2, [r3, #24]
  {
    topic_ = topic_name;
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	68ba      	ldr	r2, [r7, #8]
 8001ae2:	609a      	str	r2, [r3, #8]
  };
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	3710      	adds	r7, #16
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}
 8001aee:	bf00      	nop
 8001af0:	08006930 	.word	0x08006930

08001af4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>:

  Hardware* getHardware()
 8001af4:	b480      	push	{r7}
 8001af6:	b083      	sub	sp, #12
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  {
    return &hardware_;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	3304      	adds	r3, #4
  }
 8001b00:	4618      	mov	r0, r3
 8001b02:	370c      	adds	r7, #12
 8001b04:	46bd      	mov	sp, r7
 8001b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0a:	4770      	bx	lr

08001b0c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>:

  /* Start serial, initialize buffers */
  void initNode()
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b082      	sub	sp, #8
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
  {
    hardware_.init();
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	3304      	adds	r3, #4
 8001b18:	4618      	mov	r0, r3
 8001b1a:	f7ff fd01 	bl	8001520 <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	2200      	movs	r2, #0
 8001b22:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
    bytes_ = 0;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	2200      	movs	r2, #0
 8001b2a:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
    index_ = 0;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	2200      	movs	r2, #0
 8001b32:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
    topic_ = 0;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	2200      	movs	r2, #0
 8001b3a:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
  };
 8001b3e:	bf00      	nop
 8001b40:	3708      	adds	r7, #8
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}

08001b46 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>:
  /********************************************************************
   * Topic Management
   */

  /* Register a new publisher */
  bool advertise(Publisher & p)
 8001b46:	b480      	push	{r7}
 8001b48:	b085      	sub	sp, #20
 8001b4a:	af00      	add	r7, sp, #0
 8001b4c:	6078      	str	r0, [r7, #4]
 8001b4e:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8001b50:	2300      	movs	r3, #0
 8001b52:	60fb      	str	r3, [r7, #12]
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	2b18      	cmp	r3, #24
 8001b58:	dc1e      	bgt.n	8001b98 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x52>
    {
      if (publishers[i] == 0) // empty slot
 8001b5a:	687a      	ldr	r2, [r7, #4]
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001b62:	009b      	lsls	r3, r3, #2
 8001b64:	4413      	add	r3, r2
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d111      	bne.n	8001b90 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x4a>
      {
        publishers[i] = &p;
 8001b6c:	687a      	ldr	r2, [r7, #4]
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001b74:	009b      	lsls	r3, r3, #2
 8001b76:	4413      	add	r3, r2
 8001b78:	683a      	ldr	r2, [r7, #0]
 8001b7a:	605a      	str	r2, [r3, #4]
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	f103 027d 	add.w	r2, r3, #125	; 0x7d
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	609a      	str	r2, [r3, #8]
        p.nh_ = this;
 8001b86:	687a      	ldr	r2, [r7, #4]
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	60da      	str	r2, [r3, #12]
        return true;
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	e004      	b.n	8001b9a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x54>
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	3301      	adds	r3, #1
 8001b94:	60fb      	str	r3, [r7, #12]
 8001b96:	e7dd      	b.n	8001b54 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0xe>
      }
    }
    return false;
 8001b98:	2300      	movs	r3, #0
  }
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	3714      	adds	r7, #20
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba4:	4770      	bx	lr

08001ba6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs5Int32EvEEEEbRT_>:

  /* Register a new subscriber */
  template<typename SubscriberT>
  bool subscribe(SubscriberT& s)
 8001ba6:	b480      	push	{r7}
 8001ba8:	b085      	sub	sp, #20
 8001baa:	af00      	add	r7, sp, #0
 8001bac:	6078      	str	r0, [r7, #4]
 8001bae:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	60fb      	str	r3, [r7, #12]
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	2b18      	cmp	r3, #24
 8001bb8:	dc19      	bgt.n	8001bee <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs5Int32EvEEEEbRT_+0x48>
    {
      if (subscribers[i] == 0) // empty slot
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	68fa      	ldr	r2, [r7, #12]
 8001bbe:	f202 2222 	addw	r2, r2, #546	; 0x222
 8001bc2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d10d      	bne.n	8001be6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs5Int32EvEEEEbRT_+0x40>
      {
        subscribers[i] = static_cast<Subscriber_*>(&s);
 8001bca:	6839      	ldr	r1, [r7, #0]
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	68fa      	ldr	r2, [r7, #12]
 8001bd0:	f202 2222 	addw	r2, r2, #546	; 0x222
 8001bd4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        s.id_ = i + 100;
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	605a      	str	r2, [r3, #4]
        return true;
 8001be2:	2301      	movs	r3, #1
 8001be4:	e004      	b.n	8001bf0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs5Int32EvEEEEbRT_+0x4a>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	3301      	adds	r3, #1
 8001bea:	60fb      	str	r3, [r7, #12]
 8001bec:	e7e2      	b.n	8001bb4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs5Int32EvEEEEbRT_+0xe>
      }
    }
    return false;
 8001bee:	2300      	movs	r3, #0
  }
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	3714      	adds	r7, #20
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfa:	4770      	bx	lr

08001bfc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>:
  virtual int spinOnce()
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b084      	sub	sp, #16
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
    uint32_t c_time = hardware_.time();
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	3304      	adds	r3, #4
 8001c08:	4618      	mov	r0, r3
 8001c0a:	f7ff fd75 	bl	80016f8 <_ZN13STM32Hardware4timeEv>
 8001c0e:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	f8d3 3908 	ldr.w	r3, [r3, #2312]	; 0x908
 8001c16:	68fa      	ldr	r2, [r7, #12]
 8001c18:	1ad3      	subs	r3, r2, r3
 8001c1a:	f642 22f8 	movw	r2, #11000	; 0x2af8
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d903      	bls.n	8001c2a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2e>
      configured_ = false;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	2200      	movs	r2, #0
 8001c26:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
    if (mode_ != MODE_FIRST_FF)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d009      	beq.n	8001c48 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      if (c_time > last_msg_timeout_time)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	f8d3 390c 	ldr.w	r3, [r3, #2316]	; 0x90c
 8001c3a:	68fa      	ldr	r2, [r7, #12]
 8001c3c:	429a      	cmp	r2, r3
 8001c3e:	d903      	bls.n	8001c48 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2200      	movs	r2, #0
 8001c44:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
      if (spin_timeout_ > 0)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d014      	beq.n	8001c7c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
        if ((hardware_.time() - c_time) > spin_timeout_)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	3304      	adds	r3, #4
 8001c56:	4618      	mov	r0, r3
 8001c58:	f7ff fd4e 	bl	80016f8 <_ZN13STM32Hardware4timeEv>
 8001c5c:	4602      	mov	r2, r0
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	1ad2      	subs	r2, r2, r3
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 8001c68:	429a      	cmp	r2, r3
 8001c6a:	bf8c      	ite	hi
 8001c6c:	2301      	movhi	r3, #1
 8001c6e:	2300      	movls	r3, #0
 8001c70:	b2db      	uxtb	r3, r3
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d002      	beq.n	8001c7c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
          return SPIN_TIMEOUT;
 8001c76:	f06f 0301 	mvn.w	r3, #1
 8001c7a:	e197      	b.n	8001fac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3b0>
      int data = hardware_.read();
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	3304      	adds	r3, #4
 8001c80:	4618      	mov	r0, r3
 8001c82:	f7ff fc69 	bl	8001558 <_ZN13STM32Hardware4readEv>
 8001c86:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 8001c88:	68bb      	ldr	r3, [r7, #8]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	f2c0 8177 	blt.w	8001f7e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x382>
      checksum_ += data;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	f8d3 28fc 	ldr.w	r2, [r3, #2300]	; 0x8fc
 8001c96:	68bb      	ldr	r3, [r7, #8]
 8001c98:	441a      	add	r2, r3
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001ca6:	2b07      	cmp	r3, #7
 8001ca8:	d11e      	bne.n	8001ce8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xec>
        message_in[index_++] = data;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	; 0x8f8
 8001cb0:	1c59      	adds	r1, r3, #1
 8001cb2:	687a      	ldr	r2, [r7, #4]
 8001cb4:	f8c2 18f8 	str.w	r1, [r2, #2296]	; 0x8f8
 8001cb8:	68ba      	ldr	r2, [r7, #8]
 8001cba:	b2d1      	uxtb	r1, r2
 8001cbc:	687a      	ldr	r2, [r7, #4]
 8001cbe:	4413      	add	r3, r2
 8001cc0:	460a      	mov	r2, r1
 8001cc2:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
        bytes_--;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 8001ccc:	1e5a      	subs	r2, r3, #1
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d1b4      	bne.n	8001c48 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	2208      	movs	r2, #8
 8001ce2:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8001ce6:	e7af      	b.n	8001c48 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_FIRST_FF)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d128      	bne.n	8001d44 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x148>
        if (data == 0xff)
 8001cf2:	68bb      	ldr	r3, [r7, #8]
 8001cf4:	2bff      	cmp	r3, #255	; 0xff
 8001cf6:	d10d      	bne.n	8001d14 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x118>
          mode_++;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001cfe:	1c5a      	adds	r2, r3, #1
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	f103 0214 	add.w	r2, r3, #20
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	f8c3 290c 	str.w	r2, [r3, #2316]	; 0x90c
 8001d12:	e799      	b.n	8001c48 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	3304      	adds	r3, #4
 8001d18:	4618      	mov	r0, r3
 8001d1a:	f7ff fced 	bl	80016f8 <_ZN13STM32Hardware4timeEv>
 8001d1e:	4602      	mov	r2, r0
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	1ad3      	subs	r3, r2, r3
 8001d24:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d28:	4293      	cmp	r3, r2
 8001d2a:	bf8c      	ite	hi
 8001d2c:	2301      	movhi	r3, #1
 8001d2e:	2300      	movls	r3, #0
 8001d30:	b2db      	uxtb	r3, r3
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d088      	beq.n	8001c48 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          configured_ = false;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	2200      	movs	r2, #0
 8001d3a:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
          return SPIN_TIMEOUT;
 8001d3e:	f06f 0301 	mvn.w	r3, #1
 8001d42:	e133      	b.n	8001fac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3b0>
      else if (mode_ == MODE_PROTOCOL_VER)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001d4a:	2b01      	cmp	r3, #1
 8001d4c:	d11b      	bne.n	8001d86 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x18a>
        if (data == PROTOCOL_VER)
 8001d4e:	68bb      	ldr	r3, [r7, #8]
 8001d50:	2bfe      	cmp	r3, #254	; 0xfe
 8001d52:	d107      	bne.n	8001d64 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x168>
          mode_++;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001d5a:	1c5a      	adds	r2, r3, #1
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8001d62:	e771      	b.n	8001c48 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2200      	movs	r2, #0
 8001d68:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
          if (configured_ == false)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 8001d72:	f083 0301 	eor.w	r3, r3, #1
 8001d76:	b2db      	uxtb	r3, r3
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	f43f af65 	beq.w	8001c48 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            requestSyncTime();  /* send a msg back showing our protocol version */
 8001d7e:	6878      	ldr	r0, [r7, #4]
 8001d80:	f000 f918 	bl	8001fb4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
 8001d84:	e760      	b.n	8001c48 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001d8c:	2b02      	cmp	r3, #2
 8001d8e:	d113      	bne.n	8001db8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1bc>
        bytes_ = data;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	68ba      	ldr	r2, [r7, #8]
 8001d94:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        index_ = 0;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
        mode_++;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001da6:	1c5a      	adds	r2, r3, #1
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        checksum_ = data;               /* first byte for calculating size checksum */
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	68ba      	ldr	r2, [r7, #8]
 8001db2:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 8001db6:	e747      	b.n	8001c48 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001dbe:	2b03      	cmp	r3, #3
 8001dc0:	d110      	bne.n	8001de4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1e8>
        bytes_ += data << 8;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	f8d3 28f0 	ldr.w	r2, [r3, #2288]	; 0x8f0
 8001dc8:	68bb      	ldr	r3, [r7, #8]
 8001dca:	021b      	lsls	r3, r3, #8
 8001dcc:	441a      	add	r2, r3
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        mode_++;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001dda:	1c5a      	adds	r2, r3, #1
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8001de2:	e731      	b.n	8001c48 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001dea:	2b04      	cmp	r3, #4
 8001dec:	d116      	bne.n	8001e1c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x220>
        if ((checksum_ % 256) == 255)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 8001df4:	425a      	negs	r2, r3
 8001df6:	b2db      	uxtb	r3, r3
 8001df8:	b2d2      	uxtb	r2, r2
 8001dfa:	bf58      	it	pl
 8001dfc:	4253      	negpl	r3, r2
 8001dfe:	2bff      	cmp	r3, #255	; 0xff
 8001e00:	d107      	bne.n	8001e12 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x216>
          mode_++;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001e08:	1c5a      	adds	r2, r3, #1
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8001e10:	e71a      	b.n	8001c48 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	2200      	movs	r2, #0
 8001e16:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8001e1a:	e715      	b.n	8001c48 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001e22:	2b05      	cmp	r3, #5
 8001e24:	d10f      	bne.n	8001e46 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x24a>
        topic_ = data;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	68ba      	ldr	r2, [r7, #8]
 8001e2a:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
        mode_++;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001e34:	1c5a      	adds	r2, r3, #1
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        checksum_ = data;               /* first byte included in checksum */
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	68ba      	ldr	r2, [r7, #8]
 8001e40:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 8001e44:	e700      	b.n	8001c48 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001e4c:	2b06      	cmp	r3, #6
 8001e4e:	d117      	bne.n	8001e80 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x284>
        topic_ += data << 8;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	f8d3 28f4 	ldr.w	r2, [r3, #2292]	; 0x8f4
 8001e56:	68bb      	ldr	r3, [r7, #8]
 8001e58:	021b      	lsls	r3, r3, #8
 8001e5a:	441a      	add	r2, r3
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
        mode_ = MODE_MESSAGE;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2207      	movs	r2, #7
 8001e66:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        if (bytes_ == 0)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	f47f aee9 	bne.w	8001c48 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2208      	movs	r2, #8
 8001e7a:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8001e7e:	e6e3      	b.n	8001c48 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001e86:	2b08      	cmp	r3, #8
 8001e88:	f47f aede 	bne.w	8001c48 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2200      	movs	r2, #0
 8001e90:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        if ((checksum_ % 256) == 255)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 8001e9a:	425a      	negs	r2, r3
 8001e9c:	b2db      	uxtb	r3, r3
 8001e9e:	b2d2      	uxtb	r2, r2
 8001ea0:	bf58      	it	pl
 8001ea2:	4253      	negpl	r3, r2
 8001ea4:	2bff      	cmp	r3, #255	; 0xff
 8001ea6:	f47f aecf 	bne.w	8001c48 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d110      	bne.n	8001ed6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2da>
            requestSyncTime();
 8001eb4:	6878      	ldr	r0, [r7, #4]
 8001eb6:	f000 f87d 	bl	8001fb4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
            negotiateTopics();
 8001eba:	6878      	ldr	r0, [r7, #4]
 8001ebc:	f000 f898 	bl	8001ff0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>
            last_sync_time = c_time;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	68fa      	ldr	r2, [r7, #12]
 8001ec4:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
            last_sync_receive_time = c_time;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	68fa      	ldr	r2, [r7, #12]
 8001ecc:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
            return SPIN_ERR;
 8001ed0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001ed4:	e06a      	b.n	8001fac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3b0>
          else if (topic_ == TopicInfo::ID_TIME)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8001edc:	2b0a      	cmp	r3, #10
 8001ede:	d107      	bne.n	8001ef0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2f4>
            syncTime(message_in);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8001ee6:	4619      	mov	r1, r3
 8001ee8:	6878      	ldr	r0, [r7, #4]
 8001eea:	f000 f961 	bl	80021b0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>
 8001eee:	e6ab      	b.n	8001c48 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8001ef6:	2b06      	cmp	r3, #6
 8001ef8:	d10e      	bne.n	8001f18 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x31c>
            req_param_resp.deserialize(message_in);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	f603 1214 	addw	r2, r3, #2324	; 0x914
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8001f06:	4619      	mov	r1, r3
 8001f08:	4610      	mov	r0, r2
 8001f0a:	f7ff f916 	bl	800113a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_recieved = true;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2201      	movs	r2, #1
 8001f12:	f883 2910 	strb.w	r2, [r3, #2320]	; 0x910
 8001f16:	e697      	b.n	8001c48 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8001f1e:	2b0b      	cmp	r3, #11
 8001f20:	d104      	bne.n	8001f2c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x330>
            configured_ = false;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2200      	movs	r2, #0
 8001f26:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
 8001f2a:	e68d      	b.n	8001c48 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            if (subscribers[topic_ - 100])
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8001f32:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	f202 2222 	addw	r2, r2, #546	; 0x222
 8001f3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	f43f ae81 	beq.w	8001c48 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
              subscribers[topic_ - 100]->callback(message_in);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8001f4c:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	f202 2222 	addw	r2, r2, #546	; 0x222
 8001f56:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8001f60:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	f202 2222 	addw	r2, r2, #546	; 0x222
 8001f6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	687a      	ldr	r2, [r7, #4]
 8001f74:	f202 4224 	addw	r2, r2, #1060	; 0x424
 8001f78:	4611      	mov	r1, r2
 8001f7a:	4798      	blx	r3
    while (true)
 8001f7c:	e664      	b.n	8001c48 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        break;
 8001f7e:	bf00      	nop
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d00f      	beq.n	8001faa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3ae>
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	f8d3 3904 	ldr.w	r3, [r3, #2308]	; 0x904
 8001f90:	68fa      	ldr	r2, [r7, #12]
 8001f92:	1ad3      	subs	r3, r2, r3
 8001f94:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	d906      	bls.n	8001faa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3ae>
      requestSyncTime();
 8001f9c:	6878      	ldr	r0, [r7, #4]
 8001f9e:	f000 f809 	bl	8001fb4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
      last_sync_time = c_time;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	68fa      	ldr	r2, [r7, #12]
 8001fa6:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
    return SPIN_OK;
 8001faa:	2300      	movs	r3, #0
  }
 8001fac:	4618      	mov	r0, r3
 8001fae:	3710      	adds	r7, #16
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bd80      	pop	{r7, pc}

08001fb4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>:
  void requestSyncTime()
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b086      	sub	sp, #24
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 8001fbc:	f107 030c 	add.w	r3, r7, #12
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	f7fe fc21 	bl	8000808 <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f107 020c 	add.w	r2, r7, #12
 8001fd0:	210a      	movs	r1, #10
 8001fd2:	6878      	ldr	r0, [r7, #4]
 8001fd4:	4798      	blx	r3
    rt_time = hardware_.time();
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	3304      	adds	r3, #4
 8001fda:	4618      	mov	r0, r3
 8001fdc:	f7ff fb8c 	bl	80016f8 <_ZN13STM32Hardware4timeEv>
 8001fe0:	4602      	mov	r2, r0
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
  }
 8001fe8:	bf00      	nop
 8001fea:	3718      	adds	r7, #24
 8001fec:	46bd      	mov	sp, r7
 8001fee:	bd80      	pop	{r7, pc}

08001ff0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>:
      }
    }
    return false;
  }

  void negotiateTopics()
 8001ff0:	b590      	push	{r4, r7, lr}
 8001ff2:	b08b      	sub	sp, #44	; 0x2c
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  {
    rosserial_msgs::TopicInfo ti;
 8001ff8:	f107 030c 	add.w	r3, r7, #12
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	f7fe fcf3 	bl	80009e8 <_ZN14rosserial_msgs9TopicInfoC1Ev>
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8002002:	2300      	movs	r3, #0
 8002004:	627b      	str	r3, [r7, #36]	; 0x24
 8002006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002008:	2b18      	cmp	r3, #24
 800200a:	dc63      	bgt.n	80020d4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xe4>
    {
      if (publishers[i] != 0) // non-empty slot
 800200c:	687a      	ldr	r2, [r7, #4]
 800200e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002010:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002014:	009b      	lsls	r3, r3, #2
 8002016:	4413      	add	r3, r2
 8002018:	685b      	ldr	r3, [r3, #4]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d056      	beq.n	80020cc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xdc>
      {
        ti.topic_id = publishers[i]->id_;
 800201e:	687a      	ldr	r2, [r7, #4]
 8002020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002022:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002026:	009b      	lsls	r3, r3, #2
 8002028:	4413      	add	r3, r2
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	689b      	ldr	r3, [r3, #8]
 800202e:	b29b      	uxth	r3, r3
 8002030:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 8002032:	687a      	ldr	r2, [r7, #4]
 8002034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002036:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800203a:	009b      	lsls	r3, r3, #2
 800203c:	4413      	add	r3, r2
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 8002044:	687a      	ldr	r2, [r7, #4]
 8002046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002048:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800204c:	009b      	lsls	r3, r3, #2
 800204e:	4413      	add	r3, r2
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	6859      	ldr	r1, [r3, #4]
 8002054:	687a      	ldr	r2, [r7, #4]
 8002056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002058:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800205c:	009b      	lsls	r3, r3, #2
 800205e:	4413      	add	r3, r2
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	3308      	adds	r3, #8
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	4608      	mov	r0, r1
 800206c:	4798      	blx	r3
 800206e:	4603      	mov	r3, r0
 8002070:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 8002072:	687a      	ldr	r2, [r7, #4]
 8002074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002076:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800207a:	009b      	lsls	r3, r3, #2
 800207c:	4413      	add	r3, r2
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	6859      	ldr	r1, [r3, #4]
 8002082:	687a      	ldr	r2, [r7, #4]
 8002084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002086:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800208a:	009b      	lsls	r3, r3, #2
 800208c:	4413      	add	r3, r2
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	330c      	adds	r3, #12
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4608      	mov	r0, r1
 800209a:	4798      	blx	r3
 800209c:	4603      	mov	r3, r0
 800209e:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 80020a0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80020a4:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	681c      	ldr	r4, [r3, #0]
 80020ac:	687a      	ldr	r2, [r7, #4]
 80020ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80020b4:	009b      	lsls	r3, r3, #2
 80020b6:	4413      	add	r3, r2
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	4618      	mov	r0, r3
 80020bc:	f7ff f9f5 	bl	80014aa <_ZN3ros9Publisher15getEndpointTypeEv>
 80020c0:	4601      	mov	r1, r0
 80020c2:	f107 030c 	add.w	r3, r7, #12
 80020c6:	461a      	mov	r2, r3
 80020c8:	6878      	ldr	r0, [r7, #4]
 80020ca:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 80020cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ce:	3301      	adds	r3, #1
 80020d0:	627b      	str	r3, [r7, #36]	; 0x24
 80020d2:	e798      	b.n	8002006 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x16>
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 80020d4:	2300      	movs	r3, #0
 80020d6:	627b      	str	r3, [r7, #36]	; 0x24
 80020d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020da:	2b18      	cmp	r3, #24
 80020dc:	dc5f      	bgt.n	800219e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1ae>
    {
      if (subscribers[i] != 0) // non-empty slot
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020e2:	f202 2222 	addw	r2, r2, #546	; 0x222
 80020e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d053      	beq.n	8002196 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1a6>
      {
        ti.topic_id = subscribers[i]->id_;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020f2:	f202 2222 	addw	r2, r2, #546	; 0x222
 80020f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	b29b      	uxth	r3, r3
 80020fe:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002104:	f202 2222 	addw	r2, r2, #546	; 0x222
 8002108:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800210c:	689b      	ldr	r3, [r3, #8]
 800210e:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002114:	f202 2222 	addw	r2, r2, #546	; 0x222
 8002118:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002120:	f202 2222 	addw	r2, r2, #546	; 0x222
 8002124:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	3308      	adds	r3, #8
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4608      	mov	r0, r1
 8002130:	4798      	blx	r3
 8002132:	4603      	mov	r3, r0
 8002134:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800213a:	f202 2222 	addw	r2, r2, #546	; 0x222
 800213e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002146:	f202 2222 	addw	r2, r2, #546	; 0x222
 800214a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	330c      	adds	r3, #12
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4608      	mov	r0, r1
 8002156:	4798      	blx	r3
 8002158:	4603      	mov	r3, r0
 800215a:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 800215c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002160:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	681c      	ldr	r4, [r3, #0]
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800216c:	f202 2222 	addw	r2, r2, #546	; 0x222
 8002170:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002178:	f202 2222 	addw	r2, r2, #546	; 0x222
 800217c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	3304      	adds	r3, #4
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4608      	mov	r0, r1
 8002188:	4798      	blx	r3
 800218a:	4601      	mov	r1, r0
 800218c:	f107 030c 	add.w	r3, r7, #12
 8002190:	461a      	mov	r2, r3
 8002192:	6878      	ldr	r0, [r7, #4]
 8002194:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8002196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002198:	3301      	adds	r3, #1
 800219a:	627b      	str	r3, [r7, #36]	; 0x24
 800219c:	e79c      	b.n	80020d8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xe8>
      }
    }
    configured_ = true;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	2201      	movs	r2, #1
 80021a2:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
  }
 80021a6:	bf00      	nop
 80021a8:	372c      	adds	r7, #44	; 0x2c
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd90      	pop	{r4, r7, pc}
	...

080021b0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b086      	sub	sp, #24
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
 80021b8:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 80021ba:	f107 0308 	add.w	r3, r7, #8
 80021be:	4618      	mov	r0, r3
 80021c0:	f7fe fb22 	bl	8000808 <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	3304      	adds	r3, #4
 80021c8:	4618      	mov	r0, r3
 80021ca:	f7ff fa95 	bl	80016f8 <_ZN13STM32Hardware4timeEv>
 80021ce:	4602      	mov	r2, r0
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 80021d6:	1ad3      	subs	r3, r2, r3
 80021d8:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 80021da:	f107 0308 	add.w	r3, r7, #8
 80021de:	6839      	ldr	r1, [r7, #0]
 80021e0:	4618      	mov	r0, r3
 80021e2:	f7fe fb81 	bl	80008e8 <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 80021e6:	68fa      	ldr	r2, [r7, #12]
 80021e8:	697b      	ldr	r3, [r7, #20]
 80021ea:	4915      	ldr	r1, [pc, #84]	; (8002240 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 80021ec:	fba1 1303 	umull	r1, r3, r1, r3
 80021f0:	099b      	lsrs	r3, r3, #6
 80021f2:	4413      	add	r3, r2
 80021f4:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 80021f6:	6939      	ldr	r1, [r7, #16]
 80021f8:	697a      	ldr	r2, [r7, #20]
 80021fa:	4b11      	ldr	r3, [pc, #68]	; (8002240 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 80021fc:	fba3 0302 	umull	r0, r3, r3, r2
 8002200:	099b      	lsrs	r3, r3, #6
 8002202:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002206:	fb00 f303 	mul.w	r3, r0, r3
 800220a:	1ad3      	subs	r3, r2, r3
 800220c:	4a0d      	ldr	r2, [pc, #52]	; (8002244 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x94>)
 800220e:	fb02 f303 	mul.w	r3, r2, r3
 8002212:	440b      	add	r3, r1
 8002214:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 8002216:	f107 0308 	add.w	r3, r7, #8
 800221a:	3304      	adds	r3, #4
 800221c:	4619      	mov	r1, r3
 800221e:	6878      	ldr	r0, [r7, #4]
 8002220:	f000 f8a4 	bl	800236c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	3304      	adds	r3, #4
 8002228:	4618      	mov	r0, r3
 800222a:	f7ff fa65 	bl	80016f8 <_ZN13STM32Hardware4timeEv>
 800222e:	4602      	mov	r2, r0
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
  }
 8002236:	bf00      	nop
 8002238:	3718      	adds	r7, #24
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}
 800223e:	bf00      	nop
 8002240:	10624dd3 	.word	0x10624dd3
 8002244:	000f4240 	.word	0x000f4240

08002248 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE>:

  virtual int publish(int id, const Msg * msg)
 8002248:	b580      	push	{r7, lr}
 800224a:	b088      	sub	sp, #32
 800224c:	af00      	add	r7, sp, #0
 800224e:	60f8      	str	r0, [r7, #12]
 8002250:	60b9      	str	r1, [r7, #8]
 8002252:	607a      	str	r2, [r7, #4]
  {
    if (id >= 100 && !configured_)
 8002254:	68bb      	ldr	r3, [r7, #8]
 8002256:	2b63      	cmp	r3, #99	; 0x63
 8002258:	dd09      	ble.n	800226e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 8002260:	f083 0301 	eor.w	r3, r3, #1
 8002264:	b2db      	uxtb	r3, r3
 8002266:	2b00      	cmp	r3, #0
 8002268:	d001      	beq.n	800226e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
      return 0;
 800226a:	2300      	movs	r3, #0
 800226c:	e077      	b.n	800235e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x116>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	68fa      	ldr	r2, [r7, #12]
 8002276:	f202 6224 	addw	r2, r2, #1572	; 0x624
 800227a:	3207      	adds	r2, #7
 800227c:	4611      	mov	r1, r2
 800227e:	6878      	ldr	r0, [r7, #4]
 8002280:	4798      	blx	r3
 8002282:	6178      	str	r0, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	22ff      	movs	r2, #255	; 0xff
 8002288:	f883 2624 	strb.w	r2, [r3, #1572]	; 0x624
    message_out[1] = PROTOCOL_VER;
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	22fe      	movs	r2, #254	; 0xfe
 8002290:	f883 2625 	strb.w	r2, [r3, #1573]	; 0x625
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 8002294:	697b      	ldr	r3, [r7, #20]
 8002296:	b2da      	uxtb	r2, r3
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	f883 2626 	strb.w	r2, [r3, #1574]	; 0x626
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 800229e:	697b      	ldr	r3, [r7, #20]
 80022a0:	b29b      	uxth	r3, r3
 80022a2:	121b      	asrs	r3, r3, #8
 80022a4:	b2da      	uxtb	r2, r3
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	f883 2627 	strb.w	r2, [r3, #1575]	; 0x627
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	f893 2626 	ldrb.w	r2, [r3, #1574]	; 0x626
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	f893 3627 	ldrb.w	r3, [r3, #1575]	; 0x627
 80022b8:	4413      	add	r3, r2
 80022ba:	b2db      	uxtb	r3, r3
 80022bc:	43db      	mvns	r3, r3
 80022be:	b2da      	uxtb	r2, r3
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	f883 2628 	strb.w	r2, [r3, #1576]	; 0x628
    message_out[5] = (uint8_t)((int16_t)id & 255);
 80022c6:	68bb      	ldr	r3, [r7, #8]
 80022c8:	b2da      	uxtb	r2, r3
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	f883 2629 	strb.w	r2, [r3, #1577]	; 0x629
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 80022d0:	68bb      	ldr	r3, [r7, #8]
 80022d2:	b21b      	sxth	r3, r3
 80022d4:	121b      	asrs	r3, r3, #8
 80022d6:	b2da      	uxtb	r2, r3
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	f883 262a 	strb.w	r2, [r3, #1578]	; 0x62a

    /* calculate checksum */
    int chk = 0;
 80022de:	2300      	movs	r3, #0
 80022e0:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 80022e2:	2305      	movs	r3, #5
 80022e4:	61bb      	str	r3, [r7, #24]
 80022e6:	697b      	ldr	r3, [r7, #20]
 80022e8:	3307      	adds	r3, #7
 80022ea:	69ba      	ldr	r2, [r7, #24]
 80022ec:	429a      	cmp	r2, r3
 80022ee:	da0d      	bge.n	800230c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xc4>
      chk += message_out[i];
 80022f0:	68fa      	ldr	r2, [r7, #12]
 80022f2:	69bb      	ldr	r3, [r7, #24]
 80022f4:	4413      	add	r3, r2
 80022f6:	f203 6324 	addw	r3, r3, #1572	; 0x624
 80022fa:	781b      	ldrb	r3, [r3, #0]
 80022fc:	461a      	mov	r2, r3
 80022fe:	69fb      	ldr	r3, [r7, #28]
 8002300:	4413      	add	r3, r2
 8002302:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8002304:	69bb      	ldr	r3, [r7, #24]
 8002306:	3301      	adds	r3, #1
 8002308:	61bb      	str	r3, [r7, #24]
 800230a:	e7ec      	b.n	80022e6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x9e>
    l += 7;
 800230c:	697b      	ldr	r3, [r7, #20]
 800230e:	3307      	adds	r3, #7
 8002310:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 8002312:	69fb      	ldr	r3, [r7, #28]
 8002314:	425a      	negs	r2, r3
 8002316:	b2db      	uxtb	r3, r3
 8002318:	b2d2      	uxtb	r2, r2
 800231a:	bf58      	it	pl
 800231c:	4253      	negpl	r3, r2
 800231e:	b2da      	uxtb	r2, r3
 8002320:	697b      	ldr	r3, [r7, #20]
 8002322:	1c59      	adds	r1, r3, #1
 8002324:	6179      	str	r1, [r7, #20]
 8002326:	43d2      	mvns	r2, r2
 8002328:	b2d1      	uxtb	r1, r2
 800232a:	68fa      	ldr	r2, [r7, #12]
 800232c:	4413      	add	r3, r2
 800232e:	460a      	mov	r2, r1
 8002330:	f883 2624 	strb.w	r2, [r3, #1572]	; 0x624

    if (l <= OUTPUT_SIZE)
 8002334:	697b      	ldr	r3, [r7, #20]
 8002336:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800233a:	dc0a      	bgt.n	8002352 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x10a>
    {
      hardware_.write(message_out, l);
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	1d18      	adds	r0, r3, #4
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	f203 6324 	addw	r3, r3, #1572	; 0x624
 8002346:	697a      	ldr	r2, [r7, #20]
 8002348:	4619      	mov	r1, r3
 800234a:	f7ff f98f 	bl	800166c <_ZN13STM32Hardware5writeEPhi>
      return l;
 800234e:	697b      	ldr	r3, [r7, #20]
 8002350:	e005      	b.n	800235e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x116>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 8002352:	4905      	ldr	r1, [pc, #20]	; (8002368 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x120>)
 8002354:	68f8      	ldr	r0, [r7, #12]
 8002356:	f000 f849 	bl	80023ec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>
      return -1;
 800235a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    }
  }
 800235e:	4618      	mov	r0, r3
 8002360:	3720      	adds	r7, #32
 8002362:	46bd      	mov	sp, r7
 8002364:	bd80      	pop	{r7, pc}
 8002366:	bf00      	nop
 8002368:	080068bc 	.word	0x080068bc

0800236c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE>:
  void setNow(Time & new_now)
 800236c:	b580      	push	{r7, lr}
 800236e:	b084      	sub	sp, #16
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
 8002374:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	3304      	adds	r3, #4
 800237a:	4618      	mov	r0, r3
 800237c:	f7ff f9bc 	bl	80016f8 <_ZN13STM32Hardware4timeEv>
 8002380:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	681a      	ldr	r2, [r3, #0]
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	4915      	ldr	r1, [pc, #84]	; (80023e0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x74>)
 800238a:	fba1 1303 	umull	r1, r3, r1, r3
 800238e:	099b      	lsrs	r3, r3, #6
 8002390:	1ad3      	subs	r3, r2, r3
 8002392:	1e5a      	subs	r2, r3, #1
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	6859      	ldr	r1, [r3, #4]
 800239e:	68fa      	ldr	r2, [r7, #12]
 80023a0:	4b0f      	ldr	r3, [pc, #60]	; (80023e0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x74>)
 80023a2:	fba3 0302 	umull	r0, r3, r3, r2
 80023a6:	099b      	lsrs	r3, r3, #6
 80023a8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80023ac:	fb00 f303 	mul.w	r3, r0, r3
 80023b0:	1ad3      	subs	r3, r2, r3
 80023b2:	4a0c      	ldr	r2, [pc, #48]	; (80023e4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x78>)
 80023b4:	fb02 f303 	mul.w	r3, r2, r3
 80023b8:	1aca      	subs	r2, r1, r3
 80023ba:	4b0b      	ldr	r3, [pc, #44]	; (80023e8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x7c>)
 80023bc:	4413      	add	r3, r2
 80023be:	687a      	ldr	r2, [r7, #4]
 80023c0:	f8c2 341c 	str.w	r3, [r2, #1052]	; 0x41c
    normalizeSecNSec(sec_offset, nsec_offset);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	f503 6283 	add.w	r2, r3, #1048	; 0x418
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 80023d0:	4619      	mov	r1, r3
 80023d2:	4610      	mov	r0, r2
 80023d4:	f7fd ff00 	bl	80001d8 <_ZN3ros16normalizeSecNSecERmS0_>
  }
 80023d8:	bf00      	nop
 80023da:	3710      	adds	r7, #16
 80023dc:	46bd      	mov	sp, r7
 80023de:	bd80      	pop	{r7, pc}
 80023e0:	10624dd3 	.word	0x10624dd3
 80023e4:	000f4240 	.word	0x000f4240
 80023e8:	3b9aca00 	.word	0x3b9aca00

080023ec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b082      	sub	sp, #8
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
 80023f4:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 80023f6:	683a      	ldr	r2, [r7, #0]
 80023f8:	2103      	movs	r1, #3
 80023fa:	6878      	ldr	r0, [r7, #4]
 80023fc:	f000 f804 	bl	8002408 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>
  }
 8002400:	bf00      	nop
 8002402:	3708      	adds	r7, #8
 8002404:	46bd      	mov	sp, r7
 8002406:	bd80      	pop	{r7, pc}

08002408 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>:
  void log(char byte, const char * msg)
 8002408:	b580      	push	{r7, lr}
 800240a:	b088      	sub	sp, #32
 800240c:	af00      	add	r7, sp, #0
 800240e:	60f8      	str	r0, [r7, #12]
 8002410:	460b      	mov	r3, r1
 8002412:	607a      	str	r2, [r7, #4]
 8002414:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 8002416:	f107 0314 	add.w	r3, r7, #20
 800241a:	4618      	mov	r0, r3
 800241c:	f7fe fca8 	bl	8000d70 <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 8002420:	7afb      	ldrb	r3, [r7, #11]
 8002422:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f107 0214 	add.w	r2, r7, #20
 8002432:	2107      	movs	r1, #7
 8002434:	68f8      	ldr	r0, [r7, #12]
 8002436:	4798      	blx	r3
  }
 8002438:	bf00      	nop
 800243a:	3720      	adds	r7, #32
 800243c:	46bd      	mov	sp, r7
 800243e:	bd80      	pop	{r7, pc}

08002440 <_Z41__static_initialization_and_destruction_0ii>:
 8002440:	b580      	push	{r7, lr}
 8002442:	b082      	sub	sp, #8
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
 8002448:	6039      	str	r1, [r7, #0]
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2b01      	cmp	r3, #1
 800244e:	d116      	bne.n	800247e <_Z41__static_initialization_and_destruction_0ii+0x3e>
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002456:	4293      	cmp	r3, r2
 8002458:	d111      	bne.n	800247e <_Z41__static_initialization_and_destruction_0ii+0x3e>
ros::NodeHandle nh;
 800245a:	480b      	ldr	r0, [pc, #44]	; (8002488 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 800245c:	f7ff fa96 	bl	800198c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>
ros::Subscriber<std_msgs::Int32> position_subscriber("position", &read_position_cb);
 8002460:	2301      	movs	r3, #1
 8002462:	4a0a      	ldr	r2, [pc, #40]	; (800248c <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8002464:	490a      	ldr	r1, [pc, #40]	; (8002490 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8002466:	480b      	ldr	r0, [pc, #44]	; (8002494 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 8002468:	f7ff fb20 	bl	8001aac <_ZN3ros10SubscriberIN8std_msgs5Int32EvEC1EPKcPFvRKS2_Ei>
std_msgs::Int32 error_msg;
 800246c:	480a      	ldr	r0, [pc, #40]	; (8002498 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 800246e:	f7fe f91d 	bl	80006ac <_ZN8std_msgs5Int32C1Ev>
ros::Publisher error_publisher("error", &error_msg);
 8002472:	2300      	movs	r3, #0
 8002474:	4a08      	ldr	r2, [pc, #32]	; (8002498 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 8002476:	4909      	ldr	r1, [pc, #36]	; (800249c <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8002478:	4809      	ldr	r0, [pc, #36]	; (80024a0 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 800247a:	f7fe ffeb 	bl	8001454 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
}
 800247e:	bf00      	nop
 8002480:	3708      	adds	r7, #8
 8002482:	46bd      	mov	sp, r7
 8002484:	bd80      	pop	{r7, pc}
 8002486:	bf00      	nop
 8002488:	20000098 	.word	0x20000098
 800248c:	08001759 	.word	0x08001759
 8002490:	080068f8 	.word	0x080068f8
 8002494:	200009e8 	.word	0x200009e8
 8002498:	20000a04 	.word	0x20000a04
 800249c:	08006904 	.word	0x08006904
 80024a0:	20000a0c 	.word	0x20000a0c

080024a4 <_ZN3ros10SubscriberIN8std_msgs5Int32EvE8callbackEPh>:

  virtual void callback(unsigned char* data)
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b082      	sub	sp, #8
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
 80024ac:	6039      	str	r1, [r7, #0]
  {
    msg.deserialize(data);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	330c      	adds	r3, #12
 80024b2:	6839      	ldr	r1, [r7, #0]
 80024b4:	4618      	mov	r0, r3
 80024b6:	f7fe f941 	bl	800073c <_ZN8std_msgs5Int3211deserializeEPh>
    this->cb_(msg);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	695b      	ldr	r3, [r3, #20]
 80024be:	687a      	ldr	r2, [r7, #4]
 80024c0:	320c      	adds	r2, #12
 80024c2:	4610      	mov	r0, r2
 80024c4:	4798      	blx	r3
  }
 80024c6:	bf00      	nop
 80024c8:	3708      	adds	r7, #8
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd80      	pop	{r7, pc}

080024ce <_ZN3ros10SubscriberIN8std_msgs5Int32EvE15getEndpointTypeEv>:
  }
  virtual const char * getMsgMD5()
  {
    return this->msg.getMD5();
  }
  virtual int getEndpointType()
 80024ce:	b480      	push	{r7}
 80024d0:	b083      	sub	sp, #12
 80024d2:	af00      	add	r7, sp, #0
 80024d4:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	699b      	ldr	r3, [r3, #24]
  }
 80024da:	4618      	mov	r0, r3
 80024dc:	370c      	adds	r7, #12
 80024de:	46bd      	mov	sp, r7
 80024e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e4:	4770      	bx	lr

080024e6 <_ZN3ros10SubscriberIN8std_msgs5Int32EvE10getMsgTypeEv>:
  virtual const char * getMsgType()
 80024e6:	b580      	push	{r7, lr}
 80024e8:	b082      	sub	sp, #8
 80024ea:	af00      	add	r7, sp, #0
 80024ec:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	330c      	adds	r3, #12
 80024f2:	4618      	mov	r0, r3
 80024f4:	f7fe f95a 	bl	80007ac <_ZN8std_msgs5Int327getTypeEv>
 80024f8:	4603      	mov	r3, r0
  }
 80024fa:	4618      	mov	r0, r3
 80024fc:	3708      	adds	r7, #8
 80024fe:	46bd      	mov	sp, r7
 8002500:	bd80      	pop	{r7, pc}

08002502 <_ZN3ros10SubscriberIN8std_msgs5Int32EvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5()
 8002502:	b580      	push	{r7, lr}
 8002504:	b082      	sub	sp, #8
 8002506:	af00      	add	r7, sp, #0
 8002508:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	330c      	adds	r3, #12
 800250e:	4618      	mov	r0, r3
 8002510:	f7fe f95a 	bl	80007c8 <_ZN8std_msgs5Int326getMD5Ev>
 8002514:	4603      	mov	r3, r0
  }
 8002516:	4618      	mov	r0, r3
 8002518:	3708      	adds	r7, #8
 800251a:	46bd      	mov	sp, r7
 800251c:	bd80      	pop	{r7, pc}

0800251e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>:
  virtual bool connected()
 800251e:	b480      	push	{r7}
 8002520:	b083      	sub	sp, #12
 8002522:	af00      	add	r7, sp, #0
 8002524:	6078      	str	r0, [r7, #4]
    return configured_;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
  };
 800252c:	4618      	mov	r0, r3
 800252e:	370c      	adds	r7, #12
 8002530:	46bd      	mov	sp, r7
 8002532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002536:	4770      	bx	lr

08002538 <_GLOBAL__sub_I_nh>:
 8002538:	b580      	push	{r7, lr}
 800253a:	af00      	add	r7, sp, #0
 800253c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002540:	2001      	movs	r0, #1
 8002542:	f7ff ff7d 	bl	8002440 <_Z41__static_initialization_and_destruction_0ii>
 8002546:	bd80      	pop	{r7, pc}

08002548 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002548:	b480      	push	{r7}
 800254a:	b083      	sub	sp, #12
 800254c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800254e:	4b0f      	ldr	r3, [pc, #60]	; (800258c <HAL_MspInit+0x44>)
 8002550:	699b      	ldr	r3, [r3, #24]
 8002552:	4a0e      	ldr	r2, [pc, #56]	; (800258c <HAL_MspInit+0x44>)
 8002554:	f043 0301 	orr.w	r3, r3, #1
 8002558:	6193      	str	r3, [r2, #24]
 800255a:	4b0c      	ldr	r3, [pc, #48]	; (800258c <HAL_MspInit+0x44>)
 800255c:	699b      	ldr	r3, [r3, #24]
 800255e:	f003 0301 	and.w	r3, r3, #1
 8002562:	607b      	str	r3, [r7, #4]
 8002564:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002566:	4b09      	ldr	r3, [pc, #36]	; (800258c <HAL_MspInit+0x44>)
 8002568:	69db      	ldr	r3, [r3, #28]
 800256a:	4a08      	ldr	r2, [pc, #32]	; (800258c <HAL_MspInit+0x44>)
 800256c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002570:	61d3      	str	r3, [r2, #28]
 8002572:	4b06      	ldr	r3, [pc, #24]	; (800258c <HAL_MspInit+0x44>)
 8002574:	69db      	ldr	r3, [r3, #28]
 8002576:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800257a:	603b      	str	r3, [r7, #0]
 800257c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800257e:	bf00      	nop
 8002580:	370c      	adds	r7, #12
 8002582:	46bd      	mov	sp, r7
 8002584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002588:	4770      	bx	lr
 800258a:	bf00      	nop
 800258c:	40021000 	.word	0x40021000

08002590 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b08a      	sub	sp, #40	; 0x28
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002598:	f107 0314 	add.w	r3, r7, #20
 800259c:	2200      	movs	r2, #0
 800259e:	601a      	str	r2, [r3, #0]
 80025a0:	605a      	str	r2, [r3, #4]
 80025a2:	609a      	str	r2, [r3, #8]
 80025a4:	60da      	str	r2, [r3, #12]
 80025a6:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025b0:	d128      	bne.n	8002604 <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80025b2:	4b16      	ldr	r3, [pc, #88]	; (800260c <HAL_TIM_Encoder_MspInit+0x7c>)
 80025b4:	69db      	ldr	r3, [r3, #28]
 80025b6:	4a15      	ldr	r2, [pc, #84]	; (800260c <HAL_TIM_Encoder_MspInit+0x7c>)
 80025b8:	f043 0301 	orr.w	r3, r3, #1
 80025bc:	61d3      	str	r3, [r2, #28]
 80025be:	4b13      	ldr	r3, [pc, #76]	; (800260c <HAL_TIM_Encoder_MspInit+0x7c>)
 80025c0:	69db      	ldr	r3, [r3, #28]
 80025c2:	f003 0301 	and.w	r3, r3, #1
 80025c6:	613b      	str	r3, [r7, #16]
 80025c8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025ca:	4b10      	ldr	r3, [pc, #64]	; (800260c <HAL_TIM_Encoder_MspInit+0x7c>)
 80025cc:	695b      	ldr	r3, [r3, #20]
 80025ce:	4a0f      	ldr	r2, [pc, #60]	; (800260c <HAL_TIM_Encoder_MspInit+0x7c>)
 80025d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025d4:	6153      	str	r3, [r2, #20]
 80025d6:	4b0d      	ldr	r3, [pc, #52]	; (800260c <HAL_TIM_Encoder_MspInit+0x7c>)
 80025d8:	695b      	ldr	r3, [r3, #20]
 80025da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025de:	60fb      	str	r3, [r7, #12]
 80025e0:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration    
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80025e2:	2303      	movs	r3, #3
 80025e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025e6:	2302      	movs	r3, #2
 80025e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80025ea:	2301      	movs	r3, #1
 80025ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025ee:	2300      	movs	r3, #0
 80025f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80025f2:	2301      	movs	r3, #1
 80025f4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025f6:	f107 0314 	add.w	r3, r7, #20
 80025fa:	4619      	mov	r1, r3
 80025fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002600:	f000 fd6a 	bl	80030d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002604:	bf00      	nop
 8002606:	3728      	adds	r7, #40	; 0x28
 8002608:	46bd      	mov	sp, r7
 800260a:	bd80      	pop	{r7, pc}
 800260c:	40021000 	.word	0x40021000

08002610 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b084      	sub	sp, #16
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4a16      	ldr	r2, [pc, #88]	; (8002678 <HAL_TIM_Base_MspInit+0x68>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d114      	bne.n	800264c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002622:	4b16      	ldr	r3, [pc, #88]	; (800267c <HAL_TIM_Base_MspInit+0x6c>)
 8002624:	69db      	ldr	r3, [r3, #28]
 8002626:	4a15      	ldr	r2, [pc, #84]	; (800267c <HAL_TIM_Base_MspInit+0x6c>)
 8002628:	f043 0310 	orr.w	r3, r3, #16
 800262c:	61d3      	str	r3, [r2, #28]
 800262e:	4b13      	ldr	r3, [pc, #76]	; (800267c <HAL_TIM_Base_MspInit+0x6c>)
 8002630:	69db      	ldr	r3, [r3, #28]
 8002632:	f003 0310 	and.w	r3, r3, #16
 8002636:	60fb      	str	r3, [r7, #12]
 8002638:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC1_IRQn, 0, 0);
 800263a:	2200      	movs	r2, #0
 800263c:	2100      	movs	r1, #0
 800263e:	2036      	movs	r0, #54	; 0x36
 8002640:	f000 fb3f 	bl	8002cc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC1_IRQn);
 8002644:	2036      	movs	r0, #54	; 0x36
 8002646:	f000 fb58 	bl	8002cfa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 800264a:	e010      	b.n	800266e <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM16)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4a0b      	ldr	r2, [pc, #44]	; (8002680 <HAL_TIM_Base_MspInit+0x70>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d10b      	bne.n	800266e <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8002656:	4b09      	ldr	r3, [pc, #36]	; (800267c <HAL_TIM_Base_MspInit+0x6c>)
 8002658:	699b      	ldr	r3, [r3, #24]
 800265a:	4a08      	ldr	r2, [pc, #32]	; (800267c <HAL_TIM_Base_MspInit+0x6c>)
 800265c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002660:	6193      	str	r3, [r2, #24]
 8002662:	4b06      	ldr	r3, [pc, #24]	; (800267c <HAL_TIM_Base_MspInit+0x6c>)
 8002664:	699b      	ldr	r3, [r3, #24]
 8002666:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800266a:	60bb      	str	r3, [r7, #8]
 800266c:	68bb      	ldr	r3, [r7, #8]
}
 800266e:	bf00      	nop
 8002670:	3710      	adds	r7, #16
 8002672:	46bd      	mov	sp, r7
 8002674:	bd80      	pop	{r7, pc}
 8002676:	bf00      	nop
 8002678:	40001000 	.word	0x40001000
 800267c:	40021000 	.word	0x40021000
 8002680:	40014400 	.word	0x40014400

08002684 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b088      	sub	sp, #32
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800268c:	f107 030c 	add.w	r3, r7, #12
 8002690:	2200      	movs	r2, #0
 8002692:	601a      	str	r2, [r3, #0]
 8002694:	605a      	str	r2, [r3, #4]
 8002696:	609a      	str	r2, [r3, #8]
 8002698:	60da      	str	r2, [r3, #12]
 800269a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM16)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4a11      	ldr	r2, [pc, #68]	; (80026e8 <HAL_TIM_MspPostInit+0x64>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d11c      	bne.n	80026e0 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM16_MspPostInit 0 */

  /* USER CODE END TIM16_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026a6:	4b11      	ldr	r3, [pc, #68]	; (80026ec <HAL_TIM_MspPostInit+0x68>)
 80026a8:	695b      	ldr	r3, [r3, #20]
 80026aa:	4a10      	ldr	r2, [pc, #64]	; (80026ec <HAL_TIM_MspPostInit+0x68>)
 80026ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026b0:	6153      	str	r3, [r2, #20]
 80026b2:	4b0e      	ldr	r3, [pc, #56]	; (80026ec <HAL_TIM_MspPostInit+0x68>)
 80026b4:	695b      	ldr	r3, [r3, #20]
 80026b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026ba:	60bb      	str	r3, [r7, #8]
 80026bc:	68bb      	ldr	r3, [r7, #8]
    /**TIM16 GPIO Configuration    
    PA6     ------> TIM16_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80026be:	2340      	movs	r3, #64	; 0x40
 80026c0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026c2:	2302      	movs	r3, #2
 80026c4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026c6:	2300      	movs	r3, #0
 80026c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026ca:	2300      	movs	r3, #0
 80026cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 80026ce:	2301      	movs	r3, #1
 80026d0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026d2:	f107 030c 	add.w	r3, r7, #12
 80026d6:	4619      	mov	r1, r3
 80026d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80026dc:	f000 fcfc 	bl	80030d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM16_MspPostInit 1 */

  /* USER CODE END TIM16_MspPostInit 1 */
  }

}
 80026e0:	bf00      	nop
 80026e2:	3720      	adds	r7, #32
 80026e4:	46bd      	mov	sp, r7
 80026e6:	bd80      	pop	{r7, pc}
 80026e8:	40014400 	.word	0x40014400
 80026ec:	40021000 	.word	0x40021000

080026f0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b08a      	sub	sp, #40	; 0x28
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026f8:	f107 0314 	add.w	r3, r7, #20
 80026fc:	2200      	movs	r2, #0
 80026fe:	601a      	str	r2, [r3, #0]
 8002700:	605a      	str	r2, [r3, #4]
 8002702:	609a      	str	r2, [r3, #8]
 8002704:	60da      	str	r2, [r3, #12]
 8002706:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4a42      	ldr	r2, [pc, #264]	; (8002818 <HAL_UART_MspInit+0x128>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d17d      	bne.n	800280e <HAL_UART_MspInit+0x11e>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002712:	4b42      	ldr	r3, [pc, #264]	; (800281c <HAL_UART_MspInit+0x12c>)
 8002714:	69db      	ldr	r3, [r3, #28]
 8002716:	4a41      	ldr	r2, [pc, #260]	; (800281c <HAL_UART_MspInit+0x12c>)
 8002718:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800271c:	61d3      	str	r3, [r2, #28]
 800271e:	4b3f      	ldr	r3, [pc, #252]	; (800281c <HAL_UART_MspInit+0x12c>)
 8002720:	69db      	ldr	r3, [r3, #28]
 8002722:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002726:	613b      	str	r3, [r7, #16]
 8002728:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800272a:	4b3c      	ldr	r3, [pc, #240]	; (800281c <HAL_UART_MspInit+0x12c>)
 800272c:	695b      	ldr	r3, [r3, #20]
 800272e:	4a3b      	ldr	r2, [pc, #236]	; (800281c <HAL_UART_MspInit+0x12c>)
 8002730:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002734:	6153      	str	r3, [r2, #20]
 8002736:	4b39      	ldr	r3, [pc, #228]	; (800281c <HAL_UART_MspInit+0x12c>)
 8002738:	695b      	ldr	r3, [r3, #20]
 800273a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800273e:	60fb      	str	r3, [r7, #12]
 8002740:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8002742:	f248 0304 	movw	r3, #32772	; 0x8004
 8002746:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002748:	2302      	movs	r3, #2
 800274a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800274c:	2300      	movs	r3, #0
 800274e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002750:	2303      	movs	r3, #3
 8002752:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002754:	2307      	movs	r3, #7
 8002756:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002758:	f107 0314 	add.w	r3, r7, #20
 800275c:	4619      	mov	r1, r3
 800275e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002762:	f000 fcb9 	bl	80030d8 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8002766:	4b2e      	ldr	r3, [pc, #184]	; (8002820 <HAL_UART_MspInit+0x130>)
 8002768:	4a2e      	ldr	r2, [pc, #184]	; (8002824 <HAL_UART_MspInit+0x134>)
 800276a:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800276c:	4b2c      	ldr	r3, [pc, #176]	; (8002820 <HAL_UART_MspInit+0x130>)
 800276e:	2200      	movs	r2, #0
 8002770:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002772:	4b2b      	ldr	r3, [pc, #172]	; (8002820 <HAL_UART_MspInit+0x130>)
 8002774:	2200      	movs	r2, #0
 8002776:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002778:	4b29      	ldr	r3, [pc, #164]	; (8002820 <HAL_UART_MspInit+0x130>)
 800277a:	2280      	movs	r2, #128	; 0x80
 800277c:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800277e:	4b28      	ldr	r3, [pc, #160]	; (8002820 <HAL_UART_MspInit+0x130>)
 8002780:	2200      	movs	r2, #0
 8002782:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002784:	4b26      	ldr	r3, [pc, #152]	; (8002820 <HAL_UART_MspInit+0x130>)
 8002786:	2200      	movs	r2, #0
 8002788:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 800278a:	4b25      	ldr	r3, [pc, #148]	; (8002820 <HAL_UART_MspInit+0x130>)
 800278c:	2220      	movs	r2, #32
 800278e:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002790:	4b23      	ldr	r3, [pc, #140]	; (8002820 <HAL_UART_MspInit+0x130>)
 8002792:	2200      	movs	r2, #0
 8002794:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002796:	4822      	ldr	r0, [pc, #136]	; (8002820 <HAL_UART_MspInit+0x130>)
 8002798:	f000 fac9 	bl	8002d2e <HAL_DMA_Init>
 800279c:	4603      	mov	r3, r0
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d001      	beq.n	80027a6 <HAL_UART_MspInit+0xb6>
    {
      Error_Handler();
 80027a2:	f7fd ff5d 	bl	8000660 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	4a1d      	ldr	r2, [pc, #116]	; (8002820 <HAL_UART_MspInit+0x130>)
 80027aa:	66da      	str	r2, [r3, #108]	; 0x6c
 80027ac:	4a1c      	ldr	r2, [pc, #112]	; (8002820 <HAL_UART_MspInit+0x130>)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel7;
 80027b2:	4b1d      	ldr	r3, [pc, #116]	; (8002828 <HAL_UART_MspInit+0x138>)
 80027b4:	4a1d      	ldr	r2, [pc, #116]	; (800282c <HAL_UART_MspInit+0x13c>)
 80027b6:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80027b8:	4b1b      	ldr	r3, [pc, #108]	; (8002828 <HAL_UART_MspInit+0x138>)
 80027ba:	2210      	movs	r2, #16
 80027bc:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80027be:	4b1a      	ldr	r3, [pc, #104]	; (8002828 <HAL_UART_MspInit+0x138>)
 80027c0:	2200      	movs	r2, #0
 80027c2:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80027c4:	4b18      	ldr	r3, [pc, #96]	; (8002828 <HAL_UART_MspInit+0x138>)
 80027c6:	2280      	movs	r2, #128	; 0x80
 80027c8:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80027ca:	4b17      	ldr	r3, [pc, #92]	; (8002828 <HAL_UART_MspInit+0x138>)
 80027cc:	2200      	movs	r2, #0
 80027ce:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80027d0:	4b15      	ldr	r3, [pc, #84]	; (8002828 <HAL_UART_MspInit+0x138>)
 80027d2:	2200      	movs	r2, #0
 80027d4:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80027d6:	4b14      	ldr	r3, [pc, #80]	; (8002828 <HAL_UART_MspInit+0x138>)
 80027d8:	2200      	movs	r2, #0
 80027da:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80027dc:	4b12      	ldr	r3, [pc, #72]	; (8002828 <HAL_UART_MspInit+0x138>)
 80027de:	2200      	movs	r2, #0
 80027e0:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80027e2:	4811      	ldr	r0, [pc, #68]	; (8002828 <HAL_UART_MspInit+0x138>)
 80027e4:	f000 faa3 	bl	8002d2e <HAL_DMA_Init>
 80027e8:	4603      	mov	r3, r0
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d001      	beq.n	80027f2 <HAL_UART_MspInit+0x102>
    {
      Error_Handler();
 80027ee:	f7fd ff37 	bl	8000660 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	4a0c      	ldr	r2, [pc, #48]	; (8002828 <HAL_UART_MspInit+0x138>)
 80027f6:	669a      	str	r2, [r3, #104]	; 0x68
 80027f8:	4a0b      	ldr	r2, [pc, #44]	; (8002828 <HAL_UART_MspInit+0x138>)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80027fe:	2200      	movs	r2, #0
 8002800:	2100      	movs	r1, #0
 8002802:	2026      	movs	r0, #38	; 0x26
 8002804:	f000 fa5d 	bl	8002cc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002808:	2026      	movs	r0, #38	; 0x26
 800280a:	f000 fa76 	bl	8002cfa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800280e:	bf00      	nop
 8002810:	3728      	adds	r7, #40	; 0x28
 8002812:	46bd      	mov	sp, r7
 8002814:	bd80      	pop	{r7, pc}
 8002816:	bf00      	nop
 8002818:	40004400 	.word	0x40004400
 800281c:	40021000 	.word	0x40021000
 8002820:	20000a2c 	.word	0x20000a2c
 8002824:	4002006c 	.word	0x4002006c
 8002828:	20000a70 	.word	0x20000a70
 800282c:	40020080 	.word	0x40020080

08002830 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002830:	b480      	push	{r7}
 8002832:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002834:	bf00      	nop
 8002836:	46bd      	mov	sp, r7
 8002838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283c:	4770      	bx	lr

0800283e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800283e:	b480      	push	{r7}
 8002840:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002842:	e7fe      	b.n	8002842 <HardFault_Handler+0x4>

08002844 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002844:	b480      	push	{r7}
 8002846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002848:	e7fe      	b.n	8002848 <MemManage_Handler+0x4>

0800284a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800284a:	b480      	push	{r7}
 800284c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800284e:	e7fe      	b.n	800284e <BusFault_Handler+0x4>

08002850 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002850:	b480      	push	{r7}
 8002852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002854:	e7fe      	b.n	8002854 <UsageFault_Handler+0x4>

08002856 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002856:	b480      	push	{r7}
 8002858:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800285a:	bf00      	nop
 800285c:	46bd      	mov	sp, r7
 800285e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002862:	4770      	bx	lr

08002864 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002864:	b480      	push	{r7}
 8002866:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002868:	bf00      	nop
 800286a:	46bd      	mov	sp, r7
 800286c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002870:	4770      	bx	lr

08002872 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002872:	b480      	push	{r7}
 8002874:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002876:	bf00      	nop
 8002878:	46bd      	mov	sp, r7
 800287a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287e:	4770      	bx	lr

08002880 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002884:	f000 f900 	bl	8002a88 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002888:	bf00      	nop
 800288a:	bd80      	pop	{r7, pc}

0800288c <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002890:	4802      	ldr	r0, [pc, #8]	; (800289c <DMA1_Channel6_IRQHandler+0x10>)
 8002892:	f000 fb30 	bl	8002ef6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8002896:	bf00      	nop
 8002898:	bd80      	pop	{r7, pc}
 800289a:	bf00      	nop
 800289c:	20000a2c 	.word	0x20000a2c

080028a0 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80028a4:	4802      	ldr	r0, [pc, #8]	; (80028b0 <DMA1_Channel7_IRQHandler+0x10>)
 80028a6:	f000 fb26 	bl	8002ef6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 80028aa:	bf00      	nop
 80028ac:	bd80      	pop	{r7, pc}
 80028ae:	bf00      	nop
 80028b0:	20000a70 	.word	0x20000a70

080028b4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXT line 26.
  */
void USART2_IRQHandler(void)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80028b8:	4802      	ldr	r0, [pc, #8]	; (80028c4 <USART2_IRQHandler+0x10>)
 80028ba:	f003 f87b 	bl	80059b4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80028be:	bf00      	nop
 80028c0:	bd80      	pop	{r7, pc}
 80028c2:	bf00      	nop
 80028c4:	20000b34 	.word	0x20000b34

080028c8 <TIM6_DAC1_IRQHandler>:

/**
  * @brief This function handles TIM6 global and DAC1 underrun error interrupts.
  */
void TIM6_DAC1_IRQHandler(void)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC1_IRQn 0 */

  /* USER CODE END TIM6_DAC1_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80028cc:	4803      	ldr	r0, [pc, #12]	; (80028dc <TIM6_DAC1_IRQHandler+0x14>)
 80028ce:	f002 f872 	bl	80049b6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC1_IRQn 1 */
  PID_position_control_cb();
 80028d2:	f7fe ff51 	bl	8001778 <PID_position_control_cb>

  /* USER CODE END TIM6_DAC1_IRQn 1 */
}
 80028d6:	bf00      	nop
 80028d8:	bd80      	pop	{r7, pc}
 80028da:	bf00      	nop
 80028dc:	20000ab4 	.word	0x20000ab4

080028e0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80028e0:	b480      	push	{r7}
 80028e2:	af00      	add	r7, sp, #0
	return 1;
 80028e4:	2301      	movs	r3, #1
}
 80028e6:	4618      	mov	r0, r3
 80028e8:	46bd      	mov	sp, r7
 80028ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ee:	4770      	bx	lr

080028f0 <_kill>:

int _kill(int pid, int sig)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b082      	sub	sp, #8
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
 80028f8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80028fa:	f003 fddd 	bl	80064b8 <__errno>
 80028fe:	4602      	mov	r2, r0
 8002900:	2316      	movs	r3, #22
 8002902:	6013      	str	r3, [r2, #0]
	return -1;
 8002904:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002908:	4618      	mov	r0, r3
 800290a:	3708      	adds	r7, #8
 800290c:	46bd      	mov	sp, r7
 800290e:	bd80      	pop	{r7, pc}

08002910 <_exit>:

void _exit (int status)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b082      	sub	sp, #8
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002918:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800291c:	6878      	ldr	r0, [r7, #4]
 800291e:	f7ff ffe7 	bl	80028f0 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002922:	e7fe      	b.n	8002922 <_exit+0x12>

08002924 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b084      	sub	sp, #16
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800292c:	4b11      	ldr	r3, [pc, #68]	; (8002974 <_sbrk+0x50>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	2b00      	cmp	r3, #0
 8002932:	d102      	bne.n	800293a <_sbrk+0x16>
		heap_end = &end;
 8002934:	4b0f      	ldr	r3, [pc, #60]	; (8002974 <_sbrk+0x50>)
 8002936:	4a10      	ldr	r2, [pc, #64]	; (8002978 <_sbrk+0x54>)
 8002938:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800293a:	4b0e      	ldr	r3, [pc, #56]	; (8002974 <_sbrk+0x50>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8002940:	4b0c      	ldr	r3, [pc, #48]	; (8002974 <_sbrk+0x50>)
 8002942:	681a      	ldr	r2, [r3, #0]
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	4413      	add	r3, r2
 8002948:	466a      	mov	r2, sp
 800294a:	4293      	cmp	r3, r2
 800294c:	d907      	bls.n	800295e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800294e:	f003 fdb3 	bl	80064b8 <__errno>
 8002952:	4602      	mov	r2, r0
 8002954:	230c      	movs	r3, #12
 8002956:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8002958:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800295c:	e006      	b.n	800296c <_sbrk+0x48>
	}

	heap_end += incr;
 800295e:	4b05      	ldr	r3, [pc, #20]	; (8002974 <_sbrk+0x50>)
 8002960:	681a      	ldr	r2, [r3, #0]
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	4413      	add	r3, r2
 8002966:	4a03      	ldr	r2, [pc, #12]	; (8002974 <_sbrk+0x50>)
 8002968:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800296a:	68fb      	ldr	r3, [r7, #12]
}
 800296c:	4618      	mov	r0, r3
 800296e:	3710      	adds	r7, #16
 8002970:	46bd      	mov	sp, r7
 8002972:	bd80      	pop	{r7, pc}
 8002974:	20000a20 	.word	0x20000a20
 8002978:	20000c00 	.word	0x20000c00

0800297c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800297c:	b480      	push	{r7}
 800297e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002980:	4b08      	ldr	r3, [pc, #32]	; (80029a4 <SystemInit+0x28>)
 8002982:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002986:	4a07      	ldr	r2, [pc, #28]	; (80029a4 <SystemInit+0x28>)
 8002988:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800298c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002990:	4b04      	ldr	r3, [pc, #16]	; (80029a4 <SystemInit+0x28>)
 8002992:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002996:	609a      	str	r2, [r3, #8]
#endif
}
 8002998:	bf00      	nop
 800299a:	46bd      	mov	sp, r7
 800299c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a0:	4770      	bx	lr
 80029a2:	bf00      	nop
 80029a4:	e000ed00 	.word	0xe000ed00

080029a8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80029a8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80029e0 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80029ac:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80029ae:	e003      	b.n	80029b8 <LoopCopyDataInit>

080029b0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80029b0:	4b0c      	ldr	r3, [pc, #48]	; (80029e4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80029b2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80029b4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80029b6:	3104      	adds	r1, #4

080029b8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80029b8:	480b      	ldr	r0, [pc, #44]	; (80029e8 <LoopForever+0xa>)
	ldr	r3, =_edata
 80029ba:	4b0c      	ldr	r3, [pc, #48]	; (80029ec <LoopForever+0xe>)
	adds	r2, r0, r1
 80029bc:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80029be:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80029c0:	d3f6      	bcc.n	80029b0 <CopyDataInit>
	ldr	r2, =_sbss
 80029c2:	4a0b      	ldr	r2, [pc, #44]	; (80029f0 <LoopForever+0x12>)
	b	LoopFillZerobss
 80029c4:	e002      	b.n	80029cc <LoopFillZerobss>

080029c6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80029c6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80029c8:	f842 3b04 	str.w	r3, [r2], #4

080029cc <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80029cc:	4b09      	ldr	r3, [pc, #36]	; (80029f4 <LoopForever+0x16>)
	cmp	r2, r3
 80029ce:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80029d0:	d3f9      	bcc.n	80029c6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80029d2:	f7ff ffd3 	bl	800297c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80029d6:	f003 fd75 	bl	80064c4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80029da:	f7fd fc29 	bl	8000230 <main>

080029de <LoopForever>:

LoopForever:
    b LoopForever
 80029de:	e7fe      	b.n	80029de <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80029e0:	20003000 	.word	0x20003000
	ldr	r3, =_sidata
 80029e4:	08006a54 	.word	0x08006a54
	ldr	r0, =_sdata
 80029e8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80029ec:	20000078 	.word	0x20000078
	ldr	r2, =_sbss
 80029f0:	20000078 	.word	0x20000078
	ldr	r3, = _ebss
 80029f4:	20000bfc 	.word	0x20000bfc

080029f8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80029f8:	e7fe      	b.n	80029f8 <ADC1_2_IRQHandler>
	...

080029fc <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002a00:	4b08      	ldr	r3, [pc, #32]	; (8002a24 <HAL_Init+0x28>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4a07      	ldr	r2, [pc, #28]	; (8002a24 <HAL_Init+0x28>)
 8002a06:	f043 0310 	orr.w	r3, r3, #16
 8002a0a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a0c:	2003      	movs	r0, #3
 8002a0e:	f000 f94d 	bl	8002cac <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002a12:	2000      	movs	r0, #0
 8002a14:	f000 f808 	bl	8002a28 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002a18:	f7ff fd96 	bl	8002548 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002a1c:	2300      	movs	r3, #0
}
 8002a1e:	4618      	mov	r0, r3
 8002a20:	bd80      	pop	{r7, pc}
 8002a22:	bf00      	nop
 8002a24:	40022000 	.word	0x40022000

08002a28 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b082      	sub	sp, #8
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002a30:	4b12      	ldr	r3, [pc, #72]	; (8002a7c <HAL_InitTick+0x54>)
 8002a32:	681a      	ldr	r2, [r3, #0]
 8002a34:	4b12      	ldr	r3, [pc, #72]	; (8002a80 <HAL_InitTick+0x58>)
 8002a36:	781b      	ldrb	r3, [r3, #0]
 8002a38:	4619      	mov	r1, r3
 8002a3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002a3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002a42:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a46:	4618      	mov	r0, r3
 8002a48:	f000 f965 	bl	8002d16 <HAL_SYSTICK_Config>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d001      	beq.n	8002a56 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002a52:	2301      	movs	r3, #1
 8002a54:	e00e      	b.n	8002a74 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2b0f      	cmp	r3, #15
 8002a5a:	d80a      	bhi.n	8002a72 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	6879      	ldr	r1, [r7, #4]
 8002a60:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002a64:	f000 f92d 	bl	8002cc2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002a68:	4a06      	ldr	r2, [pc, #24]	; (8002a84 <HAL_InitTick+0x5c>)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8002a6e:	2300      	movs	r3, #0
 8002a70:	e000      	b.n	8002a74 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002a72:	2301      	movs	r3, #1
}
 8002a74:	4618      	mov	r0, r3
 8002a76:	3708      	adds	r7, #8
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	bd80      	pop	{r7, pc}
 8002a7c:	20000004 	.word	0x20000004
 8002a80:	2000000c 	.word	0x2000000c
 8002a84:	20000008 	.word	0x20000008

08002a88 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002a8c:	4b06      	ldr	r3, [pc, #24]	; (8002aa8 <HAL_IncTick+0x20>)
 8002a8e:	781b      	ldrb	r3, [r3, #0]
 8002a90:	461a      	mov	r2, r3
 8002a92:	4b06      	ldr	r3, [pc, #24]	; (8002aac <HAL_IncTick+0x24>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4413      	add	r3, r2
 8002a98:	4a04      	ldr	r2, [pc, #16]	; (8002aac <HAL_IncTick+0x24>)
 8002a9a:	6013      	str	r3, [r2, #0]
}
 8002a9c:	bf00      	nop
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa4:	4770      	bx	lr
 8002aa6:	bf00      	nop
 8002aa8:	2000000c 	.word	0x2000000c
 8002aac:	20000bf4 	.word	0x20000bf4

08002ab0 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	af00      	add	r7, sp, #0
  return uwTick;  
 8002ab4:	4b03      	ldr	r3, [pc, #12]	; (8002ac4 <HAL_GetTick+0x14>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
}
 8002ab8:	4618      	mov	r0, r3
 8002aba:	46bd      	mov	sp, r7
 8002abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac0:	4770      	bx	lr
 8002ac2:	bf00      	nop
 8002ac4:	20000bf4 	.word	0x20000bf4

08002ac8 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b084      	sub	sp, #16
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002ad0:	f7ff ffee 	bl	8002ab0 <HAL_GetTick>
 8002ad4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002ae0:	d005      	beq.n	8002aee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002ae2:	4b09      	ldr	r3, [pc, #36]	; (8002b08 <HAL_Delay+0x40>)
 8002ae4:	781b      	ldrb	r3, [r3, #0]
 8002ae6:	461a      	mov	r2, r3
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	4413      	add	r3, r2
 8002aec:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8002aee:	bf00      	nop
 8002af0:	f7ff ffde 	bl	8002ab0 <HAL_GetTick>
 8002af4:	4602      	mov	r2, r0
 8002af6:	68bb      	ldr	r3, [r7, #8]
 8002af8:	1ad3      	subs	r3, r2, r3
 8002afa:	68fa      	ldr	r2, [r7, #12]
 8002afc:	429a      	cmp	r2, r3
 8002afe:	d8f7      	bhi.n	8002af0 <HAL_Delay+0x28>
  {
  }
}
 8002b00:	bf00      	nop
 8002b02:	3710      	adds	r7, #16
 8002b04:	46bd      	mov	sp, r7
 8002b06:	bd80      	pop	{r7, pc}
 8002b08:	2000000c 	.word	0x2000000c

08002b0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	b085      	sub	sp, #20
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	f003 0307 	and.w	r3, r3, #7
 8002b1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b1c:	4b0c      	ldr	r3, [pc, #48]	; (8002b50 <__NVIC_SetPriorityGrouping+0x44>)
 8002b1e:	68db      	ldr	r3, [r3, #12]
 8002b20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b22:	68ba      	ldr	r2, [r7, #8]
 8002b24:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002b28:	4013      	ands	r3, r2
 8002b2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b30:	68bb      	ldr	r3, [r7, #8]
 8002b32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b34:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002b38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b3e:	4a04      	ldr	r2, [pc, #16]	; (8002b50 <__NVIC_SetPriorityGrouping+0x44>)
 8002b40:	68bb      	ldr	r3, [r7, #8]
 8002b42:	60d3      	str	r3, [r2, #12]
}
 8002b44:	bf00      	nop
 8002b46:	3714      	adds	r7, #20
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4e:	4770      	bx	lr
 8002b50:	e000ed00 	.word	0xe000ed00

08002b54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b54:	b480      	push	{r7}
 8002b56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b58:	4b04      	ldr	r3, [pc, #16]	; (8002b6c <__NVIC_GetPriorityGrouping+0x18>)
 8002b5a:	68db      	ldr	r3, [r3, #12]
 8002b5c:	0a1b      	lsrs	r3, r3, #8
 8002b5e:	f003 0307 	and.w	r3, r3, #7
}
 8002b62:	4618      	mov	r0, r3
 8002b64:	46bd      	mov	sp, r7
 8002b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6a:	4770      	bx	lr
 8002b6c:	e000ed00 	.word	0xe000ed00

08002b70 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b70:	b480      	push	{r7}
 8002b72:	b083      	sub	sp, #12
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	4603      	mov	r3, r0
 8002b78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	db0b      	blt.n	8002b9a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b82:	79fb      	ldrb	r3, [r7, #7]
 8002b84:	f003 021f 	and.w	r2, r3, #31
 8002b88:	4907      	ldr	r1, [pc, #28]	; (8002ba8 <__NVIC_EnableIRQ+0x38>)
 8002b8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b8e:	095b      	lsrs	r3, r3, #5
 8002b90:	2001      	movs	r0, #1
 8002b92:	fa00 f202 	lsl.w	r2, r0, r2
 8002b96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002b9a:	bf00      	nop
 8002b9c:	370c      	adds	r7, #12
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba4:	4770      	bx	lr
 8002ba6:	bf00      	nop
 8002ba8:	e000e100 	.word	0xe000e100

08002bac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002bac:	b480      	push	{r7}
 8002bae:	b083      	sub	sp, #12
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	6039      	str	r1, [r7, #0]
 8002bb6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	db0a      	blt.n	8002bd6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	b2da      	uxtb	r2, r3
 8002bc4:	490c      	ldr	r1, [pc, #48]	; (8002bf8 <__NVIC_SetPriority+0x4c>)
 8002bc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bca:	0112      	lsls	r2, r2, #4
 8002bcc:	b2d2      	uxtb	r2, r2
 8002bce:	440b      	add	r3, r1
 8002bd0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002bd4:	e00a      	b.n	8002bec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	b2da      	uxtb	r2, r3
 8002bda:	4908      	ldr	r1, [pc, #32]	; (8002bfc <__NVIC_SetPriority+0x50>)
 8002bdc:	79fb      	ldrb	r3, [r7, #7]
 8002bde:	f003 030f 	and.w	r3, r3, #15
 8002be2:	3b04      	subs	r3, #4
 8002be4:	0112      	lsls	r2, r2, #4
 8002be6:	b2d2      	uxtb	r2, r2
 8002be8:	440b      	add	r3, r1
 8002bea:	761a      	strb	r2, [r3, #24]
}
 8002bec:	bf00      	nop
 8002bee:	370c      	adds	r7, #12
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf6:	4770      	bx	lr
 8002bf8:	e000e100 	.word	0xe000e100
 8002bfc:	e000ed00 	.word	0xe000ed00

08002c00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c00:	b480      	push	{r7}
 8002c02:	b089      	sub	sp, #36	; 0x24
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	60f8      	str	r0, [r7, #12]
 8002c08:	60b9      	str	r1, [r7, #8]
 8002c0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	f003 0307 	and.w	r3, r3, #7
 8002c12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c14:	69fb      	ldr	r3, [r7, #28]
 8002c16:	f1c3 0307 	rsb	r3, r3, #7
 8002c1a:	2b04      	cmp	r3, #4
 8002c1c:	bf28      	it	cs
 8002c1e:	2304      	movcs	r3, #4
 8002c20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c22:	69fb      	ldr	r3, [r7, #28]
 8002c24:	3304      	adds	r3, #4
 8002c26:	2b06      	cmp	r3, #6
 8002c28:	d902      	bls.n	8002c30 <NVIC_EncodePriority+0x30>
 8002c2a:	69fb      	ldr	r3, [r7, #28]
 8002c2c:	3b03      	subs	r3, #3
 8002c2e:	e000      	b.n	8002c32 <NVIC_EncodePriority+0x32>
 8002c30:	2300      	movs	r3, #0
 8002c32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c34:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002c38:	69bb      	ldr	r3, [r7, #24]
 8002c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c3e:	43da      	mvns	r2, r3
 8002c40:	68bb      	ldr	r3, [r7, #8]
 8002c42:	401a      	ands	r2, r3
 8002c44:	697b      	ldr	r3, [r7, #20]
 8002c46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c48:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002c4c:	697b      	ldr	r3, [r7, #20]
 8002c4e:	fa01 f303 	lsl.w	r3, r1, r3
 8002c52:	43d9      	mvns	r1, r3
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c58:	4313      	orrs	r3, r2
         );
}
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	3724      	adds	r7, #36	; 0x24
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c64:	4770      	bx	lr
	...

08002c68 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b082      	sub	sp, #8
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	3b01      	subs	r3, #1
 8002c74:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c78:	d301      	bcc.n	8002c7e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	e00f      	b.n	8002c9e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c7e:	4a0a      	ldr	r2, [pc, #40]	; (8002ca8 <SysTick_Config+0x40>)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	3b01      	subs	r3, #1
 8002c84:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c86:	210f      	movs	r1, #15
 8002c88:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002c8c:	f7ff ff8e 	bl	8002bac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c90:	4b05      	ldr	r3, [pc, #20]	; (8002ca8 <SysTick_Config+0x40>)
 8002c92:	2200      	movs	r2, #0
 8002c94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c96:	4b04      	ldr	r3, [pc, #16]	; (8002ca8 <SysTick_Config+0x40>)
 8002c98:	2207      	movs	r2, #7
 8002c9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c9c:	2300      	movs	r3, #0
}
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	3708      	adds	r7, #8
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bd80      	pop	{r7, pc}
 8002ca6:	bf00      	nop
 8002ca8:	e000e010 	.word	0xe000e010

08002cac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b082      	sub	sp, #8
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002cb4:	6878      	ldr	r0, [r7, #4]
 8002cb6:	f7ff ff29 	bl	8002b0c <__NVIC_SetPriorityGrouping>
}
 8002cba:	bf00      	nop
 8002cbc:	3708      	adds	r7, #8
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bd80      	pop	{r7, pc}

08002cc2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002cc2:	b580      	push	{r7, lr}
 8002cc4:	b086      	sub	sp, #24
 8002cc6:	af00      	add	r7, sp, #0
 8002cc8:	4603      	mov	r3, r0
 8002cca:	60b9      	str	r1, [r7, #8]
 8002ccc:	607a      	str	r2, [r7, #4]
 8002cce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002cd4:	f7ff ff3e 	bl	8002b54 <__NVIC_GetPriorityGrouping>
 8002cd8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002cda:	687a      	ldr	r2, [r7, #4]
 8002cdc:	68b9      	ldr	r1, [r7, #8]
 8002cde:	6978      	ldr	r0, [r7, #20]
 8002ce0:	f7ff ff8e 	bl	8002c00 <NVIC_EncodePriority>
 8002ce4:	4602      	mov	r2, r0
 8002ce6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002cea:	4611      	mov	r1, r2
 8002cec:	4618      	mov	r0, r3
 8002cee:	f7ff ff5d 	bl	8002bac <__NVIC_SetPriority>
}
 8002cf2:	bf00      	nop
 8002cf4:	3718      	adds	r7, #24
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bd80      	pop	{r7, pc}

08002cfa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cfa:	b580      	push	{r7, lr}
 8002cfc:	b082      	sub	sp, #8
 8002cfe:	af00      	add	r7, sp, #0
 8002d00:	4603      	mov	r3, r0
 8002d02:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d08:	4618      	mov	r0, r3
 8002d0a:	f7ff ff31 	bl	8002b70 <__NVIC_EnableIRQ>
}
 8002d0e:	bf00      	nop
 8002d10:	3708      	adds	r7, #8
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bd80      	pop	{r7, pc}

08002d16 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d16:	b580      	push	{r7, lr}
 8002d18:	b082      	sub	sp, #8
 8002d1a:	af00      	add	r7, sp, #0
 8002d1c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002d1e:	6878      	ldr	r0, [r7, #4]
 8002d20:	f7ff ffa2 	bl	8002c68 <SysTick_Config>
 8002d24:	4603      	mov	r3, r0
}
 8002d26:	4618      	mov	r0, r3
 8002d28:	3708      	adds	r7, #8
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bd80      	pop	{r7, pc}

08002d2e <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8002d2e:	b580      	push	{r7, lr}
 8002d30:	b084      	sub	sp, #16
 8002d32:	af00      	add	r7, sp, #0
 8002d34:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002d36:	2300      	movs	r3, #0
 8002d38:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d101      	bne.n	8002d44 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002d40:	2301      	movs	r3, #1
 8002d42:	e037      	b.n	8002db4 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2202      	movs	r2, #2
 8002d48:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002d5a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002d5e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002d68:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	68db      	ldr	r3, [r3, #12]
 8002d6e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d74:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	695b      	ldr	r3, [r3, #20]
 8002d7a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d80:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	69db      	ldr	r3, [r3, #28]
 8002d86:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002d88:	68fa      	ldr	r2, [r7, #12]
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	68fa      	ldr	r2, [r7, #12]
 8002d94:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8002d96:	6878      	ldr	r0, [r7, #4]
 8002d98:	f000 f97e 	bl	8003098 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2200      	movs	r2, #0
 8002da0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	2201      	movs	r2, #1
 8002da6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	2200      	movs	r2, #0
 8002dae:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8002db2:	2300      	movs	r3, #0
}  
 8002db4:	4618      	mov	r0, r3
 8002db6:	3710      	adds	r7, #16
 8002db8:	46bd      	mov	sp, r7
 8002dba:	bd80      	pop	{r7, pc}

08002dbc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b086      	sub	sp, #24
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	60f8      	str	r0, [r7, #12]
 8002dc4:	60b9      	str	r1, [r7, #8]
 8002dc6:	607a      	str	r2, [r7, #4]
 8002dc8:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8002dca:	2300      	movs	r3, #0
 8002dcc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002dd4:	2b01      	cmp	r3, #1
 8002dd6:	d101      	bne.n	8002ddc <HAL_DMA_Start_IT+0x20>
 8002dd8:	2302      	movs	r3, #2
 8002dda:	e04a      	b.n	8002e72 <HAL_DMA_Start_IT+0xb6>
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	2201      	movs	r2, #1
 8002de0:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002dea:	2b01      	cmp	r3, #1
 8002dec:	d13a      	bne.n	8002e64 <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	2202      	movs	r2, #2
 8002df2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	2200      	movs	r2, #0
 8002dfa:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	681a      	ldr	r2, [r3, #0]
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f022 0201 	bic.w	r2, r2, #1
 8002e0a:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	687a      	ldr	r2, [r7, #4]
 8002e10:	68b9      	ldr	r1, [r7, #8]
 8002e12:	68f8      	ldr	r0, [r7, #12]
 8002e14:	f000 f912 	bl	800303c <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d008      	beq.n	8002e32 <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	681a      	ldr	r2, [r3, #0]
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f042 020e 	orr.w	r2, r2, #14
 8002e2e:	601a      	str	r2, [r3, #0]
 8002e30:	e00f      	b.n	8002e52 <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	681a      	ldr	r2, [r3, #0]
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f042 020a 	orr.w	r2, r2, #10
 8002e40:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	681a      	ldr	r2, [r3, #0]
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f022 0204 	bic.w	r2, r2, #4
 8002e50:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	681a      	ldr	r2, [r3, #0]
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f042 0201 	orr.w	r2, r2, #1
 8002e60:	601a      	str	r2, [r3, #0]
 8002e62:	e005      	b.n	8002e70 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	2200      	movs	r2, #0
 8002e68:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8002e6c:	2302      	movs	r3, #2
 8002e6e:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 8002e70:	7dfb      	ldrb	r3, [r7, #23]
} 
 8002e72:	4618      	mov	r0, r3
 8002e74:	3718      	adds	r7, #24
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bd80      	pop	{r7, pc}

08002e7a <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002e7a:	b580      	push	{r7, lr}
 8002e7c:	b084      	sub	sp, #16
 8002e7e:	af00      	add	r7, sp, #0
 8002e80:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e82:	2300      	movs	r3, #0
 8002e84:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002e8c:	2b02      	cmp	r3, #2
 8002e8e:	d005      	beq.n	8002e9c <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2204      	movs	r2, #4
 8002e94:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002e96:	2301      	movs	r3, #1
 8002e98:	73fb      	strb	r3, [r7, #15]
 8002e9a:	e027      	b.n	8002eec <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	681a      	ldr	r2, [r3, #0]
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f022 020e 	bic.w	r2, r2, #14
 8002eaa:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	681a      	ldr	r2, [r3, #0]
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f022 0201 	bic.w	r2, r2, #1
 8002eba:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ec4:	2101      	movs	r1, #1
 8002ec6:	fa01 f202 	lsl.w	r2, r1, r2
 8002eca:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2201      	movs	r2, #1
 8002ed0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d003      	beq.n	8002eec <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ee8:	6878      	ldr	r0, [r7, #4]
 8002eea:	4798      	blx	r3
    } 
  }
  return status;
 8002eec:	7bfb      	ldrb	r3, [r7, #15]
}
 8002eee:	4618      	mov	r0, r3
 8002ef0:	3710      	adds	r7, #16
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bd80      	pop	{r7, pc}

08002ef6 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002ef6:	b580      	push	{r7, lr}
 8002ef8:	b084      	sub	sp, #16
 8002efa:	af00      	add	r7, sp, #0
 8002efc:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f12:	2204      	movs	r2, #4
 8002f14:	409a      	lsls	r2, r3
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	4013      	ands	r3, r2
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d024      	beq.n	8002f68 <HAL_DMA_IRQHandler+0x72>
 8002f1e:	68bb      	ldr	r3, [r7, #8]
 8002f20:	f003 0304 	and.w	r3, r3, #4
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d01f      	beq.n	8002f68 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f003 0320 	and.w	r3, r3, #32
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d107      	bne.n	8002f46 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	681a      	ldr	r2, [r3, #0]
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f022 0204 	bic.w	r2, r2, #4
 8002f44:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f4e:	2104      	movs	r1, #4
 8002f50:	fa01 f202 	lsl.w	r2, r1, r2
 8002f54:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d06a      	beq.n	8003034 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f62:	6878      	ldr	r0, [r7, #4]
 8002f64:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8002f66:	e065      	b.n	8003034 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f6c:	2202      	movs	r2, #2
 8002f6e:	409a      	lsls	r2, r3
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	4013      	ands	r3, r2
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d02c      	beq.n	8002fd2 <HAL_DMA_IRQHandler+0xdc>
 8002f78:	68bb      	ldr	r3, [r7, #8]
 8002f7a:	f003 0302 	and.w	r3, r3, #2
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d027      	beq.n	8002fd2 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f003 0320 	and.w	r3, r3, #32
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d10b      	bne.n	8002fa8 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	681a      	ldr	r2, [r3, #0]
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f022 020a 	bic.w	r2, r2, #10
 8002f9e:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2201      	movs	r2, #1
 8002fa4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fb0:	2102      	movs	r1, #2
 8002fb2:	fa01 f202 	lsl.w	r2, r1, r2
 8002fb6:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2200      	movs	r2, #0
 8002fbc:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d035      	beq.n	8003034 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fcc:	6878      	ldr	r0, [r7, #4]
 8002fce:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8002fd0:	e030      	b.n	8003034 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fd6:	2208      	movs	r2, #8
 8002fd8:	409a      	lsls	r2, r3
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	4013      	ands	r3, r2
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d028      	beq.n	8003034 <HAL_DMA_IRQHandler+0x13e>
 8002fe2:	68bb      	ldr	r3, [r7, #8]
 8002fe4:	f003 0308 	and.w	r3, r3, #8
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d023      	beq.n	8003034 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	681a      	ldr	r2, [r3, #0]
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f022 020e 	bic.w	r2, r2, #14
 8002ffa:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003004:	2101      	movs	r1, #1
 8003006:	fa01 f202 	lsl.w	r2, r1, r2
 800300a:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2201      	movs	r2, #1
 8003010:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2201      	movs	r2, #1
 8003016:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2200      	movs	r2, #0
 800301e:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003026:	2b00      	cmp	r3, #0
 8003028:	d004      	beq.n	8003034 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800302e:	6878      	ldr	r0, [r7, #4]
 8003030:	4798      	blx	r3
    }
  }
}  
 8003032:	e7ff      	b.n	8003034 <HAL_DMA_IRQHandler+0x13e>
 8003034:	bf00      	nop
 8003036:	3710      	adds	r7, #16
 8003038:	46bd      	mov	sp, r7
 800303a:	bd80      	pop	{r7, pc}

0800303c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800303c:	b480      	push	{r7}
 800303e:	b085      	sub	sp, #20
 8003040:	af00      	add	r7, sp, #0
 8003042:	60f8      	str	r0, [r7, #12]
 8003044:	60b9      	str	r1, [r7, #8]
 8003046:	607a      	str	r2, [r7, #4]
 8003048:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003052:	2101      	movs	r1, #1
 8003054:	fa01 f202 	lsl.w	r2, r1, r2
 8003058:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	683a      	ldr	r2, [r7, #0]
 8003060:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	685b      	ldr	r3, [r3, #4]
 8003066:	2b10      	cmp	r3, #16
 8003068:	d108      	bne.n	800307c <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	687a      	ldr	r2, [r7, #4]
 8003070:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	68ba      	ldr	r2, [r7, #8]
 8003078:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800307a:	e007      	b.n	800308c <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	68ba      	ldr	r2, [r7, #8]
 8003082:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	687a      	ldr	r2, [r7, #4]
 800308a:	60da      	str	r2, [r3, #12]
}
 800308c:	bf00      	nop
 800308e:	3714      	adds	r7, #20
 8003090:	46bd      	mov	sp, r7
 8003092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003096:	4770      	bx	lr

08003098 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003098:	b480      	push	{r7}
 800309a:	b083      	sub	sp, #12
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	461a      	mov	r2, r3
 80030a6:	4b09      	ldr	r3, [pc, #36]	; (80030cc <DMA_CalcBaseAndBitshift+0x34>)
 80030a8:	4413      	add	r3, r2
 80030aa:	4a09      	ldr	r2, [pc, #36]	; (80030d0 <DMA_CalcBaseAndBitshift+0x38>)
 80030ac:	fba2 2303 	umull	r2, r3, r2, r3
 80030b0:	091b      	lsrs	r3, r3, #4
 80030b2:	009a      	lsls	r2, r3, #2
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	4a06      	ldr	r2, [pc, #24]	; (80030d4 <DMA_CalcBaseAndBitshift+0x3c>)
 80030bc:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 80030be:	bf00      	nop
 80030c0:	370c      	adds	r7, #12
 80030c2:	46bd      	mov	sp, r7
 80030c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c8:	4770      	bx	lr
 80030ca:	bf00      	nop
 80030cc:	bffdfff8 	.word	0xbffdfff8
 80030d0:	cccccccd 	.word	0xcccccccd
 80030d4:	40020000 	.word	0x40020000

080030d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80030d8:	b480      	push	{r7}
 80030da:	b087      	sub	sp, #28
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
 80030e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80030e2:	2300      	movs	r3, #0
 80030e4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80030e6:	e14e      	b.n	8003386 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	681a      	ldr	r2, [r3, #0]
 80030ec:	2101      	movs	r1, #1
 80030ee:	697b      	ldr	r3, [r7, #20]
 80030f0:	fa01 f303 	lsl.w	r3, r1, r3
 80030f4:	4013      	ands	r3, r2
 80030f6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	f000 8140 	beq.w	8003380 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	2b02      	cmp	r3, #2
 8003106:	d003      	beq.n	8003110 <HAL_GPIO_Init+0x38>
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	2b12      	cmp	r3, #18
 800310e:	d123      	bne.n	8003158 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003110:	697b      	ldr	r3, [r7, #20]
 8003112:	08da      	lsrs	r2, r3, #3
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	3208      	adds	r2, #8
 8003118:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800311c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800311e:	697b      	ldr	r3, [r7, #20]
 8003120:	f003 0307 	and.w	r3, r3, #7
 8003124:	009b      	lsls	r3, r3, #2
 8003126:	220f      	movs	r2, #15
 8003128:	fa02 f303 	lsl.w	r3, r2, r3
 800312c:	43db      	mvns	r3, r3
 800312e:	693a      	ldr	r2, [r7, #16]
 8003130:	4013      	ands	r3, r2
 8003132:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	691a      	ldr	r2, [r3, #16]
 8003138:	697b      	ldr	r3, [r7, #20]
 800313a:	f003 0307 	and.w	r3, r3, #7
 800313e:	009b      	lsls	r3, r3, #2
 8003140:	fa02 f303 	lsl.w	r3, r2, r3
 8003144:	693a      	ldr	r2, [r7, #16]
 8003146:	4313      	orrs	r3, r2
 8003148:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800314a:	697b      	ldr	r3, [r7, #20]
 800314c:	08da      	lsrs	r2, r3, #3
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	3208      	adds	r2, #8
 8003152:	6939      	ldr	r1, [r7, #16]
 8003154:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800315e:	697b      	ldr	r3, [r7, #20]
 8003160:	005b      	lsls	r3, r3, #1
 8003162:	2203      	movs	r2, #3
 8003164:	fa02 f303 	lsl.w	r3, r2, r3
 8003168:	43db      	mvns	r3, r3
 800316a:	693a      	ldr	r2, [r7, #16]
 800316c:	4013      	ands	r3, r2
 800316e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	685b      	ldr	r3, [r3, #4]
 8003174:	f003 0203 	and.w	r2, r3, #3
 8003178:	697b      	ldr	r3, [r7, #20]
 800317a:	005b      	lsls	r3, r3, #1
 800317c:	fa02 f303 	lsl.w	r3, r2, r3
 8003180:	693a      	ldr	r2, [r7, #16]
 8003182:	4313      	orrs	r3, r2
 8003184:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	693a      	ldr	r2, [r7, #16]
 800318a:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	2b01      	cmp	r3, #1
 8003192:	d00b      	beq.n	80031ac <HAL_GPIO_Init+0xd4>
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	2b02      	cmp	r3, #2
 800319a:	d007      	beq.n	80031ac <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80031a0:	2b11      	cmp	r3, #17
 80031a2:	d003      	beq.n	80031ac <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	685b      	ldr	r3, [r3, #4]
 80031a8:	2b12      	cmp	r3, #18
 80031aa:	d130      	bne.n	800320e <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	689b      	ldr	r3, [r3, #8]
 80031b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80031b2:	697b      	ldr	r3, [r7, #20]
 80031b4:	005b      	lsls	r3, r3, #1
 80031b6:	2203      	movs	r2, #3
 80031b8:	fa02 f303 	lsl.w	r3, r2, r3
 80031bc:	43db      	mvns	r3, r3
 80031be:	693a      	ldr	r2, [r7, #16]
 80031c0:	4013      	ands	r3, r2
 80031c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	68da      	ldr	r2, [r3, #12]
 80031c8:	697b      	ldr	r3, [r7, #20]
 80031ca:	005b      	lsls	r3, r3, #1
 80031cc:	fa02 f303 	lsl.w	r3, r2, r3
 80031d0:	693a      	ldr	r2, [r7, #16]
 80031d2:	4313      	orrs	r3, r2
 80031d4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	693a      	ldr	r2, [r7, #16]
 80031da:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80031e2:	2201      	movs	r2, #1
 80031e4:	697b      	ldr	r3, [r7, #20]
 80031e6:	fa02 f303 	lsl.w	r3, r2, r3
 80031ea:	43db      	mvns	r3, r3
 80031ec:	693a      	ldr	r2, [r7, #16]
 80031ee:	4013      	ands	r3, r2
 80031f0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	685b      	ldr	r3, [r3, #4]
 80031f6:	091b      	lsrs	r3, r3, #4
 80031f8:	f003 0201 	and.w	r2, r3, #1
 80031fc:	697b      	ldr	r3, [r7, #20]
 80031fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003202:	693a      	ldr	r2, [r7, #16]
 8003204:	4313      	orrs	r3, r2
 8003206:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	693a      	ldr	r2, [r7, #16]
 800320c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	68db      	ldr	r3, [r3, #12]
 8003212:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003214:	697b      	ldr	r3, [r7, #20]
 8003216:	005b      	lsls	r3, r3, #1
 8003218:	2203      	movs	r2, #3
 800321a:	fa02 f303 	lsl.w	r3, r2, r3
 800321e:	43db      	mvns	r3, r3
 8003220:	693a      	ldr	r2, [r7, #16]
 8003222:	4013      	ands	r3, r2
 8003224:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	689a      	ldr	r2, [r3, #8]
 800322a:	697b      	ldr	r3, [r7, #20]
 800322c:	005b      	lsls	r3, r3, #1
 800322e:	fa02 f303 	lsl.w	r3, r2, r3
 8003232:	693a      	ldr	r2, [r7, #16]
 8003234:	4313      	orrs	r3, r2
 8003236:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	693a      	ldr	r2, [r7, #16]
 800323c:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	685b      	ldr	r3, [r3, #4]
 8003242:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003246:	2b00      	cmp	r3, #0
 8003248:	f000 809a 	beq.w	8003380 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800324c:	4b55      	ldr	r3, [pc, #340]	; (80033a4 <HAL_GPIO_Init+0x2cc>)
 800324e:	699b      	ldr	r3, [r3, #24]
 8003250:	4a54      	ldr	r2, [pc, #336]	; (80033a4 <HAL_GPIO_Init+0x2cc>)
 8003252:	f043 0301 	orr.w	r3, r3, #1
 8003256:	6193      	str	r3, [r2, #24]
 8003258:	4b52      	ldr	r3, [pc, #328]	; (80033a4 <HAL_GPIO_Init+0x2cc>)
 800325a:	699b      	ldr	r3, [r3, #24]
 800325c:	f003 0301 	and.w	r3, r3, #1
 8003260:	60bb      	str	r3, [r7, #8]
 8003262:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003264:	4a50      	ldr	r2, [pc, #320]	; (80033a8 <HAL_GPIO_Init+0x2d0>)
 8003266:	697b      	ldr	r3, [r7, #20]
 8003268:	089b      	lsrs	r3, r3, #2
 800326a:	3302      	adds	r3, #2
 800326c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003270:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003272:	697b      	ldr	r3, [r7, #20]
 8003274:	f003 0303 	and.w	r3, r3, #3
 8003278:	009b      	lsls	r3, r3, #2
 800327a:	220f      	movs	r2, #15
 800327c:	fa02 f303 	lsl.w	r3, r2, r3
 8003280:	43db      	mvns	r3, r3
 8003282:	693a      	ldr	r2, [r7, #16]
 8003284:	4013      	ands	r3, r2
 8003286:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800328e:	d013      	beq.n	80032b8 <HAL_GPIO_Init+0x1e0>
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	4a46      	ldr	r2, [pc, #280]	; (80033ac <HAL_GPIO_Init+0x2d4>)
 8003294:	4293      	cmp	r3, r2
 8003296:	d00d      	beq.n	80032b4 <HAL_GPIO_Init+0x1dc>
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	4a45      	ldr	r2, [pc, #276]	; (80033b0 <HAL_GPIO_Init+0x2d8>)
 800329c:	4293      	cmp	r3, r2
 800329e:	d007      	beq.n	80032b0 <HAL_GPIO_Init+0x1d8>
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	4a44      	ldr	r2, [pc, #272]	; (80033b4 <HAL_GPIO_Init+0x2dc>)
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d101      	bne.n	80032ac <HAL_GPIO_Init+0x1d4>
 80032a8:	2303      	movs	r3, #3
 80032aa:	e006      	b.n	80032ba <HAL_GPIO_Init+0x1e2>
 80032ac:	2305      	movs	r3, #5
 80032ae:	e004      	b.n	80032ba <HAL_GPIO_Init+0x1e2>
 80032b0:	2302      	movs	r3, #2
 80032b2:	e002      	b.n	80032ba <HAL_GPIO_Init+0x1e2>
 80032b4:	2301      	movs	r3, #1
 80032b6:	e000      	b.n	80032ba <HAL_GPIO_Init+0x1e2>
 80032b8:	2300      	movs	r3, #0
 80032ba:	697a      	ldr	r2, [r7, #20]
 80032bc:	f002 0203 	and.w	r2, r2, #3
 80032c0:	0092      	lsls	r2, r2, #2
 80032c2:	4093      	lsls	r3, r2
 80032c4:	693a      	ldr	r2, [r7, #16]
 80032c6:	4313      	orrs	r3, r2
 80032c8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80032ca:	4937      	ldr	r1, [pc, #220]	; (80033a8 <HAL_GPIO_Init+0x2d0>)
 80032cc:	697b      	ldr	r3, [r7, #20]
 80032ce:	089b      	lsrs	r3, r3, #2
 80032d0:	3302      	adds	r3, #2
 80032d2:	693a      	ldr	r2, [r7, #16]
 80032d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80032d8:	4b37      	ldr	r3, [pc, #220]	; (80033b8 <HAL_GPIO_Init+0x2e0>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	43db      	mvns	r3, r3
 80032e2:	693a      	ldr	r2, [r7, #16]
 80032e4:	4013      	ands	r3, r2
 80032e6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d003      	beq.n	80032fc <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 80032f4:	693a      	ldr	r2, [r7, #16]
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	4313      	orrs	r3, r2
 80032fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80032fc:	4a2e      	ldr	r2, [pc, #184]	; (80033b8 <HAL_GPIO_Init+0x2e0>)
 80032fe:	693b      	ldr	r3, [r7, #16]
 8003300:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003302:	4b2d      	ldr	r3, [pc, #180]	; (80033b8 <HAL_GPIO_Init+0x2e0>)
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	43db      	mvns	r3, r3
 800330c:	693a      	ldr	r2, [r7, #16]
 800330e:	4013      	ands	r3, r2
 8003310:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	685b      	ldr	r3, [r3, #4]
 8003316:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800331a:	2b00      	cmp	r3, #0
 800331c:	d003      	beq.n	8003326 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 800331e:	693a      	ldr	r2, [r7, #16]
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	4313      	orrs	r3, r2
 8003324:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003326:	4a24      	ldr	r2, [pc, #144]	; (80033b8 <HAL_GPIO_Init+0x2e0>)
 8003328:	693b      	ldr	r3, [r7, #16]
 800332a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800332c:	4b22      	ldr	r3, [pc, #136]	; (80033b8 <HAL_GPIO_Init+0x2e0>)
 800332e:	689b      	ldr	r3, [r3, #8]
 8003330:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	43db      	mvns	r3, r3
 8003336:	693a      	ldr	r2, [r7, #16]
 8003338:	4013      	ands	r3, r2
 800333a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	685b      	ldr	r3, [r3, #4]
 8003340:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003344:	2b00      	cmp	r3, #0
 8003346:	d003      	beq.n	8003350 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8003348:	693a      	ldr	r2, [r7, #16]
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	4313      	orrs	r3, r2
 800334e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003350:	4a19      	ldr	r2, [pc, #100]	; (80033b8 <HAL_GPIO_Init+0x2e0>)
 8003352:	693b      	ldr	r3, [r7, #16]
 8003354:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003356:	4b18      	ldr	r3, [pc, #96]	; (80033b8 <HAL_GPIO_Init+0x2e0>)
 8003358:	68db      	ldr	r3, [r3, #12]
 800335a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	43db      	mvns	r3, r3
 8003360:	693a      	ldr	r2, [r7, #16]
 8003362:	4013      	ands	r3, r2
 8003364:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	685b      	ldr	r3, [r3, #4]
 800336a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800336e:	2b00      	cmp	r3, #0
 8003370:	d003      	beq.n	800337a <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8003372:	693a      	ldr	r2, [r7, #16]
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	4313      	orrs	r3, r2
 8003378:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800337a:	4a0f      	ldr	r2, [pc, #60]	; (80033b8 <HAL_GPIO_Init+0x2e0>)
 800337c:	693b      	ldr	r3, [r7, #16]
 800337e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8003380:	697b      	ldr	r3, [r7, #20]
 8003382:	3301      	adds	r3, #1
 8003384:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	681a      	ldr	r2, [r3, #0]
 800338a:	697b      	ldr	r3, [r7, #20]
 800338c:	fa22 f303 	lsr.w	r3, r2, r3
 8003390:	2b00      	cmp	r3, #0
 8003392:	f47f aea9 	bne.w	80030e8 <HAL_GPIO_Init+0x10>
  }
}
 8003396:	bf00      	nop
 8003398:	371c      	adds	r7, #28
 800339a:	46bd      	mov	sp, r7
 800339c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a0:	4770      	bx	lr
 80033a2:	bf00      	nop
 80033a4:	40021000 	.word	0x40021000
 80033a8:	40010000 	.word	0x40010000
 80033ac:	48000400 	.word	0x48000400
 80033b0:	48000800 	.word	0x48000800
 80033b4:	48000c00 	.word	0x48000c00
 80033b8:	40010400 	.word	0x40010400

080033bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80033bc:	b480      	push	{r7}
 80033be:	b083      	sub	sp, #12
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
 80033c4:	460b      	mov	r3, r1
 80033c6:	807b      	strh	r3, [r7, #2]
 80033c8:	4613      	mov	r3, r2
 80033ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80033cc:	787b      	ldrb	r3, [r7, #1]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d003      	beq.n	80033da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80033d2:	887a      	ldrh	r2, [r7, #2]
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80033d8:	e002      	b.n	80033e0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80033da:	887a      	ldrh	r2, [r7, #2]
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	629a      	str	r2, [r3, #40]	; 0x28
}
 80033e0:	bf00      	nop
 80033e2:	370c      	adds	r7, #12
 80033e4:	46bd      	mov	sp, r7
 80033e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ea:	4770      	bx	lr

080033ec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80033f2:	af00      	add	r7, sp, #0
 80033f4:	1d3b      	adds	r3, r7, #4
 80033f6:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80033f8:	1d3b      	adds	r3, r7, #4
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d102      	bne.n	8003406 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8003400:	2301      	movs	r3, #1
 8003402:	f000 bef4 	b.w	80041ee <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003406:	1d3b      	adds	r3, r7, #4
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f003 0301 	and.w	r3, r3, #1
 8003410:	2b00      	cmp	r3, #0
 8003412:	f000 816a 	beq.w	80036ea <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003416:	4bb3      	ldr	r3, [pc, #716]	; (80036e4 <HAL_RCC_OscConfig+0x2f8>)
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	f003 030c 	and.w	r3, r3, #12
 800341e:	2b04      	cmp	r3, #4
 8003420:	d00c      	beq.n	800343c <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003422:	4bb0      	ldr	r3, [pc, #704]	; (80036e4 <HAL_RCC_OscConfig+0x2f8>)
 8003424:	685b      	ldr	r3, [r3, #4]
 8003426:	f003 030c 	and.w	r3, r3, #12
 800342a:	2b08      	cmp	r3, #8
 800342c:	d159      	bne.n	80034e2 <HAL_RCC_OscConfig+0xf6>
 800342e:	4bad      	ldr	r3, [pc, #692]	; (80036e4 <HAL_RCC_OscConfig+0x2f8>)
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003436:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800343a:	d152      	bne.n	80034e2 <HAL_RCC_OscConfig+0xf6>
 800343c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003440:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003444:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8003448:	fa93 f3a3 	rbit	r3, r3
 800344c:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003450:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003454:	fab3 f383 	clz	r3, r3
 8003458:	b2db      	uxtb	r3, r3
 800345a:	095b      	lsrs	r3, r3, #5
 800345c:	b2db      	uxtb	r3, r3
 800345e:	f043 0301 	orr.w	r3, r3, #1
 8003462:	b2db      	uxtb	r3, r3
 8003464:	2b01      	cmp	r3, #1
 8003466:	d102      	bne.n	800346e <HAL_RCC_OscConfig+0x82>
 8003468:	4b9e      	ldr	r3, [pc, #632]	; (80036e4 <HAL_RCC_OscConfig+0x2f8>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	e015      	b.n	800349a <HAL_RCC_OscConfig+0xae>
 800346e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003472:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003476:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 800347a:	fa93 f3a3 	rbit	r3, r3
 800347e:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8003482:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003486:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 800348a:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800348e:	fa93 f3a3 	rbit	r3, r3
 8003492:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8003496:	4b93      	ldr	r3, [pc, #588]	; (80036e4 <HAL_RCC_OscConfig+0x2f8>)
 8003498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800349a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800349e:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80034a2:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80034a6:	fa92 f2a2 	rbit	r2, r2
 80034aa:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80034ae:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80034b2:	fab2 f282 	clz	r2, r2
 80034b6:	b2d2      	uxtb	r2, r2
 80034b8:	f042 0220 	orr.w	r2, r2, #32
 80034bc:	b2d2      	uxtb	r2, r2
 80034be:	f002 021f 	and.w	r2, r2, #31
 80034c2:	2101      	movs	r1, #1
 80034c4:	fa01 f202 	lsl.w	r2, r1, r2
 80034c8:	4013      	ands	r3, r2
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	f000 810c 	beq.w	80036e8 <HAL_RCC_OscConfig+0x2fc>
 80034d0:	1d3b      	adds	r3, r7, #4
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	685b      	ldr	r3, [r3, #4]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	f040 8106 	bne.w	80036e8 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 80034dc:	2301      	movs	r3, #1
 80034de:	f000 be86 	b.w	80041ee <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80034e2:	1d3b      	adds	r3, r7, #4
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034ec:	d106      	bne.n	80034fc <HAL_RCC_OscConfig+0x110>
 80034ee:	4b7d      	ldr	r3, [pc, #500]	; (80036e4 <HAL_RCC_OscConfig+0x2f8>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4a7c      	ldr	r2, [pc, #496]	; (80036e4 <HAL_RCC_OscConfig+0x2f8>)
 80034f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034f8:	6013      	str	r3, [r2, #0]
 80034fa:	e030      	b.n	800355e <HAL_RCC_OscConfig+0x172>
 80034fc:	1d3b      	adds	r3, r7, #4
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	685b      	ldr	r3, [r3, #4]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d10c      	bne.n	8003520 <HAL_RCC_OscConfig+0x134>
 8003506:	4b77      	ldr	r3, [pc, #476]	; (80036e4 <HAL_RCC_OscConfig+0x2f8>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4a76      	ldr	r2, [pc, #472]	; (80036e4 <HAL_RCC_OscConfig+0x2f8>)
 800350c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003510:	6013      	str	r3, [r2, #0]
 8003512:	4b74      	ldr	r3, [pc, #464]	; (80036e4 <HAL_RCC_OscConfig+0x2f8>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	4a73      	ldr	r2, [pc, #460]	; (80036e4 <HAL_RCC_OscConfig+0x2f8>)
 8003518:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800351c:	6013      	str	r3, [r2, #0]
 800351e:	e01e      	b.n	800355e <HAL_RCC_OscConfig+0x172>
 8003520:	1d3b      	adds	r3, r7, #4
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800352a:	d10c      	bne.n	8003546 <HAL_RCC_OscConfig+0x15a>
 800352c:	4b6d      	ldr	r3, [pc, #436]	; (80036e4 <HAL_RCC_OscConfig+0x2f8>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4a6c      	ldr	r2, [pc, #432]	; (80036e4 <HAL_RCC_OscConfig+0x2f8>)
 8003532:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003536:	6013      	str	r3, [r2, #0]
 8003538:	4b6a      	ldr	r3, [pc, #424]	; (80036e4 <HAL_RCC_OscConfig+0x2f8>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4a69      	ldr	r2, [pc, #420]	; (80036e4 <HAL_RCC_OscConfig+0x2f8>)
 800353e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003542:	6013      	str	r3, [r2, #0]
 8003544:	e00b      	b.n	800355e <HAL_RCC_OscConfig+0x172>
 8003546:	4b67      	ldr	r3, [pc, #412]	; (80036e4 <HAL_RCC_OscConfig+0x2f8>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4a66      	ldr	r2, [pc, #408]	; (80036e4 <HAL_RCC_OscConfig+0x2f8>)
 800354c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003550:	6013      	str	r3, [r2, #0]
 8003552:	4b64      	ldr	r3, [pc, #400]	; (80036e4 <HAL_RCC_OscConfig+0x2f8>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4a63      	ldr	r2, [pc, #396]	; (80036e4 <HAL_RCC_OscConfig+0x2f8>)
 8003558:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800355c:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800355e:	4b61      	ldr	r3, [pc, #388]	; (80036e4 <HAL_RCC_OscConfig+0x2f8>)
 8003560:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003562:	f023 020f 	bic.w	r2, r3, #15
 8003566:	1d3b      	adds	r3, r7, #4
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	689b      	ldr	r3, [r3, #8]
 800356c:	495d      	ldr	r1, [pc, #372]	; (80036e4 <HAL_RCC_OscConfig+0x2f8>)
 800356e:	4313      	orrs	r3, r2
 8003570:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003572:	1d3b      	adds	r3, r7, #4
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	685b      	ldr	r3, [r3, #4]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d059      	beq.n	8003630 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800357c:	f7ff fa98 	bl	8002ab0 <HAL_GetTick>
 8003580:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003584:	e00a      	b.n	800359c <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003586:	f7ff fa93 	bl	8002ab0 <HAL_GetTick>
 800358a:	4602      	mov	r2, r0
 800358c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003590:	1ad3      	subs	r3, r2, r3
 8003592:	2b64      	cmp	r3, #100	; 0x64
 8003594:	d902      	bls.n	800359c <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8003596:	2303      	movs	r3, #3
 8003598:	f000 be29 	b.w	80041ee <HAL_RCC_OscConfig+0xe02>
 800359c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80035a0:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035a4:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80035a8:	fa93 f3a3 	rbit	r3, r3
 80035ac:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80035b0:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035b4:	fab3 f383 	clz	r3, r3
 80035b8:	b2db      	uxtb	r3, r3
 80035ba:	095b      	lsrs	r3, r3, #5
 80035bc:	b2db      	uxtb	r3, r3
 80035be:	f043 0301 	orr.w	r3, r3, #1
 80035c2:	b2db      	uxtb	r3, r3
 80035c4:	2b01      	cmp	r3, #1
 80035c6:	d102      	bne.n	80035ce <HAL_RCC_OscConfig+0x1e2>
 80035c8:	4b46      	ldr	r3, [pc, #280]	; (80036e4 <HAL_RCC_OscConfig+0x2f8>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	e015      	b.n	80035fa <HAL_RCC_OscConfig+0x20e>
 80035ce:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80035d2:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035d6:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80035da:	fa93 f3a3 	rbit	r3, r3
 80035de:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80035e2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80035e6:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80035ea:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80035ee:	fa93 f3a3 	rbit	r3, r3
 80035f2:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80035f6:	4b3b      	ldr	r3, [pc, #236]	; (80036e4 <HAL_RCC_OscConfig+0x2f8>)
 80035f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035fa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80035fe:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8003602:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8003606:	fa92 f2a2 	rbit	r2, r2
 800360a:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 800360e:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8003612:	fab2 f282 	clz	r2, r2
 8003616:	b2d2      	uxtb	r2, r2
 8003618:	f042 0220 	orr.w	r2, r2, #32
 800361c:	b2d2      	uxtb	r2, r2
 800361e:	f002 021f 	and.w	r2, r2, #31
 8003622:	2101      	movs	r1, #1
 8003624:	fa01 f202 	lsl.w	r2, r1, r2
 8003628:	4013      	ands	r3, r2
 800362a:	2b00      	cmp	r3, #0
 800362c:	d0ab      	beq.n	8003586 <HAL_RCC_OscConfig+0x19a>
 800362e:	e05c      	b.n	80036ea <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003630:	f7ff fa3e 	bl	8002ab0 <HAL_GetTick>
 8003634:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003638:	e00a      	b.n	8003650 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800363a:	f7ff fa39 	bl	8002ab0 <HAL_GetTick>
 800363e:	4602      	mov	r2, r0
 8003640:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003644:	1ad3      	subs	r3, r2, r3
 8003646:	2b64      	cmp	r3, #100	; 0x64
 8003648:	d902      	bls.n	8003650 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 800364a:	2303      	movs	r3, #3
 800364c:	f000 bdcf 	b.w	80041ee <HAL_RCC_OscConfig+0xe02>
 8003650:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003654:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003658:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800365c:	fa93 f3a3 	rbit	r3, r3
 8003660:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8003664:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003668:	fab3 f383 	clz	r3, r3
 800366c:	b2db      	uxtb	r3, r3
 800366e:	095b      	lsrs	r3, r3, #5
 8003670:	b2db      	uxtb	r3, r3
 8003672:	f043 0301 	orr.w	r3, r3, #1
 8003676:	b2db      	uxtb	r3, r3
 8003678:	2b01      	cmp	r3, #1
 800367a:	d102      	bne.n	8003682 <HAL_RCC_OscConfig+0x296>
 800367c:	4b19      	ldr	r3, [pc, #100]	; (80036e4 <HAL_RCC_OscConfig+0x2f8>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	e015      	b.n	80036ae <HAL_RCC_OscConfig+0x2c2>
 8003682:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003686:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800368a:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800368e:	fa93 f3a3 	rbit	r3, r3
 8003692:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8003696:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800369a:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800369e:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80036a2:	fa93 f3a3 	rbit	r3, r3
 80036a6:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80036aa:	4b0e      	ldr	r3, [pc, #56]	; (80036e4 <HAL_RCC_OscConfig+0x2f8>)
 80036ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ae:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80036b2:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80036b6:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80036ba:	fa92 f2a2 	rbit	r2, r2
 80036be:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80036c2:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80036c6:	fab2 f282 	clz	r2, r2
 80036ca:	b2d2      	uxtb	r2, r2
 80036cc:	f042 0220 	orr.w	r2, r2, #32
 80036d0:	b2d2      	uxtb	r2, r2
 80036d2:	f002 021f 	and.w	r2, r2, #31
 80036d6:	2101      	movs	r1, #1
 80036d8:	fa01 f202 	lsl.w	r2, r1, r2
 80036dc:	4013      	ands	r3, r2
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d1ab      	bne.n	800363a <HAL_RCC_OscConfig+0x24e>
 80036e2:	e002      	b.n	80036ea <HAL_RCC_OscConfig+0x2fe>
 80036e4:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80036ea:	1d3b      	adds	r3, r7, #4
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f003 0302 	and.w	r3, r3, #2
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	f000 816f 	beq.w	80039d8 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80036fa:	4bd0      	ldr	r3, [pc, #832]	; (8003a3c <HAL_RCC_OscConfig+0x650>)
 80036fc:	685b      	ldr	r3, [r3, #4]
 80036fe:	f003 030c 	and.w	r3, r3, #12
 8003702:	2b00      	cmp	r3, #0
 8003704:	d00b      	beq.n	800371e <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003706:	4bcd      	ldr	r3, [pc, #820]	; (8003a3c <HAL_RCC_OscConfig+0x650>)
 8003708:	685b      	ldr	r3, [r3, #4]
 800370a:	f003 030c 	and.w	r3, r3, #12
 800370e:	2b08      	cmp	r3, #8
 8003710:	d16c      	bne.n	80037ec <HAL_RCC_OscConfig+0x400>
 8003712:	4bca      	ldr	r3, [pc, #808]	; (8003a3c <HAL_RCC_OscConfig+0x650>)
 8003714:	685b      	ldr	r3, [r3, #4]
 8003716:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800371a:	2b00      	cmp	r3, #0
 800371c:	d166      	bne.n	80037ec <HAL_RCC_OscConfig+0x400>
 800371e:	2302      	movs	r3, #2
 8003720:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003724:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8003728:	fa93 f3a3 	rbit	r3, r3
 800372c:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8003730:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003734:	fab3 f383 	clz	r3, r3
 8003738:	b2db      	uxtb	r3, r3
 800373a:	095b      	lsrs	r3, r3, #5
 800373c:	b2db      	uxtb	r3, r3
 800373e:	f043 0301 	orr.w	r3, r3, #1
 8003742:	b2db      	uxtb	r3, r3
 8003744:	2b01      	cmp	r3, #1
 8003746:	d102      	bne.n	800374e <HAL_RCC_OscConfig+0x362>
 8003748:	4bbc      	ldr	r3, [pc, #752]	; (8003a3c <HAL_RCC_OscConfig+0x650>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	e013      	b.n	8003776 <HAL_RCC_OscConfig+0x38a>
 800374e:	2302      	movs	r3, #2
 8003750:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003754:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8003758:	fa93 f3a3 	rbit	r3, r3
 800375c:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8003760:	2302      	movs	r3, #2
 8003762:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8003766:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800376a:	fa93 f3a3 	rbit	r3, r3
 800376e:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8003772:	4bb2      	ldr	r3, [pc, #712]	; (8003a3c <HAL_RCC_OscConfig+0x650>)
 8003774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003776:	2202      	movs	r2, #2
 8003778:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 800377c:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8003780:	fa92 f2a2 	rbit	r2, r2
 8003784:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8003788:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 800378c:	fab2 f282 	clz	r2, r2
 8003790:	b2d2      	uxtb	r2, r2
 8003792:	f042 0220 	orr.w	r2, r2, #32
 8003796:	b2d2      	uxtb	r2, r2
 8003798:	f002 021f 	and.w	r2, r2, #31
 800379c:	2101      	movs	r1, #1
 800379e:	fa01 f202 	lsl.w	r2, r1, r2
 80037a2:	4013      	ands	r3, r2
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d007      	beq.n	80037b8 <HAL_RCC_OscConfig+0x3cc>
 80037a8:	1d3b      	adds	r3, r7, #4
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	691b      	ldr	r3, [r3, #16]
 80037ae:	2b01      	cmp	r3, #1
 80037b0:	d002      	beq.n	80037b8 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 80037b2:	2301      	movs	r3, #1
 80037b4:	f000 bd1b 	b.w	80041ee <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037b8:	4ba0      	ldr	r3, [pc, #640]	; (8003a3c <HAL_RCC_OscConfig+0x650>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80037c0:	1d3b      	adds	r3, r7, #4
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	695b      	ldr	r3, [r3, #20]
 80037c6:	21f8      	movs	r1, #248	; 0xf8
 80037c8:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037cc:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80037d0:	fa91 f1a1 	rbit	r1, r1
 80037d4:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80037d8:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80037dc:	fab1 f181 	clz	r1, r1
 80037e0:	b2c9      	uxtb	r1, r1
 80037e2:	408b      	lsls	r3, r1
 80037e4:	4995      	ldr	r1, [pc, #596]	; (8003a3c <HAL_RCC_OscConfig+0x650>)
 80037e6:	4313      	orrs	r3, r2
 80037e8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037ea:	e0f5      	b.n	80039d8 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80037ec:	1d3b      	adds	r3, r7, #4
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	691b      	ldr	r3, [r3, #16]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	f000 8085 	beq.w	8003902 <HAL_RCC_OscConfig+0x516>
 80037f8:	2301      	movs	r3, #1
 80037fa:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037fe:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8003802:	fa93 f3a3 	rbit	r3, r3
 8003806:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 800380a:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800380e:	fab3 f383 	clz	r3, r3
 8003812:	b2db      	uxtb	r3, r3
 8003814:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003818:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800381c:	009b      	lsls	r3, r3, #2
 800381e:	461a      	mov	r2, r3
 8003820:	2301      	movs	r3, #1
 8003822:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003824:	f7ff f944 	bl	8002ab0 <HAL_GetTick>
 8003828:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800382c:	e00a      	b.n	8003844 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800382e:	f7ff f93f 	bl	8002ab0 <HAL_GetTick>
 8003832:	4602      	mov	r2, r0
 8003834:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003838:	1ad3      	subs	r3, r2, r3
 800383a:	2b02      	cmp	r3, #2
 800383c:	d902      	bls.n	8003844 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 800383e:	2303      	movs	r3, #3
 8003840:	f000 bcd5 	b.w	80041ee <HAL_RCC_OscConfig+0xe02>
 8003844:	2302      	movs	r3, #2
 8003846:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800384a:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800384e:	fa93 f3a3 	rbit	r3, r3
 8003852:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8003856:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800385a:	fab3 f383 	clz	r3, r3
 800385e:	b2db      	uxtb	r3, r3
 8003860:	095b      	lsrs	r3, r3, #5
 8003862:	b2db      	uxtb	r3, r3
 8003864:	f043 0301 	orr.w	r3, r3, #1
 8003868:	b2db      	uxtb	r3, r3
 800386a:	2b01      	cmp	r3, #1
 800386c:	d102      	bne.n	8003874 <HAL_RCC_OscConfig+0x488>
 800386e:	4b73      	ldr	r3, [pc, #460]	; (8003a3c <HAL_RCC_OscConfig+0x650>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	e013      	b.n	800389c <HAL_RCC_OscConfig+0x4b0>
 8003874:	2302      	movs	r3, #2
 8003876:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800387a:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800387e:	fa93 f3a3 	rbit	r3, r3
 8003882:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8003886:	2302      	movs	r3, #2
 8003888:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800388c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8003890:	fa93 f3a3 	rbit	r3, r3
 8003894:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8003898:	4b68      	ldr	r3, [pc, #416]	; (8003a3c <HAL_RCC_OscConfig+0x650>)
 800389a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800389c:	2202      	movs	r2, #2
 800389e:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80038a2:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80038a6:	fa92 f2a2 	rbit	r2, r2
 80038aa:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80038ae:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80038b2:	fab2 f282 	clz	r2, r2
 80038b6:	b2d2      	uxtb	r2, r2
 80038b8:	f042 0220 	orr.w	r2, r2, #32
 80038bc:	b2d2      	uxtb	r2, r2
 80038be:	f002 021f 	and.w	r2, r2, #31
 80038c2:	2101      	movs	r1, #1
 80038c4:	fa01 f202 	lsl.w	r2, r1, r2
 80038c8:	4013      	ands	r3, r2
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d0af      	beq.n	800382e <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038ce:	4b5b      	ldr	r3, [pc, #364]	; (8003a3c <HAL_RCC_OscConfig+0x650>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80038d6:	1d3b      	adds	r3, r7, #4
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	695b      	ldr	r3, [r3, #20]
 80038dc:	21f8      	movs	r1, #248	; 0xf8
 80038de:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038e2:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80038e6:	fa91 f1a1 	rbit	r1, r1
 80038ea:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80038ee:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80038f2:	fab1 f181 	clz	r1, r1
 80038f6:	b2c9      	uxtb	r1, r1
 80038f8:	408b      	lsls	r3, r1
 80038fa:	4950      	ldr	r1, [pc, #320]	; (8003a3c <HAL_RCC_OscConfig+0x650>)
 80038fc:	4313      	orrs	r3, r2
 80038fe:	600b      	str	r3, [r1, #0]
 8003900:	e06a      	b.n	80039d8 <HAL_RCC_OscConfig+0x5ec>
 8003902:	2301      	movs	r3, #1
 8003904:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003908:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800390c:	fa93 f3a3 	rbit	r3, r3
 8003910:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8003914:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003918:	fab3 f383 	clz	r3, r3
 800391c:	b2db      	uxtb	r3, r3
 800391e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003922:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003926:	009b      	lsls	r3, r3, #2
 8003928:	461a      	mov	r2, r3
 800392a:	2300      	movs	r3, #0
 800392c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800392e:	f7ff f8bf 	bl	8002ab0 <HAL_GetTick>
 8003932:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003936:	e00a      	b.n	800394e <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003938:	f7ff f8ba 	bl	8002ab0 <HAL_GetTick>
 800393c:	4602      	mov	r2, r0
 800393e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003942:	1ad3      	subs	r3, r2, r3
 8003944:	2b02      	cmp	r3, #2
 8003946:	d902      	bls.n	800394e <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8003948:	2303      	movs	r3, #3
 800394a:	f000 bc50 	b.w	80041ee <HAL_RCC_OscConfig+0xe02>
 800394e:	2302      	movs	r3, #2
 8003950:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003954:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8003958:	fa93 f3a3 	rbit	r3, r3
 800395c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8003960:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003964:	fab3 f383 	clz	r3, r3
 8003968:	b2db      	uxtb	r3, r3
 800396a:	095b      	lsrs	r3, r3, #5
 800396c:	b2db      	uxtb	r3, r3
 800396e:	f043 0301 	orr.w	r3, r3, #1
 8003972:	b2db      	uxtb	r3, r3
 8003974:	2b01      	cmp	r3, #1
 8003976:	d102      	bne.n	800397e <HAL_RCC_OscConfig+0x592>
 8003978:	4b30      	ldr	r3, [pc, #192]	; (8003a3c <HAL_RCC_OscConfig+0x650>)
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	e013      	b.n	80039a6 <HAL_RCC_OscConfig+0x5ba>
 800397e:	2302      	movs	r3, #2
 8003980:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003984:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003988:	fa93 f3a3 	rbit	r3, r3
 800398c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003990:	2302      	movs	r3, #2
 8003992:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003996:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800399a:	fa93 f3a3 	rbit	r3, r3
 800399e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80039a2:	4b26      	ldr	r3, [pc, #152]	; (8003a3c <HAL_RCC_OscConfig+0x650>)
 80039a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039a6:	2202      	movs	r2, #2
 80039a8:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80039ac:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80039b0:	fa92 f2a2 	rbit	r2, r2
 80039b4:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80039b8:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80039bc:	fab2 f282 	clz	r2, r2
 80039c0:	b2d2      	uxtb	r2, r2
 80039c2:	f042 0220 	orr.w	r2, r2, #32
 80039c6:	b2d2      	uxtb	r2, r2
 80039c8:	f002 021f 	and.w	r2, r2, #31
 80039cc:	2101      	movs	r1, #1
 80039ce:	fa01 f202 	lsl.w	r2, r1, r2
 80039d2:	4013      	ands	r3, r2
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d1af      	bne.n	8003938 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80039d8:	1d3b      	adds	r3, r7, #4
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f003 0308 	and.w	r3, r3, #8
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	f000 80da 	beq.w	8003b9c <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80039e8:	1d3b      	adds	r3, r7, #4
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	699b      	ldr	r3, [r3, #24]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d069      	beq.n	8003ac6 <HAL_RCC_OscConfig+0x6da>
 80039f2:	2301      	movs	r3, #1
 80039f4:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039f8:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80039fc:	fa93 f3a3 	rbit	r3, r3
 8003a00:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8003a04:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a08:	fab3 f383 	clz	r3, r3
 8003a0c:	b2db      	uxtb	r3, r3
 8003a0e:	461a      	mov	r2, r3
 8003a10:	4b0b      	ldr	r3, [pc, #44]	; (8003a40 <HAL_RCC_OscConfig+0x654>)
 8003a12:	4413      	add	r3, r2
 8003a14:	009b      	lsls	r3, r3, #2
 8003a16:	461a      	mov	r2, r3
 8003a18:	2301      	movs	r3, #1
 8003a1a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a1c:	f7ff f848 	bl	8002ab0 <HAL_GetTick>
 8003a20:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a24:	e00e      	b.n	8003a44 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a26:	f7ff f843 	bl	8002ab0 <HAL_GetTick>
 8003a2a:	4602      	mov	r2, r0
 8003a2c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003a30:	1ad3      	subs	r3, r2, r3
 8003a32:	2b02      	cmp	r3, #2
 8003a34:	d906      	bls.n	8003a44 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8003a36:	2303      	movs	r3, #3
 8003a38:	e3d9      	b.n	80041ee <HAL_RCC_OscConfig+0xe02>
 8003a3a:	bf00      	nop
 8003a3c:	40021000 	.word	0x40021000
 8003a40:	10908120 	.word	0x10908120
 8003a44:	2302      	movs	r3, #2
 8003a46:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a4a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003a4e:	fa93 f3a3 	rbit	r3, r3
 8003a52:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003a56:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8003a5a:	2202      	movs	r2, #2
 8003a5c:	601a      	str	r2, [r3, #0]
 8003a5e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	fa93 f2a3 	rbit	r2, r3
 8003a68:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8003a6c:	601a      	str	r2, [r3, #0]
 8003a6e:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8003a72:	2202      	movs	r2, #2
 8003a74:	601a      	str	r2, [r3, #0]
 8003a76:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	fa93 f2a3 	rbit	r2, r3
 8003a80:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8003a84:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a86:	4ba5      	ldr	r3, [pc, #660]	; (8003d1c <HAL_RCC_OscConfig+0x930>)
 8003a88:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003a8a:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8003a8e:	2102      	movs	r1, #2
 8003a90:	6019      	str	r1, [r3, #0]
 8003a92:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	fa93 f1a3 	rbit	r1, r3
 8003a9c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8003aa0:	6019      	str	r1, [r3, #0]
  return result;
 8003aa2:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	fab3 f383 	clz	r3, r3
 8003aac:	b2db      	uxtb	r3, r3
 8003aae:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003ab2:	b2db      	uxtb	r3, r3
 8003ab4:	f003 031f 	and.w	r3, r3, #31
 8003ab8:	2101      	movs	r1, #1
 8003aba:	fa01 f303 	lsl.w	r3, r1, r3
 8003abe:	4013      	ands	r3, r2
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d0b0      	beq.n	8003a26 <HAL_RCC_OscConfig+0x63a>
 8003ac4:	e06a      	b.n	8003b9c <HAL_RCC_OscConfig+0x7b0>
 8003ac6:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8003aca:	2201      	movs	r2, #1
 8003acc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ace:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	fa93 f2a3 	rbit	r2, r3
 8003ad8:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8003adc:	601a      	str	r2, [r3, #0]
  return result;
 8003ade:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8003ae2:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ae4:	fab3 f383 	clz	r3, r3
 8003ae8:	b2db      	uxtb	r3, r3
 8003aea:	461a      	mov	r2, r3
 8003aec:	4b8c      	ldr	r3, [pc, #560]	; (8003d20 <HAL_RCC_OscConfig+0x934>)
 8003aee:	4413      	add	r3, r2
 8003af0:	009b      	lsls	r3, r3, #2
 8003af2:	461a      	mov	r2, r3
 8003af4:	2300      	movs	r3, #0
 8003af6:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003af8:	f7fe ffda 	bl	8002ab0 <HAL_GetTick>
 8003afc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b00:	e009      	b.n	8003b16 <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b02:	f7fe ffd5 	bl	8002ab0 <HAL_GetTick>
 8003b06:	4602      	mov	r2, r0
 8003b08:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003b0c:	1ad3      	subs	r3, r2, r3
 8003b0e:	2b02      	cmp	r3, #2
 8003b10:	d901      	bls.n	8003b16 <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 8003b12:	2303      	movs	r3, #3
 8003b14:	e36b      	b.n	80041ee <HAL_RCC_OscConfig+0xe02>
 8003b16:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8003b1a:	2202      	movs	r2, #2
 8003b1c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b1e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	fa93 f2a3 	rbit	r2, r3
 8003b28:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8003b2c:	601a      	str	r2, [r3, #0]
 8003b2e:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8003b32:	2202      	movs	r2, #2
 8003b34:	601a      	str	r2, [r3, #0]
 8003b36:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	fa93 f2a3 	rbit	r2, r3
 8003b40:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003b44:	601a      	str	r2, [r3, #0]
 8003b46:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8003b4a:	2202      	movs	r2, #2
 8003b4c:	601a      	str	r2, [r3, #0]
 8003b4e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	fa93 f2a3 	rbit	r2, r3
 8003b58:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003b5c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b5e:	4b6f      	ldr	r3, [pc, #444]	; (8003d1c <HAL_RCC_OscConfig+0x930>)
 8003b60:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003b62:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8003b66:	2102      	movs	r1, #2
 8003b68:	6019      	str	r1, [r3, #0]
 8003b6a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	fa93 f1a3 	rbit	r1, r3
 8003b74:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003b78:	6019      	str	r1, [r3, #0]
  return result;
 8003b7a:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	fab3 f383 	clz	r3, r3
 8003b84:	b2db      	uxtb	r3, r3
 8003b86:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003b8a:	b2db      	uxtb	r3, r3
 8003b8c:	f003 031f 	and.w	r3, r3, #31
 8003b90:	2101      	movs	r1, #1
 8003b92:	fa01 f303 	lsl.w	r3, r1, r3
 8003b96:	4013      	ands	r3, r2
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d1b2      	bne.n	8003b02 <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b9c:	1d3b      	adds	r3, r7, #4
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f003 0304 	and.w	r3, r3, #4
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	f000 8158 	beq.w	8003e5c <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003bac:	2300      	movs	r3, #0
 8003bae:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003bb2:	4b5a      	ldr	r3, [pc, #360]	; (8003d1c <HAL_RCC_OscConfig+0x930>)
 8003bb4:	69db      	ldr	r3, [r3, #28]
 8003bb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d112      	bne.n	8003be4 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003bbe:	4b57      	ldr	r3, [pc, #348]	; (8003d1c <HAL_RCC_OscConfig+0x930>)
 8003bc0:	69db      	ldr	r3, [r3, #28]
 8003bc2:	4a56      	ldr	r2, [pc, #344]	; (8003d1c <HAL_RCC_OscConfig+0x930>)
 8003bc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bc8:	61d3      	str	r3, [r2, #28]
 8003bca:	4b54      	ldr	r3, [pc, #336]	; (8003d1c <HAL_RCC_OscConfig+0x930>)
 8003bcc:	69db      	ldr	r3, [r3, #28]
 8003bce:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8003bd2:	f107 0308 	add.w	r3, r7, #8
 8003bd6:	601a      	str	r2, [r3, #0]
 8003bd8:	f107 0308 	add.w	r3, r7, #8
 8003bdc:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003bde:	2301      	movs	r3, #1
 8003be0:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003be4:	4b4f      	ldr	r3, [pc, #316]	; (8003d24 <HAL_RCC_OscConfig+0x938>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d11a      	bne.n	8003c26 <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003bf0:	4b4c      	ldr	r3, [pc, #304]	; (8003d24 <HAL_RCC_OscConfig+0x938>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	4a4b      	ldr	r2, [pc, #300]	; (8003d24 <HAL_RCC_OscConfig+0x938>)
 8003bf6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bfa:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003bfc:	f7fe ff58 	bl	8002ab0 <HAL_GetTick>
 8003c00:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c04:	e009      	b.n	8003c1a <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c06:	f7fe ff53 	bl	8002ab0 <HAL_GetTick>
 8003c0a:	4602      	mov	r2, r0
 8003c0c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003c10:	1ad3      	subs	r3, r2, r3
 8003c12:	2b64      	cmp	r3, #100	; 0x64
 8003c14:	d901      	bls.n	8003c1a <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8003c16:	2303      	movs	r3, #3
 8003c18:	e2e9      	b.n	80041ee <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c1a:	4b42      	ldr	r3, [pc, #264]	; (8003d24 <HAL_RCC_OscConfig+0x938>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d0ef      	beq.n	8003c06 <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c26:	1d3b      	adds	r3, r7, #4
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	68db      	ldr	r3, [r3, #12]
 8003c2c:	2b01      	cmp	r3, #1
 8003c2e:	d106      	bne.n	8003c3e <HAL_RCC_OscConfig+0x852>
 8003c30:	4b3a      	ldr	r3, [pc, #232]	; (8003d1c <HAL_RCC_OscConfig+0x930>)
 8003c32:	6a1b      	ldr	r3, [r3, #32]
 8003c34:	4a39      	ldr	r2, [pc, #228]	; (8003d1c <HAL_RCC_OscConfig+0x930>)
 8003c36:	f043 0301 	orr.w	r3, r3, #1
 8003c3a:	6213      	str	r3, [r2, #32]
 8003c3c:	e02f      	b.n	8003c9e <HAL_RCC_OscConfig+0x8b2>
 8003c3e:	1d3b      	adds	r3, r7, #4
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	68db      	ldr	r3, [r3, #12]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d10c      	bne.n	8003c62 <HAL_RCC_OscConfig+0x876>
 8003c48:	4b34      	ldr	r3, [pc, #208]	; (8003d1c <HAL_RCC_OscConfig+0x930>)
 8003c4a:	6a1b      	ldr	r3, [r3, #32]
 8003c4c:	4a33      	ldr	r2, [pc, #204]	; (8003d1c <HAL_RCC_OscConfig+0x930>)
 8003c4e:	f023 0301 	bic.w	r3, r3, #1
 8003c52:	6213      	str	r3, [r2, #32]
 8003c54:	4b31      	ldr	r3, [pc, #196]	; (8003d1c <HAL_RCC_OscConfig+0x930>)
 8003c56:	6a1b      	ldr	r3, [r3, #32]
 8003c58:	4a30      	ldr	r2, [pc, #192]	; (8003d1c <HAL_RCC_OscConfig+0x930>)
 8003c5a:	f023 0304 	bic.w	r3, r3, #4
 8003c5e:	6213      	str	r3, [r2, #32]
 8003c60:	e01d      	b.n	8003c9e <HAL_RCC_OscConfig+0x8b2>
 8003c62:	1d3b      	adds	r3, r7, #4
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	68db      	ldr	r3, [r3, #12]
 8003c68:	2b05      	cmp	r3, #5
 8003c6a:	d10c      	bne.n	8003c86 <HAL_RCC_OscConfig+0x89a>
 8003c6c:	4b2b      	ldr	r3, [pc, #172]	; (8003d1c <HAL_RCC_OscConfig+0x930>)
 8003c6e:	6a1b      	ldr	r3, [r3, #32]
 8003c70:	4a2a      	ldr	r2, [pc, #168]	; (8003d1c <HAL_RCC_OscConfig+0x930>)
 8003c72:	f043 0304 	orr.w	r3, r3, #4
 8003c76:	6213      	str	r3, [r2, #32]
 8003c78:	4b28      	ldr	r3, [pc, #160]	; (8003d1c <HAL_RCC_OscConfig+0x930>)
 8003c7a:	6a1b      	ldr	r3, [r3, #32]
 8003c7c:	4a27      	ldr	r2, [pc, #156]	; (8003d1c <HAL_RCC_OscConfig+0x930>)
 8003c7e:	f043 0301 	orr.w	r3, r3, #1
 8003c82:	6213      	str	r3, [r2, #32]
 8003c84:	e00b      	b.n	8003c9e <HAL_RCC_OscConfig+0x8b2>
 8003c86:	4b25      	ldr	r3, [pc, #148]	; (8003d1c <HAL_RCC_OscConfig+0x930>)
 8003c88:	6a1b      	ldr	r3, [r3, #32]
 8003c8a:	4a24      	ldr	r2, [pc, #144]	; (8003d1c <HAL_RCC_OscConfig+0x930>)
 8003c8c:	f023 0301 	bic.w	r3, r3, #1
 8003c90:	6213      	str	r3, [r2, #32]
 8003c92:	4b22      	ldr	r3, [pc, #136]	; (8003d1c <HAL_RCC_OscConfig+0x930>)
 8003c94:	6a1b      	ldr	r3, [r3, #32]
 8003c96:	4a21      	ldr	r2, [pc, #132]	; (8003d1c <HAL_RCC_OscConfig+0x930>)
 8003c98:	f023 0304 	bic.w	r3, r3, #4
 8003c9c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003c9e:	1d3b      	adds	r3, r7, #4
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	68db      	ldr	r3, [r3, #12]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d06b      	beq.n	8003d80 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ca8:	f7fe ff02 	bl	8002ab0 <HAL_GetTick>
 8003cac:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cb0:	e00b      	b.n	8003cca <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003cb2:	f7fe fefd 	bl	8002ab0 <HAL_GetTick>
 8003cb6:	4602      	mov	r2, r0
 8003cb8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003cbc:	1ad3      	subs	r3, r2, r3
 8003cbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d901      	bls.n	8003cca <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8003cc6:	2303      	movs	r3, #3
 8003cc8:	e291      	b.n	80041ee <HAL_RCC_OscConfig+0xe02>
 8003cca:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8003cce:	2202      	movs	r2, #2
 8003cd0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cd2:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	fa93 f2a3 	rbit	r2, r3
 8003cdc:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8003ce0:	601a      	str	r2, [r3, #0]
 8003ce2:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8003ce6:	2202      	movs	r2, #2
 8003ce8:	601a      	str	r2, [r3, #0]
 8003cea:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	fa93 f2a3 	rbit	r2, r3
 8003cf4:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8003cf8:	601a      	str	r2, [r3, #0]
  return result;
 8003cfa:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8003cfe:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d00:	fab3 f383 	clz	r3, r3
 8003d04:	b2db      	uxtb	r3, r3
 8003d06:	095b      	lsrs	r3, r3, #5
 8003d08:	b2db      	uxtb	r3, r3
 8003d0a:	f043 0302 	orr.w	r3, r3, #2
 8003d0e:	b2db      	uxtb	r3, r3
 8003d10:	2b02      	cmp	r3, #2
 8003d12:	d109      	bne.n	8003d28 <HAL_RCC_OscConfig+0x93c>
 8003d14:	4b01      	ldr	r3, [pc, #4]	; (8003d1c <HAL_RCC_OscConfig+0x930>)
 8003d16:	6a1b      	ldr	r3, [r3, #32]
 8003d18:	e014      	b.n	8003d44 <HAL_RCC_OscConfig+0x958>
 8003d1a:	bf00      	nop
 8003d1c:	40021000 	.word	0x40021000
 8003d20:	10908120 	.word	0x10908120
 8003d24:	40007000 	.word	0x40007000
 8003d28:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8003d2c:	2202      	movs	r2, #2
 8003d2e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d30:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	fa93 f2a3 	rbit	r2, r3
 8003d3a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003d3e:	601a      	str	r2, [r3, #0]
 8003d40:	4bbb      	ldr	r3, [pc, #748]	; (8004030 <HAL_RCC_OscConfig+0xc44>)
 8003d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d44:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8003d48:	2102      	movs	r1, #2
 8003d4a:	6011      	str	r1, [r2, #0]
 8003d4c:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8003d50:	6812      	ldr	r2, [r2, #0]
 8003d52:	fa92 f1a2 	rbit	r1, r2
 8003d56:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8003d5a:	6011      	str	r1, [r2, #0]
  return result;
 8003d5c:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8003d60:	6812      	ldr	r2, [r2, #0]
 8003d62:	fab2 f282 	clz	r2, r2
 8003d66:	b2d2      	uxtb	r2, r2
 8003d68:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003d6c:	b2d2      	uxtb	r2, r2
 8003d6e:	f002 021f 	and.w	r2, r2, #31
 8003d72:	2101      	movs	r1, #1
 8003d74:	fa01 f202 	lsl.w	r2, r1, r2
 8003d78:	4013      	ands	r3, r2
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d099      	beq.n	8003cb2 <HAL_RCC_OscConfig+0x8c6>
 8003d7e:	e063      	b.n	8003e48 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d80:	f7fe fe96 	bl	8002ab0 <HAL_GetTick>
 8003d84:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d88:	e00b      	b.n	8003da2 <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d8a:	f7fe fe91 	bl	8002ab0 <HAL_GetTick>
 8003d8e:	4602      	mov	r2, r0
 8003d90:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003d94:	1ad3      	subs	r3, r2, r3
 8003d96:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d901      	bls.n	8003da2 <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8003d9e:	2303      	movs	r3, #3
 8003da0:	e225      	b.n	80041ee <HAL_RCC_OscConfig+0xe02>
 8003da2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003da6:	2202      	movs	r2, #2
 8003da8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003daa:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	fa93 f2a3 	rbit	r2, r3
 8003db4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003db8:	601a      	str	r2, [r3, #0]
 8003dba:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8003dbe:	2202      	movs	r2, #2
 8003dc0:	601a      	str	r2, [r3, #0]
 8003dc2:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	fa93 f2a3 	rbit	r2, r3
 8003dcc:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003dd0:	601a      	str	r2, [r3, #0]
  return result;
 8003dd2:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003dd6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003dd8:	fab3 f383 	clz	r3, r3
 8003ddc:	b2db      	uxtb	r3, r3
 8003dde:	095b      	lsrs	r3, r3, #5
 8003de0:	b2db      	uxtb	r3, r3
 8003de2:	f043 0302 	orr.w	r3, r3, #2
 8003de6:	b2db      	uxtb	r3, r3
 8003de8:	2b02      	cmp	r3, #2
 8003dea:	d102      	bne.n	8003df2 <HAL_RCC_OscConfig+0xa06>
 8003dec:	4b90      	ldr	r3, [pc, #576]	; (8004030 <HAL_RCC_OscConfig+0xc44>)
 8003dee:	6a1b      	ldr	r3, [r3, #32]
 8003df0:	e00d      	b.n	8003e0e <HAL_RCC_OscConfig+0xa22>
 8003df2:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8003df6:	2202      	movs	r2, #2
 8003df8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dfa:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	fa93 f2a3 	rbit	r2, r3
 8003e04:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8003e08:	601a      	str	r2, [r3, #0]
 8003e0a:	4b89      	ldr	r3, [pc, #548]	; (8004030 <HAL_RCC_OscConfig+0xc44>)
 8003e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e0e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8003e12:	2102      	movs	r1, #2
 8003e14:	6011      	str	r1, [r2, #0]
 8003e16:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8003e1a:	6812      	ldr	r2, [r2, #0]
 8003e1c:	fa92 f1a2 	rbit	r1, r2
 8003e20:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8003e24:	6011      	str	r1, [r2, #0]
  return result;
 8003e26:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8003e2a:	6812      	ldr	r2, [r2, #0]
 8003e2c:	fab2 f282 	clz	r2, r2
 8003e30:	b2d2      	uxtb	r2, r2
 8003e32:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003e36:	b2d2      	uxtb	r2, r2
 8003e38:	f002 021f 	and.w	r2, r2, #31
 8003e3c:	2101      	movs	r1, #1
 8003e3e:	fa01 f202 	lsl.w	r2, r1, r2
 8003e42:	4013      	ands	r3, r2
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d1a0      	bne.n	8003d8a <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003e48:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8003e4c:	2b01      	cmp	r3, #1
 8003e4e:	d105      	bne.n	8003e5c <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e50:	4b77      	ldr	r3, [pc, #476]	; (8004030 <HAL_RCC_OscConfig+0xc44>)
 8003e52:	69db      	ldr	r3, [r3, #28]
 8003e54:	4a76      	ldr	r2, [pc, #472]	; (8004030 <HAL_RCC_OscConfig+0xc44>)
 8003e56:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e5a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e5c:	1d3b      	adds	r3, r7, #4
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	69db      	ldr	r3, [r3, #28]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	f000 81c2 	beq.w	80041ec <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003e68:	4b71      	ldr	r3, [pc, #452]	; (8004030 <HAL_RCC_OscConfig+0xc44>)
 8003e6a:	685b      	ldr	r3, [r3, #4]
 8003e6c:	f003 030c 	and.w	r3, r3, #12
 8003e70:	2b08      	cmp	r3, #8
 8003e72:	f000 819c 	beq.w	80041ae <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e76:	1d3b      	adds	r3, r7, #4
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	69db      	ldr	r3, [r3, #28]
 8003e7c:	2b02      	cmp	r3, #2
 8003e7e:	f040 8114 	bne.w	80040aa <HAL_RCC_OscConfig+0xcbe>
 8003e82:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8003e86:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003e8a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e8c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	fa93 f2a3 	rbit	r2, r3
 8003e96:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003e9a:	601a      	str	r2, [r3, #0]
  return result;
 8003e9c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003ea0:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ea2:	fab3 f383 	clz	r3, r3
 8003ea6:	b2db      	uxtb	r3, r3
 8003ea8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003eac:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003eb0:	009b      	lsls	r3, r3, #2
 8003eb2:	461a      	mov	r2, r3
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003eb8:	f7fe fdfa 	bl	8002ab0 <HAL_GetTick>
 8003ebc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ec0:	e009      	b.n	8003ed6 <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ec2:	f7fe fdf5 	bl	8002ab0 <HAL_GetTick>
 8003ec6:	4602      	mov	r2, r0
 8003ec8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003ecc:	1ad3      	subs	r3, r2, r3
 8003ece:	2b02      	cmp	r3, #2
 8003ed0:	d901      	bls.n	8003ed6 <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8003ed2:	2303      	movs	r3, #3
 8003ed4:	e18b      	b.n	80041ee <HAL_RCC_OscConfig+0xe02>
 8003ed6:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8003eda:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003ede:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ee0:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	fa93 f2a3 	rbit	r2, r3
 8003eea:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003eee:	601a      	str	r2, [r3, #0]
  return result;
 8003ef0:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003ef4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ef6:	fab3 f383 	clz	r3, r3
 8003efa:	b2db      	uxtb	r3, r3
 8003efc:	095b      	lsrs	r3, r3, #5
 8003efe:	b2db      	uxtb	r3, r3
 8003f00:	f043 0301 	orr.w	r3, r3, #1
 8003f04:	b2db      	uxtb	r3, r3
 8003f06:	2b01      	cmp	r3, #1
 8003f08:	d102      	bne.n	8003f10 <HAL_RCC_OscConfig+0xb24>
 8003f0a:	4b49      	ldr	r3, [pc, #292]	; (8004030 <HAL_RCC_OscConfig+0xc44>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	e01b      	b.n	8003f48 <HAL_RCC_OscConfig+0xb5c>
 8003f10:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003f14:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003f18:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f1a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	fa93 f2a3 	rbit	r2, r3
 8003f24:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003f28:	601a      	str	r2, [r3, #0]
 8003f2a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003f2e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003f32:	601a      	str	r2, [r3, #0]
 8003f34:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	fa93 f2a3 	rbit	r2, r3
 8003f3e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003f42:	601a      	str	r2, [r3, #0]
 8003f44:	4b3a      	ldr	r3, [pc, #232]	; (8004030 <HAL_RCC_OscConfig+0xc44>)
 8003f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f48:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003f4c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003f50:	6011      	str	r1, [r2, #0]
 8003f52:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003f56:	6812      	ldr	r2, [r2, #0]
 8003f58:	fa92 f1a2 	rbit	r1, r2
 8003f5c:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8003f60:	6011      	str	r1, [r2, #0]
  return result;
 8003f62:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8003f66:	6812      	ldr	r2, [r2, #0]
 8003f68:	fab2 f282 	clz	r2, r2
 8003f6c:	b2d2      	uxtb	r2, r2
 8003f6e:	f042 0220 	orr.w	r2, r2, #32
 8003f72:	b2d2      	uxtb	r2, r2
 8003f74:	f002 021f 	and.w	r2, r2, #31
 8003f78:	2101      	movs	r1, #1
 8003f7a:	fa01 f202 	lsl.w	r2, r1, r2
 8003f7e:	4013      	ands	r3, r2
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d19e      	bne.n	8003ec2 <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003f84:	4b2a      	ldr	r3, [pc, #168]	; (8004030 <HAL_RCC_OscConfig+0xc44>)
 8003f86:	685b      	ldr	r3, [r3, #4]
 8003f88:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003f8c:	1d3b      	adds	r3, r7, #4
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003f92:	1d3b      	adds	r3, r7, #4
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	6a1b      	ldr	r3, [r3, #32]
 8003f98:	430b      	orrs	r3, r1
 8003f9a:	4925      	ldr	r1, [pc, #148]	; (8004030 <HAL_RCC_OscConfig+0xc44>)
 8003f9c:	4313      	orrs	r3, r2
 8003f9e:	604b      	str	r3, [r1, #4]
 8003fa0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003fa4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003fa8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003faa:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	fa93 f2a3 	rbit	r2, r3
 8003fb4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003fb8:	601a      	str	r2, [r3, #0]
  return result;
 8003fba:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003fbe:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003fc0:	fab3 f383 	clz	r3, r3
 8003fc4:	b2db      	uxtb	r3, r3
 8003fc6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003fca:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003fce:	009b      	lsls	r3, r3, #2
 8003fd0:	461a      	mov	r2, r3
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fd6:	f7fe fd6b 	bl	8002ab0 <HAL_GetTick>
 8003fda:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003fde:	e009      	b.n	8003ff4 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fe0:	f7fe fd66 	bl	8002ab0 <HAL_GetTick>
 8003fe4:	4602      	mov	r2, r0
 8003fe6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003fea:	1ad3      	subs	r3, r2, r3
 8003fec:	2b02      	cmp	r3, #2
 8003fee:	d901      	bls.n	8003ff4 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8003ff0:	2303      	movs	r3, #3
 8003ff2:	e0fc      	b.n	80041ee <HAL_RCC_OscConfig+0xe02>
 8003ff4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003ff8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003ffc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ffe:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	fa93 f2a3 	rbit	r2, r3
 8004008:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800400c:	601a      	str	r2, [r3, #0]
  return result;
 800400e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004012:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004014:	fab3 f383 	clz	r3, r3
 8004018:	b2db      	uxtb	r3, r3
 800401a:	095b      	lsrs	r3, r3, #5
 800401c:	b2db      	uxtb	r3, r3
 800401e:	f043 0301 	orr.w	r3, r3, #1
 8004022:	b2db      	uxtb	r3, r3
 8004024:	2b01      	cmp	r3, #1
 8004026:	d105      	bne.n	8004034 <HAL_RCC_OscConfig+0xc48>
 8004028:	4b01      	ldr	r3, [pc, #4]	; (8004030 <HAL_RCC_OscConfig+0xc44>)
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	e01e      	b.n	800406c <HAL_RCC_OscConfig+0xc80>
 800402e:	bf00      	nop
 8004030:	40021000 	.word	0x40021000
 8004034:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004038:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800403c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800403e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	fa93 f2a3 	rbit	r2, r3
 8004048:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800404c:	601a      	str	r2, [r3, #0]
 800404e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004052:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004056:	601a      	str	r2, [r3, #0]
 8004058:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	fa93 f2a3 	rbit	r2, r3
 8004062:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004066:	601a      	str	r2, [r3, #0]
 8004068:	4b63      	ldr	r3, [pc, #396]	; (80041f8 <HAL_RCC_OscConfig+0xe0c>)
 800406a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800406c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8004070:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004074:	6011      	str	r1, [r2, #0]
 8004076:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800407a:	6812      	ldr	r2, [r2, #0]
 800407c:	fa92 f1a2 	rbit	r1, r2
 8004080:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8004084:	6011      	str	r1, [r2, #0]
  return result;
 8004086:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800408a:	6812      	ldr	r2, [r2, #0]
 800408c:	fab2 f282 	clz	r2, r2
 8004090:	b2d2      	uxtb	r2, r2
 8004092:	f042 0220 	orr.w	r2, r2, #32
 8004096:	b2d2      	uxtb	r2, r2
 8004098:	f002 021f 	and.w	r2, r2, #31
 800409c:	2101      	movs	r1, #1
 800409e:	fa01 f202 	lsl.w	r2, r1, r2
 80040a2:	4013      	ands	r3, r2
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d09b      	beq.n	8003fe0 <HAL_RCC_OscConfig+0xbf4>
 80040a8:	e0a0      	b.n	80041ec <HAL_RCC_OscConfig+0xe00>
 80040aa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80040ae:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80040b2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040b4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	fa93 f2a3 	rbit	r2, r3
 80040be:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80040c2:	601a      	str	r2, [r3, #0]
  return result;
 80040c4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80040c8:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040ca:	fab3 f383 	clz	r3, r3
 80040ce:	b2db      	uxtb	r3, r3
 80040d0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80040d4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80040d8:	009b      	lsls	r3, r3, #2
 80040da:	461a      	mov	r2, r3
 80040dc:	2300      	movs	r3, #0
 80040de:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040e0:	f7fe fce6 	bl	8002ab0 <HAL_GetTick>
 80040e4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80040e8:	e009      	b.n	80040fe <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040ea:	f7fe fce1 	bl	8002ab0 <HAL_GetTick>
 80040ee:	4602      	mov	r2, r0
 80040f0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80040f4:	1ad3      	subs	r3, r2, r3
 80040f6:	2b02      	cmp	r3, #2
 80040f8:	d901      	bls.n	80040fe <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 80040fa:	2303      	movs	r3, #3
 80040fc:	e077      	b.n	80041ee <HAL_RCC_OscConfig+0xe02>
 80040fe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004102:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004106:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004108:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	fa93 f2a3 	rbit	r2, r3
 8004112:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004116:	601a      	str	r2, [r3, #0]
  return result;
 8004118:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800411c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800411e:	fab3 f383 	clz	r3, r3
 8004122:	b2db      	uxtb	r3, r3
 8004124:	095b      	lsrs	r3, r3, #5
 8004126:	b2db      	uxtb	r3, r3
 8004128:	f043 0301 	orr.w	r3, r3, #1
 800412c:	b2db      	uxtb	r3, r3
 800412e:	2b01      	cmp	r3, #1
 8004130:	d102      	bne.n	8004138 <HAL_RCC_OscConfig+0xd4c>
 8004132:	4b31      	ldr	r3, [pc, #196]	; (80041f8 <HAL_RCC_OscConfig+0xe0c>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	e01b      	b.n	8004170 <HAL_RCC_OscConfig+0xd84>
 8004138:	f107 0320 	add.w	r3, r7, #32
 800413c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004140:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004142:	f107 0320 	add.w	r3, r7, #32
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	fa93 f2a3 	rbit	r2, r3
 800414c:	f107 031c 	add.w	r3, r7, #28
 8004150:	601a      	str	r2, [r3, #0]
 8004152:	f107 0318 	add.w	r3, r7, #24
 8004156:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800415a:	601a      	str	r2, [r3, #0]
 800415c:	f107 0318 	add.w	r3, r7, #24
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	fa93 f2a3 	rbit	r2, r3
 8004166:	f107 0314 	add.w	r3, r7, #20
 800416a:	601a      	str	r2, [r3, #0]
 800416c:	4b22      	ldr	r3, [pc, #136]	; (80041f8 <HAL_RCC_OscConfig+0xe0c>)
 800416e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004170:	f107 0210 	add.w	r2, r7, #16
 8004174:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004178:	6011      	str	r1, [r2, #0]
 800417a:	f107 0210 	add.w	r2, r7, #16
 800417e:	6812      	ldr	r2, [r2, #0]
 8004180:	fa92 f1a2 	rbit	r1, r2
 8004184:	f107 020c 	add.w	r2, r7, #12
 8004188:	6011      	str	r1, [r2, #0]
  return result;
 800418a:	f107 020c 	add.w	r2, r7, #12
 800418e:	6812      	ldr	r2, [r2, #0]
 8004190:	fab2 f282 	clz	r2, r2
 8004194:	b2d2      	uxtb	r2, r2
 8004196:	f042 0220 	orr.w	r2, r2, #32
 800419a:	b2d2      	uxtb	r2, r2
 800419c:	f002 021f 	and.w	r2, r2, #31
 80041a0:	2101      	movs	r1, #1
 80041a2:	fa01 f202 	lsl.w	r2, r1, r2
 80041a6:	4013      	ands	r3, r2
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d19e      	bne.n	80040ea <HAL_RCC_OscConfig+0xcfe>
 80041ac:	e01e      	b.n	80041ec <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80041ae:	1d3b      	adds	r3, r7, #4
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	69db      	ldr	r3, [r3, #28]
 80041b4:	2b01      	cmp	r3, #1
 80041b6:	d101      	bne.n	80041bc <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 80041b8:	2301      	movs	r3, #1
 80041ba:	e018      	b.n	80041ee <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80041bc:	4b0e      	ldr	r3, [pc, #56]	; (80041f8 <HAL_RCC_OscConfig+0xe0c>)
 80041be:	685b      	ldr	r3, [r3, #4]
 80041c0:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80041c4:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80041c8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80041cc:	1d3b      	adds	r3, r7, #4
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	6a1b      	ldr	r3, [r3, #32]
 80041d2:	429a      	cmp	r2, r3
 80041d4:	d108      	bne.n	80041e8 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80041d6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80041da:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80041de:	1d3b      	adds	r3, r7, #4
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80041e4:	429a      	cmp	r2, r3
 80041e6:	d001      	beq.n	80041ec <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 80041e8:	2301      	movs	r3, #1
 80041ea:	e000      	b.n	80041ee <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 80041ec:	2300      	movs	r3, #0
}
 80041ee:	4618      	mov	r0, r3
 80041f0:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80041f4:	46bd      	mov	sp, r7
 80041f6:	bd80      	pop	{r7, pc}
 80041f8:	40021000 	.word	0x40021000

080041fc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b09e      	sub	sp, #120	; 0x78
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
 8004204:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8004206:	2300      	movs	r3, #0
 8004208:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d101      	bne.n	8004214 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004210:	2301      	movs	r3, #1
 8004212:	e162      	b.n	80044da <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004214:	4b90      	ldr	r3, [pc, #576]	; (8004458 <HAL_RCC_ClockConfig+0x25c>)
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f003 0307 	and.w	r3, r3, #7
 800421c:	683a      	ldr	r2, [r7, #0]
 800421e:	429a      	cmp	r2, r3
 8004220:	d910      	bls.n	8004244 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004222:	4b8d      	ldr	r3, [pc, #564]	; (8004458 <HAL_RCC_ClockConfig+0x25c>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f023 0207 	bic.w	r2, r3, #7
 800422a:	498b      	ldr	r1, [pc, #556]	; (8004458 <HAL_RCC_ClockConfig+0x25c>)
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	4313      	orrs	r3, r2
 8004230:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004232:	4b89      	ldr	r3, [pc, #548]	; (8004458 <HAL_RCC_ClockConfig+0x25c>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f003 0307 	and.w	r3, r3, #7
 800423a:	683a      	ldr	r2, [r7, #0]
 800423c:	429a      	cmp	r2, r3
 800423e:	d001      	beq.n	8004244 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004240:	2301      	movs	r3, #1
 8004242:	e14a      	b.n	80044da <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f003 0302 	and.w	r3, r3, #2
 800424c:	2b00      	cmp	r3, #0
 800424e:	d008      	beq.n	8004262 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004250:	4b82      	ldr	r3, [pc, #520]	; (800445c <HAL_RCC_ClockConfig+0x260>)
 8004252:	685b      	ldr	r3, [r3, #4]
 8004254:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	689b      	ldr	r3, [r3, #8]
 800425c:	497f      	ldr	r1, [pc, #508]	; (800445c <HAL_RCC_ClockConfig+0x260>)
 800425e:	4313      	orrs	r3, r2
 8004260:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f003 0301 	and.w	r3, r3, #1
 800426a:	2b00      	cmp	r3, #0
 800426c:	f000 80dc 	beq.w	8004428 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	685b      	ldr	r3, [r3, #4]
 8004274:	2b01      	cmp	r3, #1
 8004276:	d13c      	bne.n	80042f2 <HAL_RCC_ClockConfig+0xf6>
 8004278:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800427c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800427e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004280:	fa93 f3a3 	rbit	r3, r3
 8004284:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8004286:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004288:	fab3 f383 	clz	r3, r3
 800428c:	b2db      	uxtb	r3, r3
 800428e:	095b      	lsrs	r3, r3, #5
 8004290:	b2db      	uxtb	r3, r3
 8004292:	f043 0301 	orr.w	r3, r3, #1
 8004296:	b2db      	uxtb	r3, r3
 8004298:	2b01      	cmp	r3, #1
 800429a:	d102      	bne.n	80042a2 <HAL_RCC_ClockConfig+0xa6>
 800429c:	4b6f      	ldr	r3, [pc, #444]	; (800445c <HAL_RCC_ClockConfig+0x260>)
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	e00f      	b.n	80042c2 <HAL_RCC_ClockConfig+0xc6>
 80042a2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80042a6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042a8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80042aa:	fa93 f3a3 	rbit	r3, r3
 80042ae:	667b      	str	r3, [r7, #100]	; 0x64
 80042b0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80042b4:	663b      	str	r3, [r7, #96]	; 0x60
 80042b6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80042b8:	fa93 f3a3 	rbit	r3, r3
 80042bc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80042be:	4b67      	ldr	r3, [pc, #412]	; (800445c <HAL_RCC_ClockConfig+0x260>)
 80042c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042c2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80042c6:	65ba      	str	r2, [r7, #88]	; 0x58
 80042c8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80042ca:	fa92 f2a2 	rbit	r2, r2
 80042ce:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80042d0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80042d2:	fab2 f282 	clz	r2, r2
 80042d6:	b2d2      	uxtb	r2, r2
 80042d8:	f042 0220 	orr.w	r2, r2, #32
 80042dc:	b2d2      	uxtb	r2, r2
 80042de:	f002 021f 	and.w	r2, r2, #31
 80042e2:	2101      	movs	r1, #1
 80042e4:	fa01 f202 	lsl.w	r2, r1, r2
 80042e8:	4013      	ands	r3, r2
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d17b      	bne.n	80043e6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80042ee:	2301      	movs	r3, #1
 80042f0:	e0f3      	b.n	80044da <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	685b      	ldr	r3, [r3, #4]
 80042f6:	2b02      	cmp	r3, #2
 80042f8:	d13c      	bne.n	8004374 <HAL_RCC_ClockConfig+0x178>
 80042fa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80042fe:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004300:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004302:	fa93 f3a3 	rbit	r3, r3
 8004306:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8004308:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800430a:	fab3 f383 	clz	r3, r3
 800430e:	b2db      	uxtb	r3, r3
 8004310:	095b      	lsrs	r3, r3, #5
 8004312:	b2db      	uxtb	r3, r3
 8004314:	f043 0301 	orr.w	r3, r3, #1
 8004318:	b2db      	uxtb	r3, r3
 800431a:	2b01      	cmp	r3, #1
 800431c:	d102      	bne.n	8004324 <HAL_RCC_ClockConfig+0x128>
 800431e:	4b4f      	ldr	r3, [pc, #316]	; (800445c <HAL_RCC_ClockConfig+0x260>)
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	e00f      	b.n	8004344 <HAL_RCC_ClockConfig+0x148>
 8004324:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004328:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800432a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800432c:	fa93 f3a3 	rbit	r3, r3
 8004330:	647b      	str	r3, [r7, #68]	; 0x44
 8004332:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004336:	643b      	str	r3, [r7, #64]	; 0x40
 8004338:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800433a:	fa93 f3a3 	rbit	r3, r3
 800433e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004340:	4b46      	ldr	r3, [pc, #280]	; (800445c <HAL_RCC_ClockConfig+0x260>)
 8004342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004344:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004348:	63ba      	str	r2, [r7, #56]	; 0x38
 800434a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800434c:	fa92 f2a2 	rbit	r2, r2
 8004350:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8004352:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004354:	fab2 f282 	clz	r2, r2
 8004358:	b2d2      	uxtb	r2, r2
 800435a:	f042 0220 	orr.w	r2, r2, #32
 800435e:	b2d2      	uxtb	r2, r2
 8004360:	f002 021f 	and.w	r2, r2, #31
 8004364:	2101      	movs	r1, #1
 8004366:	fa01 f202 	lsl.w	r2, r1, r2
 800436a:	4013      	ands	r3, r2
 800436c:	2b00      	cmp	r3, #0
 800436e:	d13a      	bne.n	80043e6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004370:	2301      	movs	r3, #1
 8004372:	e0b2      	b.n	80044da <HAL_RCC_ClockConfig+0x2de>
 8004374:	2302      	movs	r3, #2
 8004376:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004378:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800437a:	fa93 f3a3 	rbit	r3, r3
 800437e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004380:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004382:	fab3 f383 	clz	r3, r3
 8004386:	b2db      	uxtb	r3, r3
 8004388:	095b      	lsrs	r3, r3, #5
 800438a:	b2db      	uxtb	r3, r3
 800438c:	f043 0301 	orr.w	r3, r3, #1
 8004390:	b2db      	uxtb	r3, r3
 8004392:	2b01      	cmp	r3, #1
 8004394:	d102      	bne.n	800439c <HAL_RCC_ClockConfig+0x1a0>
 8004396:	4b31      	ldr	r3, [pc, #196]	; (800445c <HAL_RCC_ClockConfig+0x260>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	e00d      	b.n	80043b8 <HAL_RCC_ClockConfig+0x1bc>
 800439c:	2302      	movs	r3, #2
 800439e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043a2:	fa93 f3a3 	rbit	r3, r3
 80043a6:	627b      	str	r3, [r7, #36]	; 0x24
 80043a8:	2302      	movs	r3, #2
 80043aa:	623b      	str	r3, [r7, #32]
 80043ac:	6a3b      	ldr	r3, [r7, #32]
 80043ae:	fa93 f3a3 	rbit	r3, r3
 80043b2:	61fb      	str	r3, [r7, #28]
 80043b4:	4b29      	ldr	r3, [pc, #164]	; (800445c <HAL_RCC_ClockConfig+0x260>)
 80043b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043b8:	2202      	movs	r2, #2
 80043ba:	61ba      	str	r2, [r7, #24]
 80043bc:	69ba      	ldr	r2, [r7, #24]
 80043be:	fa92 f2a2 	rbit	r2, r2
 80043c2:	617a      	str	r2, [r7, #20]
  return result;
 80043c4:	697a      	ldr	r2, [r7, #20]
 80043c6:	fab2 f282 	clz	r2, r2
 80043ca:	b2d2      	uxtb	r2, r2
 80043cc:	f042 0220 	orr.w	r2, r2, #32
 80043d0:	b2d2      	uxtb	r2, r2
 80043d2:	f002 021f 	and.w	r2, r2, #31
 80043d6:	2101      	movs	r1, #1
 80043d8:	fa01 f202 	lsl.w	r2, r1, r2
 80043dc:	4013      	ands	r3, r2
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d101      	bne.n	80043e6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80043e2:	2301      	movs	r3, #1
 80043e4:	e079      	b.n	80044da <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80043e6:	4b1d      	ldr	r3, [pc, #116]	; (800445c <HAL_RCC_ClockConfig+0x260>)
 80043e8:	685b      	ldr	r3, [r3, #4]
 80043ea:	f023 0203 	bic.w	r2, r3, #3
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	685b      	ldr	r3, [r3, #4]
 80043f2:	491a      	ldr	r1, [pc, #104]	; (800445c <HAL_RCC_ClockConfig+0x260>)
 80043f4:	4313      	orrs	r3, r2
 80043f6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80043f8:	f7fe fb5a 	bl	8002ab0 <HAL_GetTick>
 80043fc:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043fe:	e00a      	b.n	8004416 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004400:	f7fe fb56 	bl	8002ab0 <HAL_GetTick>
 8004404:	4602      	mov	r2, r0
 8004406:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004408:	1ad3      	subs	r3, r2, r3
 800440a:	f241 3288 	movw	r2, #5000	; 0x1388
 800440e:	4293      	cmp	r3, r2
 8004410:	d901      	bls.n	8004416 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8004412:	2303      	movs	r3, #3
 8004414:	e061      	b.n	80044da <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004416:	4b11      	ldr	r3, [pc, #68]	; (800445c <HAL_RCC_ClockConfig+0x260>)
 8004418:	685b      	ldr	r3, [r3, #4]
 800441a:	f003 020c 	and.w	r2, r3, #12
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	685b      	ldr	r3, [r3, #4]
 8004422:	009b      	lsls	r3, r3, #2
 8004424:	429a      	cmp	r2, r3
 8004426:	d1eb      	bne.n	8004400 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004428:	4b0b      	ldr	r3, [pc, #44]	; (8004458 <HAL_RCC_ClockConfig+0x25c>)
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f003 0307 	and.w	r3, r3, #7
 8004430:	683a      	ldr	r2, [r7, #0]
 8004432:	429a      	cmp	r2, r3
 8004434:	d214      	bcs.n	8004460 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004436:	4b08      	ldr	r3, [pc, #32]	; (8004458 <HAL_RCC_ClockConfig+0x25c>)
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f023 0207 	bic.w	r2, r3, #7
 800443e:	4906      	ldr	r1, [pc, #24]	; (8004458 <HAL_RCC_ClockConfig+0x25c>)
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	4313      	orrs	r3, r2
 8004444:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004446:	4b04      	ldr	r3, [pc, #16]	; (8004458 <HAL_RCC_ClockConfig+0x25c>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f003 0307 	and.w	r3, r3, #7
 800444e:	683a      	ldr	r2, [r7, #0]
 8004450:	429a      	cmp	r2, r3
 8004452:	d005      	beq.n	8004460 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8004454:	2301      	movs	r3, #1
 8004456:	e040      	b.n	80044da <HAL_RCC_ClockConfig+0x2de>
 8004458:	40022000 	.word	0x40022000
 800445c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f003 0304 	and.w	r3, r3, #4
 8004468:	2b00      	cmp	r3, #0
 800446a:	d008      	beq.n	800447e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800446c:	4b1d      	ldr	r3, [pc, #116]	; (80044e4 <HAL_RCC_ClockConfig+0x2e8>)
 800446e:	685b      	ldr	r3, [r3, #4]
 8004470:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	68db      	ldr	r3, [r3, #12]
 8004478:	491a      	ldr	r1, [pc, #104]	; (80044e4 <HAL_RCC_ClockConfig+0x2e8>)
 800447a:	4313      	orrs	r3, r2
 800447c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f003 0308 	and.w	r3, r3, #8
 8004486:	2b00      	cmp	r3, #0
 8004488:	d009      	beq.n	800449e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800448a:	4b16      	ldr	r3, [pc, #88]	; (80044e4 <HAL_RCC_ClockConfig+0x2e8>)
 800448c:	685b      	ldr	r3, [r3, #4]
 800448e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	691b      	ldr	r3, [r3, #16]
 8004496:	00db      	lsls	r3, r3, #3
 8004498:	4912      	ldr	r1, [pc, #72]	; (80044e4 <HAL_RCC_ClockConfig+0x2e8>)
 800449a:	4313      	orrs	r3, r2
 800449c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800449e:	f000 f829 	bl	80044f4 <HAL_RCC_GetSysClockFreq>
 80044a2:	4601      	mov	r1, r0
 80044a4:	4b0f      	ldr	r3, [pc, #60]	; (80044e4 <HAL_RCC_ClockConfig+0x2e8>)
 80044a6:	685b      	ldr	r3, [r3, #4]
 80044a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80044ac:	22f0      	movs	r2, #240	; 0xf0
 80044ae:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044b0:	693a      	ldr	r2, [r7, #16]
 80044b2:	fa92 f2a2 	rbit	r2, r2
 80044b6:	60fa      	str	r2, [r7, #12]
  return result;
 80044b8:	68fa      	ldr	r2, [r7, #12]
 80044ba:	fab2 f282 	clz	r2, r2
 80044be:	b2d2      	uxtb	r2, r2
 80044c0:	40d3      	lsrs	r3, r2
 80044c2:	4a09      	ldr	r2, [pc, #36]	; (80044e8 <HAL_RCC_ClockConfig+0x2ec>)
 80044c4:	5cd3      	ldrb	r3, [r2, r3]
 80044c6:	fa21 f303 	lsr.w	r3, r1, r3
 80044ca:	4a08      	ldr	r2, [pc, #32]	; (80044ec <HAL_RCC_ClockConfig+0x2f0>)
 80044cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80044ce:	4b08      	ldr	r3, [pc, #32]	; (80044f0 <HAL_RCC_ClockConfig+0x2f4>)
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	4618      	mov	r0, r3
 80044d4:	f7fe faa8 	bl	8002a28 <HAL_InitTick>
  
  return HAL_OK;
 80044d8:	2300      	movs	r3, #0
}
 80044da:	4618      	mov	r0, r3
 80044dc:	3778      	adds	r7, #120	; 0x78
 80044de:	46bd      	mov	sp, r7
 80044e0:	bd80      	pop	{r7, pc}
 80044e2:	bf00      	nop
 80044e4:	40021000 	.word	0x40021000
 80044e8:	08006a10 	.word	0x08006a10
 80044ec:	20000004 	.word	0x20000004
 80044f0:	20000008 	.word	0x20000008

080044f4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80044f4:	b480      	push	{r7}
 80044f6:	b08b      	sub	sp, #44	; 0x2c
 80044f8:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80044fa:	2300      	movs	r3, #0
 80044fc:	61fb      	str	r3, [r7, #28]
 80044fe:	2300      	movs	r3, #0
 8004500:	61bb      	str	r3, [r7, #24]
 8004502:	2300      	movs	r3, #0
 8004504:	627b      	str	r3, [r7, #36]	; 0x24
 8004506:	2300      	movs	r3, #0
 8004508:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800450a:	2300      	movs	r3, #0
 800450c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800450e:	4b29      	ldr	r3, [pc, #164]	; (80045b4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004510:	685b      	ldr	r3, [r3, #4]
 8004512:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004514:	69fb      	ldr	r3, [r7, #28]
 8004516:	f003 030c 	and.w	r3, r3, #12
 800451a:	2b04      	cmp	r3, #4
 800451c:	d002      	beq.n	8004524 <HAL_RCC_GetSysClockFreq+0x30>
 800451e:	2b08      	cmp	r3, #8
 8004520:	d003      	beq.n	800452a <HAL_RCC_GetSysClockFreq+0x36>
 8004522:	e03c      	b.n	800459e <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004524:	4b24      	ldr	r3, [pc, #144]	; (80045b8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004526:	623b      	str	r3, [r7, #32]
      break;
 8004528:	e03c      	b.n	80045a4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800452a:	69fb      	ldr	r3, [r7, #28]
 800452c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8004530:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8004534:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004536:	68ba      	ldr	r2, [r7, #8]
 8004538:	fa92 f2a2 	rbit	r2, r2
 800453c:	607a      	str	r2, [r7, #4]
  return result;
 800453e:	687a      	ldr	r2, [r7, #4]
 8004540:	fab2 f282 	clz	r2, r2
 8004544:	b2d2      	uxtb	r2, r2
 8004546:	40d3      	lsrs	r3, r2
 8004548:	4a1c      	ldr	r2, [pc, #112]	; (80045bc <HAL_RCC_GetSysClockFreq+0xc8>)
 800454a:	5cd3      	ldrb	r3, [r2, r3]
 800454c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800454e:	4b19      	ldr	r3, [pc, #100]	; (80045b4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004550:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004552:	f003 030f 	and.w	r3, r3, #15
 8004556:	220f      	movs	r2, #15
 8004558:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800455a:	693a      	ldr	r2, [r7, #16]
 800455c:	fa92 f2a2 	rbit	r2, r2
 8004560:	60fa      	str	r2, [r7, #12]
  return result;
 8004562:	68fa      	ldr	r2, [r7, #12]
 8004564:	fab2 f282 	clz	r2, r2
 8004568:	b2d2      	uxtb	r2, r2
 800456a:	40d3      	lsrs	r3, r2
 800456c:	4a14      	ldr	r2, [pc, #80]	; (80045c0 <HAL_RCC_GetSysClockFreq+0xcc>)
 800456e:	5cd3      	ldrb	r3, [r2, r3]
 8004570:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8004572:	69fb      	ldr	r3, [r7, #28]
 8004574:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004578:	2b00      	cmp	r3, #0
 800457a:	d008      	beq.n	800458e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800457c:	4a0e      	ldr	r2, [pc, #56]	; (80045b8 <HAL_RCC_GetSysClockFreq+0xc4>)
 800457e:	69bb      	ldr	r3, [r7, #24]
 8004580:	fbb2 f2f3 	udiv	r2, r2, r3
 8004584:	697b      	ldr	r3, [r7, #20]
 8004586:	fb02 f303 	mul.w	r3, r2, r3
 800458a:	627b      	str	r3, [r7, #36]	; 0x24
 800458c:	e004      	b.n	8004598 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800458e:	697b      	ldr	r3, [r7, #20]
 8004590:	4a0c      	ldr	r2, [pc, #48]	; (80045c4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004592:	fb02 f303 	mul.w	r3, r2, r3
 8004596:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8004598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800459a:	623b      	str	r3, [r7, #32]
      break;
 800459c:	e002      	b.n	80045a4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800459e:	4b06      	ldr	r3, [pc, #24]	; (80045b8 <HAL_RCC_GetSysClockFreq+0xc4>)
 80045a0:	623b      	str	r3, [r7, #32]
      break;
 80045a2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80045a4:	6a3b      	ldr	r3, [r7, #32]
}
 80045a6:	4618      	mov	r0, r3
 80045a8:	372c      	adds	r7, #44	; 0x2c
 80045aa:	46bd      	mov	sp, r7
 80045ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b0:	4770      	bx	lr
 80045b2:	bf00      	nop
 80045b4:	40021000 	.word	0x40021000
 80045b8:	007a1200 	.word	0x007a1200
 80045bc:	08006a28 	.word	0x08006a28
 80045c0:	08006a38 	.word	0x08006a38
 80045c4:	003d0900 	.word	0x003d0900

080045c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80045c8:	b480      	push	{r7}
 80045ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80045cc:	4b03      	ldr	r3, [pc, #12]	; (80045dc <HAL_RCC_GetHCLKFreq+0x14>)
 80045ce:	681b      	ldr	r3, [r3, #0]
}
 80045d0:	4618      	mov	r0, r3
 80045d2:	46bd      	mov	sp, r7
 80045d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d8:	4770      	bx	lr
 80045da:	bf00      	nop
 80045dc:	20000004 	.word	0x20000004

080045e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b082      	sub	sp, #8
 80045e4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80045e6:	f7ff ffef 	bl	80045c8 <HAL_RCC_GetHCLKFreq>
 80045ea:	4601      	mov	r1, r0
 80045ec:	4b0b      	ldr	r3, [pc, #44]	; (800461c <HAL_RCC_GetPCLK1Freq+0x3c>)
 80045ee:	685b      	ldr	r3, [r3, #4]
 80045f0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80045f4:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80045f8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045fa:	687a      	ldr	r2, [r7, #4]
 80045fc:	fa92 f2a2 	rbit	r2, r2
 8004600:	603a      	str	r2, [r7, #0]
  return result;
 8004602:	683a      	ldr	r2, [r7, #0]
 8004604:	fab2 f282 	clz	r2, r2
 8004608:	b2d2      	uxtb	r2, r2
 800460a:	40d3      	lsrs	r3, r2
 800460c:	4a04      	ldr	r2, [pc, #16]	; (8004620 <HAL_RCC_GetPCLK1Freq+0x40>)
 800460e:	5cd3      	ldrb	r3, [r2, r3]
 8004610:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8004614:	4618      	mov	r0, r3
 8004616:	3708      	adds	r7, #8
 8004618:	46bd      	mov	sp, r7
 800461a:	bd80      	pop	{r7, pc}
 800461c:	40021000 	.word	0x40021000
 8004620:	08006a20 	.word	0x08006a20

08004624 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004624:	b580      	push	{r7, lr}
 8004626:	b082      	sub	sp, #8
 8004628:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800462a:	f7ff ffcd 	bl	80045c8 <HAL_RCC_GetHCLKFreq>
 800462e:	4601      	mov	r1, r0
 8004630:	4b0b      	ldr	r3, [pc, #44]	; (8004660 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8004632:	685b      	ldr	r3, [r3, #4]
 8004634:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8004638:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800463c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800463e:	687a      	ldr	r2, [r7, #4]
 8004640:	fa92 f2a2 	rbit	r2, r2
 8004644:	603a      	str	r2, [r7, #0]
  return result;
 8004646:	683a      	ldr	r2, [r7, #0]
 8004648:	fab2 f282 	clz	r2, r2
 800464c:	b2d2      	uxtb	r2, r2
 800464e:	40d3      	lsrs	r3, r2
 8004650:	4a04      	ldr	r2, [pc, #16]	; (8004664 <HAL_RCC_GetPCLK2Freq+0x40>)
 8004652:	5cd3      	ldrb	r3, [r2, r3]
 8004654:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8004658:	4618      	mov	r0, r3
 800465a:	3708      	adds	r7, #8
 800465c:	46bd      	mov	sp, r7
 800465e:	bd80      	pop	{r7, pc}
 8004660:	40021000 	.word	0x40021000
 8004664:	08006a20 	.word	0x08006a20

08004668 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004668:	b580      	push	{r7, lr}
 800466a:	b082      	sub	sp, #8
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2b00      	cmp	r3, #0
 8004674:	d101      	bne.n	800467a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004676:	2301      	movs	r3, #1
 8004678:	e01d      	b.n	80046b6 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004680:	b2db      	uxtb	r3, r3
 8004682:	2b00      	cmp	r3, #0
 8004684:	d106      	bne.n	8004694 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2200      	movs	r2, #0
 800468a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800468e:	6878      	ldr	r0, [r7, #4]
 8004690:	f7fd ffbe 	bl	8002610 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2202      	movs	r2, #2
 8004698:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681a      	ldr	r2, [r3, #0]
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	3304      	adds	r3, #4
 80046a4:	4619      	mov	r1, r3
 80046a6:	4610      	mov	r0, r2
 80046a8:	f000 fbee 	bl	8004e88 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2201      	movs	r2, #1
 80046b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80046b4:	2300      	movs	r3, #0
}
 80046b6:	4618      	mov	r0, r3
 80046b8:	3708      	adds	r7, #8
 80046ba:	46bd      	mov	sp, r7
 80046bc:	bd80      	pop	{r7, pc}
	...

080046c0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80046c0:	b480      	push	{r7}
 80046c2:	b085      	sub	sp, #20
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	68da      	ldr	r2, [r3, #12]
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f042 0201 	orr.w	r2, r2, #1
 80046d6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	689a      	ldr	r2, [r3, #8]
 80046de:	4b0c      	ldr	r3, [pc, #48]	; (8004710 <HAL_TIM_Base_Start_IT+0x50>)
 80046e0:	4013      	ands	r3, r2
 80046e2:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	2b06      	cmp	r3, #6
 80046e8:	d00b      	beq.n	8004702 <HAL_TIM_Base_Start_IT+0x42>
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046f0:	d007      	beq.n	8004702 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	681a      	ldr	r2, [r3, #0]
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f042 0201 	orr.w	r2, r2, #1
 8004700:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004702:	2300      	movs	r3, #0
}
 8004704:	4618      	mov	r0, r3
 8004706:	3714      	adds	r7, #20
 8004708:	46bd      	mov	sp, r7
 800470a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470e:	4770      	bx	lr
 8004710:	00010007 	.word	0x00010007

08004714 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004714:	b580      	push	{r7, lr}
 8004716:	b082      	sub	sp, #8
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d101      	bne.n	8004726 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004722:	2301      	movs	r3, #1
 8004724:	e01d      	b.n	8004762 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800472c:	b2db      	uxtb	r3, r3
 800472e:	2b00      	cmp	r3, #0
 8004730:	d106      	bne.n	8004740 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	2200      	movs	r2, #0
 8004736:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800473a:	6878      	ldr	r0, [r7, #4]
 800473c:	f000 f815 	bl	800476a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2202      	movs	r2, #2
 8004744:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681a      	ldr	r2, [r3, #0]
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	3304      	adds	r3, #4
 8004750:	4619      	mov	r1, r3
 8004752:	4610      	mov	r0, r2
 8004754:	f000 fb98 	bl	8004e88 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2201      	movs	r2, #1
 800475c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004760:	2300      	movs	r3, #0
}
 8004762:	4618      	mov	r0, r3
 8004764:	3708      	adds	r7, #8
 8004766:	46bd      	mov	sp, r7
 8004768:	bd80      	pop	{r7, pc}

0800476a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800476a:	b480      	push	{r7}
 800476c:	b083      	sub	sp, #12
 800476e:	af00      	add	r7, sp, #0
 8004770:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004772:	bf00      	nop
 8004774:	370c      	adds	r7, #12
 8004776:	46bd      	mov	sp, r7
 8004778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477c:	4770      	bx	lr
	...

08004780 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004780:	b580      	push	{r7, lr}
 8004782:	b084      	sub	sp, #16
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
 8004788:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	2201      	movs	r2, #1
 8004790:	6839      	ldr	r1, [r7, #0]
 8004792:	4618      	mov	r0, r3
 8004794:	f000 fe96 	bl	80054c4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	4a1c      	ldr	r2, [pc, #112]	; (8004810 <HAL_TIM_PWM_Start+0x90>)
 800479e:	4293      	cmp	r3, r2
 80047a0:	d00e      	beq.n	80047c0 <HAL_TIM_PWM_Start+0x40>
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	4a1b      	ldr	r2, [pc, #108]	; (8004814 <HAL_TIM_PWM_Start+0x94>)
 80047a8:	4293      	cmp	r3, r2
 80047aa:	d009      	beq.n	80047c0 <HAL_TIM_PWM_Start+0x40>
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	4a19      	ldr	r2, [pc, #100]	; (8004818 <HAL_TIM_PWM_Start+0x98>)
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d004      	beq.n	80047c0 <HAL_TIM_PWM_Start+0x40>
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	4a18      	ldr	r2, [pc, #96]	; (800481c <HAL_TIM_PWM_Start+0x9c>)
 80047bc:	4293      	cmp	r3, r2
 80047be:	d101      	bne.n	80047c4 <HAL_TIM_PWM_Start+0x44>
 80047c0:	2301      	movs	r3, #1
 80047c2:	e000      	b.n	80047c6 <HAL_TIM_PWM_Start+0x46>
 80047c4:	2300      	movs	r3, #0
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d007      	beq.n	80047da <HAL_TIM_PWM_Start+0x5a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80047d8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	689a      	ldr	r2, [r3, #8]
 80047e0:	4b0f      	ldr	r3, [pc, #60]	; (8004820 <HAL_TIM_PWM_Start+0xa0>)
 80047e2:	4013      	ands	r3, r2
 80047e4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	2b06      	cmp	r3, #6
 80047ea:	d00b      	beq.n	8004804 <HAL_TIM_PWM_Start+0x84>
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047f2:	d007      	beq.n	8004804 <HAL_TIM_PWM_Start+0x84>
  {
    __HAL_TIM_ENABLE(htim);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	681a      	ldr	r2, [r3, #0]
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f042 0201 	orr.w	r2, r2, #1
 8004802:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004804:	2300      	movs	r3, #0
}
 8004806:	4618      	mov	r0, r3
 8004808:	3710      	adds	r7, #16
 800480a:	46bd      	mov	sp, r7
 800480c:	bd80      	pop	{r7, pc}
 800480e:	bf00      	nop
 8004810:	40012c00 	.word	0x40012c00
 8004814:	40014000 	.word	0x40014000
 8004818:	40014400 	.word	0x40014400
 800481c:	40014800 	.word	0x40014800
 8004820:	00010007 	.word	0x00010007

08004824 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8004824:	b580      	push	{r7, lr}
 8004826:	b086      	sub	sp, #24
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
 800482c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d101      	bne.n	8004838 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004834:	2301      	movs	r3, #1
 8004836:	e083      	b.n	8004940 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800483e:	b2db      	uxtb	r3, r3
 8004840:	2b00      	cmp	r3, #0
 8004842:	d106      	bne.n	8004852 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2200      	movs	r2, #0
 8004848:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800484c:	6878      	ldr	r0, [r7, #4]
 800484e:	f7fd fe9f 	bl	8002590 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	2202      	movs	r2, #2
 8004856:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	689b      	ldr	r3, [r3, #8]
 8004860:	687a      	ldr	r2, [r7, #4]
 8004862:	6812      	ldr	r2, [r2, #0]
 8004864:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8004868:	f023 0307 	bic.w	r3, r3, #7
 800486c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681a      	ldr	r2, [r3, #0]
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	3304      	adds	r3, #4
 8004876:	4619      	mov	r1, r3
 8004878:	4610      	mov	r0, r2
 800487a:	f000 fb05 	bl	8004e88 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	689b      	ldr	r3, [r3, #8]
 8004884:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	699b      	ldr	r3, [r3, #24]
 800488c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	6a1b      	ldr	r3, [r3, #32]
 8004894:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	697a      	ldr	r2, [r7, #20]
 800489c:	4313      	orrs	r3, r2
 800489e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80048a0:	693b      	ldr	r3, [r7, #16]
 80048a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048a6:	f023 0303 	bic.w	r3, r3, #3
 80048aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	689a      	ldr	r2, [r3, #8]
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	699b      	ldr	r3, [r3, #24]
 80048b4:	021b      	lsls	r3, r3, #8
 80048b6:	4313      	orrs	r3, r2
 80048b8:	693a      	ldr	r2, [r7, #16]
 80048ba:	4313      	orrs	r3, r2
 80048bc:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80048be:	693b      	ldr	r3, [r7, #16]
 80048c0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80048c4:	f023 030c 	bic.w	r3, r3, #12
 80048c8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80048ca:	693b      	ldr	r3, [r7, #16]
 80048cc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80048d0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80048d4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	68da      	ldr	r2, [r3, #12]
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	69db      	ldr	r3, [r3, #28]
 80048de:	021b      	lsls	r3, r3, #8
 80048e0:	4313      	orrs	r3, r2
 80048e2:	693a      	ldr	r2, [r7, #16]
 80048e4:	4313      	orrs	r3, r2
 80048e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	691b      	ldr	r3, [r3, #16]
 80048ec:	011a      	lsls	r2, r3, #4
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	6a1b      	ldr	r3, [r3, #32]
 80048f2:	031b      	lsls	r3, r3, #12
 80048f4:	4313      	orrs	r3, r2
 80048f6:	693a      	ldr	r2, [r7, #16]
 80048f8:	4313      	orrs	r3, r2
 80048fa:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004902:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800490a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	685a      	ldr	r2, [r3, #4]
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	695b      	ldr	r3, [r3, #20]
 8004914:	011b      	lsls	r3, r3, #4
 8004916:	4313      	orrs	r3, r2
 8004918:	68fa      	ldr	r2, [r7, #12]
 800491a:	4313      	orrs	r3, r2
 800491c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	697a      	ldr	r2, [r7, #20]
 8004924:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	693a      	ldr	r2, [r7, #16]
 800492c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	68fa      	ldr	r2, [r7, #12]
 8004934:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2201      	movs	r2, #1
 800493a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800493e:	2300      	movs	r3, #0
}
 8004940:	4618      	mov	r0, r3
 8004942:	3718      	adds	r7, #24
 8004944:	46bd      	mov	sp, r7
 8004946:	bd80      	pop	{r7, pc}

08004948 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004948:	b580      	push	{r7, lr}
 800494a:	b082      	sub	sp, #8
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
 8004950:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 8004952:	683b      	ldr	r3, [r7, #0]
 8004954:	2b00      	cmp	r3, #0
 8004956:	d002      	beq.n	800495e <HAL_TIM_Encoder_Start+0x16>
 8004958:	2b04      	cmp	r3, #4
 800495a:	d008      	beq.n	800496e <HAL_TIM_Encoder_Start+0x26>
 800495c:	e00f      	b.n	800497e <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	2201      	movs	r2, #1
 8004964:	2100      	movs	r1, #0
 8004966:	4618      	mov	r0, r3
 8004968:	f000 fdac 	bl	80054c4 <TIM_CCxChannelCmd>
      break;
 800496c:	e016      	b.n	800499c <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	2201      	movs	r2, #1
 8004974:	2104      	movs	r1, #4
 8004976:	4618      	mov	r0, r3
 8004978:	f000 fda4 	bl	80054c4 <TIM_CCxChannelCmd>
      break;
 800497c:	e00e      	b.n	800499c <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	2201      	movs	r2, #1
 8004984:	2100      	movs	r1, #0
 8004986:	4618      	mov	r0, r3
 8004988:	f000 fd9c 	bl	80054c4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	2201      	movs	r2, #1
 8004992:	2104      	movs	r1, #4
 8004994:	4618      	mov	r0, r3
 8004996:	f000 fd95 	bl	80054c4 <TIM_CCxChannelCmd>
      break;
 800499a:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	681a      	ldr	r2, [r3, #0]
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f042 0201 	orr.w	r2, r2, #1
 80049aa:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80049ac:	2300      	movs	r3, #0
}
 80049ae:	4618      	mov	r0, r3
 80049b0:	3708      	adds	r7, #8
 80049b2:	46bd      	mov	sp, r7
 80049b4:	bd80      	pop	{r7, pc}

080049b6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80049b6:	b580      	push	{r7, lr}
 80049b8:	b082      	sub	sp, #8
 80049ba:	af00      	add	r7, sp, #0
 80049bc:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	691b      	ldr	r3, [r3, #16]
 80049c4:	f003 0302 	and.w	r3, r3, #2
 80049c8:	2b02      	cmp	r3, #2
 80049ca:	d122      	bne.n	8004a12 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	68db      	ldr	r3, [r3, #12]
 80049d2:	f003 0302 	and.w	r3, r3, #2
 80049d6:	2b02      	cmp	r3, #2
 80049d8:	d11b      	bne.n	8004a12 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f06f 0202 	mvn.w	r2, #2
 80049e2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2201      	movs	r2, #1
 80049e8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	699b      	ldr	r3, [r3, #24]
 80049f0:	f003 0303 	and.w	r3, r3, #3
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d003      	beq.n	8004a00 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80049f8:	6878      	ldr	r0, [r7, #4]
 80049fa:	f000 fa27 	bl	8004e4c <HAL_TIM_IC_CaptureCallback>
 80049fe:	e005      	b.n	8004a0c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a00:	6878      	ldr	r0, [r7, #4]
 8004a02:	f000 fa19 	bl	8004e38 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a06:	6878      	ldr	r0, [r7, #4]
 8004a08:	f000 fa2a 	bl	8004e60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2200      	movs	r2, #0
 8004a10:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	691b      	ldr	r3, [r3, #16]
 8004a18:	f003 0304 	and.w	r3, r3, #4
 8004a1c:	2b04      	cmp	r3, #4
 8004a1e:	d122      	bne.n	8004a66 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	68db      	ldr	r3, [r3, #12]
 8004a26:	f003 0304 	and.w	r3, r3, #4
 8004a2a:	2b04      	cmp	r3, #4
 8004a2c:	d11b      	bne.n	8004a66 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f06f 0204 	mvn.w	r2, #4
 8004a36:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2202      	movs	r2, #2
 8004a3c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	699b      	ldr	r3, [r3, #24]
 8004a44:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d003      	beq.n	8004a54 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a4c:	6878      	ldr	r0, [r7, #4]
 8004a4e:	f000 f9fd 	bl	8004e4c <HAL_TIM_IC_CaptureCallback>
 8004a52:	e005      	b.n	8004a60 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a54:	6878      	ldr	r0, [r7, #4]
 8004a56:	f000 f9ef 	bl	8004e38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a5a:	6878      	ldr	r0, [r7, #4]
 8004a5c:	f000 fa00 	bl	8004e60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2200      	movs	r2, #0
 8004a64:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	691b      	ldr	r3, [r3, #16]
 8004a6c:	f003 0308 	and.w	r3, r3, #8
 8004a70:	2b08      	cmp	r3, #8
 8004a72:	d122      	bne.n	8004aba <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	68db      	ldr	r3, [r3, #12]
 8004a7a:	f003 0308 	and.w	r3, r3, #8
 8004a7e:	2b08      	cmp	r3, #8
 8004a80:	d11b      	bne.n	8004aba <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f06f 0208 	mvn.w	r2, #8
 8004a8a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2204      	movs	r2, #4
 8004a90:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	69db      	ldr	r3, [r3, #28]
 8004a98:	f003 0303 	and.w	r3, r3, #3
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d003      	beq.n	8004aa8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004aa0:	6878      	ldr	r0, [r7, #4]
 8004aa2:	f000 f9d3 	bl	8004e4c <HAL_TIM_IC_CaptureCallback>
 8004aa6:	e005      	b.n	8004ab4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004aa8:	6878      	ldr	r0, [r7, #4]
 8004aaa:	f000 f9c5 	bl	8004e38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004aae:	6878      	ldr	r0, [r7, #4]
 8004ab0:	f000 f9d6 	bl	8004e60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	691b      	ldr	r3, [r3, #16]
 8004ac0:	f003 0310 	and.w	r3, r3, #16
 8004ac4:	2b10      	cmp	r3, #16
 8004ac6:	d122      	bne.n	8004b0e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	68db      	ldr	r3, [r3, #12]
 8004ace:	f003 0310 	and.w	r3, r3, #16
 8004ad2:	2b10      	cmp	r3, #16
 8004ad4:	d11b      	bne.n	8004b0e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f06f 0210 	mvn.w	r2, #16
 8004ade:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2208      	movs	r2, #8
 8004ae4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	69db      	ldr	r3, [r3, #28]
 8004aec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d003      	beq.n	8004afc <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004af4:	6878      	ldr	r0, [r7, #4]
 8004af6:	f000 f9a9 	bl	8004e4c <HAL_TIM_IC_CaptureCallback>
 8004afa:	e005      	b.n	8004b08 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004afc:	6878      	ldr	r0, [r7, #4]
 8004afe:	f000 f99b 	bl	8004e38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b02:	6878      	ldr	r0, [r7, #4]
 8004b04:	f000 f9ac 	bl	8004e60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	691b      	ldr	r3, [r3, #16]
 8004b14:	f003 0301 	and.w	r3, r3, #1
 8004b18:	2b01      	cmp	r3, #1
 8004b1a:	d10e      	bne.n	8004b3a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	68db      	ldr	r3, [r3, #12]
 8004b22:	f003 0301 	and.w	r3, r3, #1
 8004b26:	2b01      	cmp	r3, #1
 8004b28:	d107      	bne.n	8004b3a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f06f 0201 	mvn.w	r2, #1
 8004b32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004b34:	6878      	ldr	r0, [r7, #4]
 8004b36:	f000 f975 	bl	8004e24 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	691b      	ldr	r3, [r3, #16]
 8004b40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b44:	2b80      	cmp	r3, #128	; 0x80
 8004b46:	d10e      	bne.n	8004b66 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	68db      	ldr	r3, [r3, #12]
 8004b4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b52:	2b80      	cmp	r3, #128	; 0x80
 8004b54:	d107      	bne.n	8004b66 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004b5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004b60:	6878      	ldr	r0, [r7, #4]
 8004b62:	f000 fdc5 	bl	80056f0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	691b      	ldr	r3, [r3, #16]
 8004b6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b70:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b74:	d10e      	bne.n	8004b94 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	68db      	ldr	r3, [r3, #12]
 8004b7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b80:	2b80      	cmp	r3, #128	; 0x80
 8004b82:	d107      	bne.n	8004b94 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004b8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004b8e:	6878      	ldr	r0, [r7, #4]
 8004b90:	f000 fdb8 	bl	8005704 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	691b      	ldr	r3, [r3, #16]
 8004b9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b9e:	2b40      	cmp	r3, #64	; 0x40
 8004ba0:	d10e      	bne.n	8004bc0 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	68db      	ldr	r3, [r3, #12]
 8004ba8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bac:	2b40      	cmp	r3, #64	; 0x40
 8004bae:	d107      	bne.n	8004bc0 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004bb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004bba:	6878      	ldr	r0, [r7, #4]
 8004bbc:	f000 f95a 	bl	8004e74 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	691b      	ldr	r3, [r3, #16]
 8004bc6:	f003 0320 	and.w	r3, r3, #32
 8004bca:	2b20      	cmp	r3, #32
 8004bcc:	d10e      	bne.n	8004bec <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	68db      	ldr	r3, [r3, #12]
 8004bd4:	f003 0320 	and.w	r3, r3, #32
 8004bd8:	2b20      	cmp	r3, #32
 8004bda:	d107      	bne.n	8004bec <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f06f 0220 	mvn.w	r2, #32
 8004be4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004be6:	6878      	ldr	r0, [r7, #4]
 8004be8:	f000 fd78 	bl	80056dc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004bec:	bf00      	nop
 8004bee:	3708      	adds	r7, #8
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	bd80      	pop	{r7, pc}

08004bf4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b084      	sub	sp, #16
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	60f8      	str	r0, [r7, #12]
 8004bfc:	60b9      	str	r1, [r7, #8]
 8004bfe:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c06:	2b01      	cmp	r3, #1
 8004c08:	d101      	bne.n	8004c0e <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004c0a:	2302      	movs	r3, #2
 8004c0c:	e105      	b.n	8004e1a <HAL_TIM_PWM_ConfigChannel+0x226>
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	2201      	movs	r2, #1
 8004c12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	2202      	movs	r2, #2
 8004c1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	2b14      	cmp	r3, #20
 8004c22:	f200 80f0 	bhi.w	8004e06 <HAL_TIM_PWM_ConfigChannel+0x212>
 8004c26:	a201      	add	r2, pc, #4	; (adr r2, 8004c2c <HAL_TIM_PWM_ConfigChannel+0x38>)
 8004c28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c2c:	08004c81 	.word	0x08004c81
 8004c30:	08004e07 	.word	0x08004e07
 8004c34:	08004e07 	.word	0x08004e07
 8004c38:	08004e07 	.word	0x08004e07
 8004c3c:	08004cc1 	.word	0x08004cc1
 8004c40:	08004e07 	.word	0x08004e07
 8004c44:	08004e07 	.word	0x08004e07
 8004c48:	08004e07 	.word	0x08004e07
 8004c4c:	08004d03 	.word	0x08004d03
 8004c50:	08004e07 	.word	0x08004e07
 8004c54:	08004e07 	.word	0x08004e07
 8004c58:	08004e07 	.word	0x08004e07
 8004c5c:	08004d43 	.word	0x08004d43
 8004c60:	08004e07 	.word	0x08004e07
 8004c64:	08004e07 	.word	0x08004e07
 8004c68:	08004e07 	.word	0x08004e07
 8004c6c:	08004d85 	.word	0x08004d85
 8004c70:	08004e07 	.word	0x08004e07
 8004c74:	08004e07 	.word	0x08004e07
 8004c78:	08004e07 	.word	0x08004e07
 8004c7c:	08004dc5 	.word	0x08004dc5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	68b9      	ldr	r1, [r7, #8]
 8004c86:	4618      	mov	r0, r3
 8004c88:	f000 f976 	bl	8004f78 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	699a      	ldr	r2, [r3, #24]
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f042 0208 	orr.w	r2, r2, #8
 8004c9a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	699a      	ldr	r2, [r3, #24]
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f022 0204 	bic.w	r2, r2, #4
 8004caa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	6999      	ldr	r1, [r3, #24]
 8004cb2:	68bb      	ldr	r3, [r7, #8]
 8004cb4:	691a      	ldr	r2, [r3, #16]
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	430a      	orrs	r2, r1
 8004cbc:	619a      	str	r2, [r3, #24]
      break;
 8004cbe:	e0a3      	b.n	8004e08 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	68b9      	ldr	r1, [r7, #8]
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	f000 f9dc 	bl	8005084 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	699a      	ldr	r2, [r3, #24]
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004cda:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	699a      	ldr	r2, [r3, #24]
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004cea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	6999      	ldr	r1, [r3, #24]
 8004cf2:	68bb      	ldr	r3, [r7, #8]
 8004cf4:	691b      	ldr	r3, [r3, #16]
 8004cf6:	021a      	lsls	r2, r3, #8
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	430a      	orrs	r2, r1
 8004cfe:	619a      	str	r2, [r3, #24]
      break;
 8004d00:	e082      	b.n	8004e08 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	68b9      	ldr	r1, [r7, #8]
 8004d08:	4618      	mov	r0, r3
 8004d0a:	f000 fa3b 	bl	8005184 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	69da      	ldr	r2, [r3, #28]
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f042 0208 	orr.w	r2, r2, #8
 8004d1c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	69da      	ldr	r2, [r3, #28]
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f022 0204 	bic.w	r2, r2, #4
 8004d2c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	69d9      	ldr	r1, [r3, #28]
 8004d34:	68bb      	ldr	r3, [r7, #8]
 8004d36:	691a      	ldr	r2, [r3, #16]
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	430a      	orrs	r2, r1
 8004d3e:	61da      	str	r2, [r3, #28]
      break;
 8004d40:	e062      	b.n	8004e08 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	68b9      	ldr	r1, [r7, #8]
 8004d48:	4618      	mov	r0, r3
 8004d4a:	f000 fa99 	bl	8005280 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	69da      	ldr	r2, [r3, #28]
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004d5c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	69da      	ldr	r2, [r3, #28]
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d6c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	69d9      	ldr	r1, [r3, #28]
 8004d74:	68bb      	ldr	r3, [r7, #8]
 8004d76:	691b      	ldr	r3, [r3, #16]
 8004d78:	021a      	lsls	r2, r3, #8
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	430a      	orrs	r2, r1
 8004d80:	61da      	str	r2, [r3, #28]
      break;
 8004d82:	e041      	b.n	8004e08 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	68b9      	ldr	r1, [r7, #8]
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	f000 fadc 	bl	8005348 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f042 0208 	orr.w	r2, r2, #8
 8004d9e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f022 0204 	bic.w	r2, r2, #4
 8004dae:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004db6:	68bb      	ldr	r3, [r7, #8]
 8004db8:	691a      	ldr	r2, [r3, #16]
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	430a      	orrs	r2, r1
 8004dc0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004dc2:	e021      	b.n	8004e08 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	68b9      	ldr	r1, [r7, #8]
 8004dca:	4618      	mov	r0, r3
 8004dcc:	f000 fb1a 	bl	8005404 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004dde:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004dee:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004df6:	68bb      	ldr	r3, [r7, #8]
 8004df8:	691b      	ldr	r3, [r3, #16]
 8004dfa:	021a      	lsls	r2, r3, #8
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	430a      	orrs	r2, r1
 8004e02:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004e04:	e000      	b.n	8004e08 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      break;
 8004e06:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	2201      	movs	r2, #1
 8004e0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	2200      	movs	r2, #0
 8004e14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004e18:	2300      	movs	r3, #0
}
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	3710      	adds	r7, #16
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	bd80      	pop	{r7, pc}
 8004e22:	bf00      	nop

08004e24 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004e24:	b480      	push	{r7}
 8004e26:	b083      	sub	sp, #12
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004e2c:	bf00      	nop
 8004e2e:	370c      	adds	r7, #12
 8004e30:	46bd      	mov	sp, r7
 8004e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e36:	4770      	bx	lr

08004e38 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004e38:	b480      	push	{r7}
 8004e3a:	b083      	sub	sp, #12
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004e40:	bf00      	nop
 8004e42:	370c      	adds	r7, #12
 8004e44:	46bd      	mov	sp, r7
 8004e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4a:	4770      	bx	lr

08004e4c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004e4c:	b480      	push	{r7}
 8004e4e:	b083      	sub	sp, #12
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004e54:	bf00      	nop
 8004e56:	370c      	adds	r7, #12
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5e:	4770      	bx	lr

08004e60 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004e60:	b480      	push	{r7}
 8004e62:	b083      	sub	sp, #12
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004e68:	bf00      	nop
 8004e6a:	370c      	adds	r7, #12
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e72:	4770      	bx	lr

08004e74 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004e74:	b480      	push	{r7}
 8004e76:	b083      	sub	sp, #12
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004e7c:	bf00      	nop
 8004e7e:	370c      	adds	r7, #12
 8004e80:	46bd      	mov	sp, r7
 8004e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e86:	4770      	bx	lr

08004e88 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004e88:	b480      	push	{r7}
 8004e8a:	b085      	sub	sp, #20
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
 8004e90:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	4a32      	ldr	r2, [pc, #200]	; (8004f64 <TIM_Base_SetConfig+0xdc>)
 8004e9c:	4293      	cmp	r3, r2
 8004e9e:	d007      	beq.n	8004eb0 <TIM_Base_SetConfig+0x28>
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ea6:	d003      	beq.n	8004eb0 <TIM_Base_SetConfig+0x28>
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	4a2f      	ldr	r2, [pc, #188]	; (8004f68 <TIM_Base_SetConfig+0xe0>)
 8004eac:	4293      	cmp	r3, r2
 8004eae:	d108      	bne.n	8004ec2 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004eb6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	685b      	ldr	r3, [r3, #4]
 8004ebc:	68fa      	ldr	r2, [r7, #12]
 8004ebe:	4313      	orrs	r3, r2
 8004ec0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	4a27      	ldr	r2, [pc, #156]	; (8004f64 <TIM_Base_SetConfig+0xdc>)
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	d013      	beq.n	8004ef2 <TIM_Base_SetConfig+0x6a>
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ed0:	d00f      	beq.n	8004ef2 <TIM_Base_SetConfig+0x6a>
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	4a24      	ldr	r2, [pc, #144]	; (8004f68 <TIM_Base_SetConfig+0xe0>)
 8004ed6:	4293      	cmp	r3, r2
 8004ed8:	d00b      	beq.n	8004ef2 <TIM_Base_SetConfig+0x6a>
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	4a23      	ldr	r2, [pc, #140]	; (8004f6c <TIM_Base_SetConfig+0xe4>)
 8004ede:	4293      	cmp	r3, r2
 8004ee0:	d007      	beq.n	8004ef2 <TIM_Base_SetConfig+0x6a>
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	4a22      	ldr	r2, [pc, #136]	; (8004f70 <TIM_Base_SetConfig+0xe8>)
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	d003      	beq.n	8004ef2 <TIM_Base_SetConfig+0x6a>
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	4a21      	ldr	r2, [pc, #132]	; (8004f74 <TIM_Base_SetConfig+0xec>)
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d108      	bne.n	8004f04 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ef8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004efa:	683b      	ldr	r3, [r7, #0]
 8004efc:	68db      	ldr	r3, [r3, #12]
 8004efe:	68fa      	ldr	r2, [r7, #12]
 8004f00:	4313      	orrs	r3, r2
 8004f02:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	695b      	ldr	r3, [r3, #20]
 8004f0e:	4313      	orrs	r3, r2
 8004f10:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	68fa      	ldr	r2, [r7, #12]
 8004f16:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004f18:	683b      	ldr	r3, [r7, #0]
 8004f1a:	689a      	ldr	r2, [r3, #8]
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	681a      	ldr	r2, [r3, #0]
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	4a0e      	ldr	r2, [pc, #56]	; (8004f64 <TIM_Base_SetConfig+0xdc>)
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	d00b      	beq.n	8004f48 <TIM_Base_SetConfig+0xc0>
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	4a0e      	ldr	r2, [pc, #56]	; (8004f6c <TIM_Base_SetConfig+0xe4>)
 8004f34:	4293      	cmp	r3, r2
 8004f36:	d007      	beq.n	8004f48 <TIM_Base_SetConfig+0xc0>
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	4a0d      	ldr	r2, [pc, #52]	; (8004f70 <TIM_Base_SetConfig+0xe8>)
 8004f3c:	4293      	cmp	r3, r2
 8004f3e:	d003      	beq.n	8004f48 <TIM_Base_SetConfig+0xc0>
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	4a0c      	ldr	r2, [pc, #48]	; (8004f74 <TIM_Base_SetConfig+0xec>)
 8004f44:	4293      	cmp	r3, r2
 8004f46:	d103      	bne.n	8004f50 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	691a      	ldr	r2, [r3, #16]
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2201      	movs	r2, #1
 8004f54:	615a      	str	r2, [r3, #20]
}
 8004f56:	bf00      	nop
 8004f58:	3714      	adds	r7, #20
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f60:	4770      	bx	lr
 8004f62:	bf00      	nop
 8004f64:	40012c00 	.word	0x40012c00
 8004f68:	40000400 	.word	0x40000400
 8004f6c:	40014000 	.word	0x40014000
 8004f70:	40014400 	.word	0x40014400
 8004f74:	40014800 	.word	0x40014800

08004f78 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004f78:	b480      	push	{r7}
 8004f7a:	b087      	sub	sp, #28
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
 8004f80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6a1b      	ldr	r3, [r3, #32]
 8004f86:	f023 0201 	bic.w	r2, r3, #1
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6a1b      	ldr	r3, [r3, #32]
 8004f92:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	685b      	ldr	r3, [r3, #4]
 8004f98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	699b      	ldr	r3, [r3, #24]
 8004f9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004fa6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004faa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	f023 0303 	bic.w	r3, r3, #3
 8004fb2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	68fa      	ldr	r2, [r7, #12]
 8004fba:	4313      	orrs	r3, r2
 8004fbc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004fbe:	697b      	ldr	r3, [r7, #20]
 8004fc0:	f023 0302 	bic.w	r3, r3, #2
 8004fc4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	689b      	ldr	r3, [r3, #8]
 8004fca:	697a      	ldr	r2, [r7, #20]
 8004fcc:	4313      	orrs	r3, r2
 8004fce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	4a28      	ldr	r2, [pc, #160]	; (8005074 <TIM_OC1_SetConfig+0xfc>)
 8004fd4:	4293      	cmp	r3, r2
 8004fd6:	d00b      	beq.n	8004ff0 <TIM_OC1_SetConfig+0x78>
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	4a27      	ldr	r2, [pc, #156]	; (8005078 <TIM_OC1_SetConfig+0x100>)
 8004fdc:	4293      	cmp	r3, r2
 8004fde:	d007      	beq.n	8004ff0 <TIM_OC1_SetConfig+0x78>
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	4a26      	ldr	r2, [pc, #152]	; (800507c <TIM_OC1_SetConfig+0x104>)
 8004fe4:	4293      	cmp	r3, r2
 8004fe6:	d003      	beq.n	8004ff0 <TIM_OC1_SetConfig+0x78>
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	4a25      	ldr	r2, [pc, #148]	; (8005080 <TIM_OC1_SetConfig+0x108>)
 8004fec:	4293      	cmp	r3, r2
 8004fee:	d10c      	bne.n	800500a <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004ff0:	697b      	ldr	r3, [r7, #20]
 8004ff2:	f023 0308 	bic.w	r3, r3, #8
 8004ff6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	68db      	ldr	r3, [r3, #12]
 8004ffc:	697a      	ldr	r2, [r7, #20]
 8004ffe:	4313      	orrs	r3, r2
 8005000:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005002:	697b      	ldr	r3, [r7, #20]
 8005004:	f023 0304 	bic.w	r3, r3, #4
 8005008:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	4a19      	ldr	r2, [pc, #100]	; (8005074 <TIM_OC1_SetConfig+0xfc>)
 800500e:	4293      	cmp	r3, r2
 8005010:	d00b      	beq.n	800502a <TIM_OC1_SetConfig+0xb2>
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	4a18      	ldr	r2, [pc, #96]	; (8005078 <TIM_OC1_SetConfig+0x100>)
 8005016:	4293      	cmp	r3, r2
 8005018:	d007      	beq.n	800502a <TIM_OC1_SetConfig+0xb2>
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	4a17      	ldr	r2, [pc, #92]	; (800507c <TIM_OC1_SetConfig+0x104>)
 800501e:	4293      	cmp	r3, r2
 8005020:	d003      	beq.n	800502a <TIM_OC1_SetConfig+0xb2>
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	4a16      	ldr	r2, [pc, #88]	; (8005080 <TIM_OC1_SetConfig+0x108>)
 8005026:	4293      	cmp	r3, r2
 8005028:	d111      	bne.n	800504e <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800502a:	693b      	ldr	r3, [r7, #16]
 800502c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005030:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005032:	693b      	ldr	r3, [r7, #16]
 8005034:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005038:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	695b      	ldr	r3, [r3, #20]
 800503e:	693a      	ldr	r2, [r7, #16]
 8005040:	4313      	orrs	r3, r2
 8005042:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	699b      	ldr	r3, [r3, #24]
 8005048:	693a      	ldr	r2, [r7, #16]
 800504a:	4313      	orrs	r3, r2
 800504c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	693a      	ldr	r2, [r7, #16]
 8005052:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	68fa      	ldr	r2, [r7, #12]
 8005058:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800505a:	683b      	ldr	r3, [r7, #0]
 800505c:	685a      	ldr	r2, [r3, #4]
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	697a      	ldr	r2, [r7, #20]
 8005066:	621a      	str	r2, [r3, #32]
}
 8005068:	bf00      	nop
 800506a:	371c      	adds	r7, #28
 800506c:	46bd      	mov	sp, r7
 800506e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005072:	4770      	bx	lr
 8005074:	40012c00 	.word	0x40012c00
 8005078:	40014000 	.word	0x40014000
 800507c:	40014400 	.word	0x40014400
 8005080:	40014800 	.word	0x40014800

08005084 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005084:	b480      	push	{r7}
 8005086:	b087      	sub	sp, #28
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]
 800508c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6a1b      	ldr	r3, [r3, #32]
 8005092:	f023 0210 	bic.w	r2, r3, #16
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6a1b      	ldr	r3, [r3, #32]
 800509e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	685b      	ldr	r3, [r3, #4]
 80050a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	699b      	ldr	r3, [r3, #24]
 80050aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80050b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	021b      	lsls	r3, r3, #8
 80050c6:	68fa      	ldr	r2, [r7, #12]
 80050c8:	4313      	orrs	r3, r2
 80050ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80050cc:	697b      	ldr	r3, [r7, #20]
 80050ce:	f023 0320 	bic.w	r3, r3, #32
 80050d2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	689b      	ldr	r3, [r3, #8]
 80050d8:	011b      	lsls	r3, r3, #4
 80050da:	697a      	ldr	r2, [r7, #20]
 80050dc:	4313      	orrs	r3, r2
 80050de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	4a24      	ldr	r2, [pc, #144]	; (8005174 <TIM_OC2_SetConfig+0xf0>)
 80050e4:	4293      	cmp	r3, r2
 80050e6:	d10d      	bne.n	8005104 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80050e8:	697b      	ldr	r3, [r7, #20]
 80050ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80050ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	68db      	ldr	r3, [r3, #12]
 80050f4:	011b      	lsls	r3, r3, #4
 80050f6:	697a      	ldr	r2, [r7, #20]
 80050f8:	4313      	orrs	r3, r2
 80050fa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80050fc:	697b      	ldr	r3, [r7, #20]
 80050fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005102:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	4a1b      	ldr	r2, [pc, #108]	; (8005174 <TIM_OC2_SetConfig+0xf0>)
 8005108:	4293      	cmp	r3, r2
 800510a:	d00b      	beq.n	8005124 <TIM_OC2_SetConfig+0xa0>
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	4a1a      	ldr	r2, [pc, #104]	; (8005178 <TIM_OC2_SetConfig+0xf4>)
 8005110:	4293      	cmp	r3, r2
 8005112:	d007      	beq.n	8005124 <TIM_OC2_SetConfig+0xa0>
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	4a19      	ldr	r2, [pc, #100]	; (800517c <TIM_OC2_SetConfig+0xf8>)
 8005118:	4293      	cmp	r3, r2
 800511a:	d003      	beq.n	8005124 <TIM_OC2_SetConfig+0xa0>
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	4a18      	ldr	r2, [pc, #96]	; (8005180 <TIM_OC2_SetConfig+0xfc>)
 8005120:	4293      	cmp	r3, r2
 8005122:	d113      	bne.n	800514c <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005124:	693b      	ldr	r3, [r7, #16]
 8005126:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800512a:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800512c:	693b      	ldr	r3, [r7, #16]
 800512e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005132:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	695b      	ldr	r3, [r3, #20]
 8005138:	009b      	lsls	r3, r3, #2
 800513a:	693a      	ldr	r2, [r7, #16]
 800513c:	4313      	orrs	r3, r2
 800513e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	699b      	ldr	r3, [r3, #24]
 8005144:	009b      	lsls	r3, r3, #2
 8005146:	693a      	ldr	r2, [r7, #16]
 8005148:	4313      	orrs	r3, r2
 800514a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	693a      	ldr	r2, [r7, #16]
 8005150:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	68fa      	ldr	r2, [r7, #12]
 8005156:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	685a      	ldr	r2, [r3, #4]
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	697a      	ldr	r2, [r7, #20]
 8005164:	621a      	str	r2, [r3, #32]
}
 8005166:	bf00      	nop
 8005168:	371c      	adds	r7, #28
 800516a:	46bd      	mov	sp, r7
 800516c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005170:	4770      	bx	lr
 8005172:	bf00      	nop
 8005174:	40012c00 	.word	0x40012c00
 8005178:	40014000 	.word	0x40014000
 800517c:	40014400 	.word	0x40014400
 8005180:	40014800 	.word	0x40014800

08005184 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005184:	b480      	push	{r7}
 8005186:	b087      	sub	sp, #28
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
 800518c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6a1b      	ldr	r3, [r3, #32]
 8005192:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	6a1b      	ldr	r3, [r3, #32]
 800519e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	685b      	ldr	r3, [r3, #4]
 80051a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	69db      	ldr	r3, [r3, #28]
 80051aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80051b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	f023 0303 	bic.w	r3, r3, #3
 80051be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	68fa      	ldr	r2, [r7, #12]
 80051c6:	4313      	orrs	r3, r2
 80051c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80051ca:	697b      	ldr	r3, [r7, #20]
 80051cc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80051d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80051d2:	683b      	ldr	r3, [r7, #0]
 80051d4:	689b      	ldr	r3, [r3, #8]
 80051d6:	021b      	lsls	r3, r3, #8
 80051d8:	697a      	ldr	r2, [r7, #20]
 80051da:	4313      	orrs	r3, r2
 80051dc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	4a23      	ldr	r2, [pc, #140]	; (8005270 <TIM_OC3_SetConfig+0xec>)
 80051e2:	4293      	cmp	r3, r2
 80051e4:	d10d      	bne.n	8005202 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80051e6:	697b      	ldr	r3, [r7, #20]
 80051e8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80051ec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80051ee:	683b      	ldr	r3, [r7, #0]
 80051f0:	68db      	ldr	r3, [r3, #12]
 80051f2:	021b      	lsls	r3, r3, #8
 80051f4:	697a      	ldr	r2, [r7, #20]
 80051f6:	4313      	orrs	r3, r2
 80051f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80051fa:	697b      	ldr	r3, [r7, #20]
 80051fc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005200:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	4a1a      	ldr	r2, [pc, #104]	; (8005270 <TIM_OC3_SetConfig+0xec>)
 8005206:	4293      	cmp	r3, r2
 8005208:	d00b      	beq.n	8005222 <TIM_OC3_SetConfig+0x9e>
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	4a19      	ldr	r2, [pc, #100]	; (8005274 <TIM_OC3_SetConfig+0xf0>)
 800520e:	4293      	cmp	r3, r2
 8005210:	d007      	beq.n	8005222 <TIM_OC3_SetConfig+0x9e>
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	4a18      	ldr	r2, [pc, #96]	; (8005278 <TIM_OC3_SetConfig+0xf4>)
 8005216:	4293      	cmp	r3, r2
 8005218:	d003      	beq.n	8005222 <TIM_OC3_SetConfig+0x9e>
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	4a17      	ldr	r2, [pc, #92]	; (800527c <TIM_OC3_SetConfig+0xf8>)
 800521e:	4293      	cmp	r3, r2
 8005220:	d113      	bne.n	800524a <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005222:	693b      	ldr	r3, [r7, #16]
 8005224:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005228:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800522a:	693b      	ldr	r3, [r7, #16]
 800522c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005230:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	695b      	ldr	r3, [r3, #20]
 8005236:	011b      	lsls	r3, r3, #4
 8005238:	693a      	ldr	r2, [r7, #16]
 800523a:	4313      	orrs	r3, r2
 800523c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	699b      	ldr	r3, [r3, #24]
 8005242:	011b      	lsls	r3, r3, #4
 8005244:	693a      	ldr	r2, [r7, #16]
 8005246:	4313      	orrs	r3, r2
 8005248:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	693a      	ldr	r2, [r7, #16]
 800524e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	68fa      	ldr	r2, [r7, #12]
 8005254:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005256:	683b      	ldr	r3, [r7, #0]
 8005258:	685a      	ldr	r2, [r3, #4]
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	697a      	ldr	r2, [r7, #20]
 8005262:	621a      	str	r2, [r3, #32]
}
 8005264:	bf00      	nop
 8005266:	371c      	adds	r7, #28
 8005268:	46bd      	mov	sp, r7
 800526a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526e:	4770      	bx	lr
 8005270:	40012c00 	.word	0x40012c00
 8005274:	40014000 	.word	0x40014000
 8005278:	40014400 	.word	0x40014400
 800527c:	40014800 	.word	0x40014800

08005280 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005280:	b480      	push	{r7}
 8005282:	b087      	sub	sp, #28
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]
 8005288:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6a1b      	ldr	r3, [r3, #32]
 800528e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	6a1b      	ldr	r3, [r3, #32]
 800529a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	685b      	ldr	r3, [r3, #4]
 80052a0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	69db      	ldr	r3, [r3, #28]
 80052a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80052ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80052ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	021b      	lsls	r3, r3, #8
 80052c2:	68fa      	ldr	r2, [r7, #12]
 80052c4:	4313      	orrs	r3, r2
 80052c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80052c8:	693b      	ldr	r3, [r7, #16]
 80052ca:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80052ce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80052d0:	683b      	ldr	r3, [r7, #0]
 80052d2:	689b      	ldr	r3, [r3, #8]
 80052d4:	031b      	lsls	r3, r3, #12
 80052d6:	693a      	ldr	r2, [r7, #16]
 80052d8:	4313      	orrs	r3, r2
 80052da:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	4a16      	ldr	r2, [pc, #88]	; (8005338 <TIM_OC4_SetConfig+0xb8>)
 80052e0:	4293      	cmp	r3, r2
 80052e2:	d00b      	beq.n	80052fc <TIM_OC4_SetConfig+0x7c>
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	4a15      	ldr	r2, [pc, #84]	; (800533c <TIM_OC4_SetConfig+0xbc>)
 80052e8:	4293      	cmp	r3, r2
 80052ea:	d007      	beq.n	80052fc <TIM_OC4_SetConfig+0x7c>
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	4a14      	ldr	r2, [pc, #80]	; (8005340 <TIM_OC4_SetConfig+0xc0>)
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d003      	beq.n	80052fc <TIM_OC4_SetConfig+0x7c>
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	4a13      	ldr	r2, [pc, #76]	; (8005344 <TIM_OC4_SetConfig+0xc4>)
 80052f8:	4293      	cmp	r3, r2
 80052fa:	d109      	bne.n	8005310 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80052fc:	697b      	ldr	r3, [r7, #20]
 80052fe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005302:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005304:	683b      	ldr	r3, [r7, #0]
 8005306:	695b      	ldr	r3, [r3, #20]
 8005308:	019b      	lsls	r3, r3, #6
 800530a:	697a      	ldr	r2, [r7, #20]
 800530c:	4313      	orrs	r3, r2
 800530e:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	697a      	ldr	r2, [r7, #20]
 8005314:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	68fa      	ldr	r2, [r7, #12]
 800531a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800531c:	683b      	ldr	r3, [r7, #0]
 800531e:	685a      	ldr	r2, [r3, #4]
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	693a      	ldr	r2, [r7, #16]
 8005328:	621a      	str	r2, [r3, #32]
}
 800532a:	bf00      	nop
 800532c:	371c      	adds	r7, #28
 800532e:	46bd      	mov	sp, r7
 8005330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005334:	4770      	bx	lr
 8005336:	bf00      	nop
 8005338:	40012c00 	.word	0x40012c00
 800533c:	40014000 	.word	0x40014000
 8005340:	40014400 	.word	0x40014400
 8005344:	40014800 	.word	0x40014800

08005348 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005348:	b480      	push	{r7}
 800534a:	b087      	sub	sp, #28
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
 8005350:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6a1b      	ldr	r3, [r3, #32]
 8005356:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	6a1b      	ldr	r3, [r3, #32]
 8005362:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	685b      	ldr	r3, [r3, #4]
 8005368:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800536e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005376:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800537a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	68fa      	ldr	r2, [r7, #12]
 8005382:	4313      	orrs	r3, r2
 8005384:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005386:	693b      	ldr	r3, [r7, #16]
 8005388:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800538c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800538e:	683b      	ldr	r3, [r7, #0]
 8005390:	689b      	ldr	r3, [r3, #8]
 8005392:	041b      	lsls	r3, r3, #16
 8005394:	693a      	ldr	r2, [r7, #16]
 8005396:	4313      	orrs	r3, r2
 8005398:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	4a15      	ldr	r2, [pc, #84]	; (80053f4 <TIM_OC5_SetConfig+0xac>)
 800539e:	4293      	cmp	r3, r2
 80053a0:	d00b      	beq.n	80053ba <TIM_OC5_SetConfig+0x72>
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	4a14      	ldr	r2, [pc, #80]	; (80053f8 <TIM_OC5_SetConfig+0xb0>)
 80053a6:	4293      	cmp	r3, r2
 80053a8:	d007      	beq.n	80053ba <TIM_OC5_SetConfig+0x72>
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	4a13      	ldr	r2, [pc, #76]	; (80053fc <TIM_OC5_SetConfig+0xb4>)
 80053ae:	4293      	cmp	r3, r2
 80053b0:	d003      	beq.n	80053ba <TIM_OC5_SetConfig+0x72>
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	4a12      	ldr	r2, [pc, #72]	; (8005400 <TIM_OC5_SetConfig+0xb8>)
 80053b6:	4293      	cmp	r3, r2
 80053b8:	d109      	bne.n	80053ce <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80053ba:	697b      	ldr	r3, [r7, #20]
 80053bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80053c0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80053c2:	683b      	ldr	r3, [r7, #0]
 80053c4:	695b      	ldr	r3, [r3, #20]
 80053c6:	021b      	lsls	r3, r3, #8
 80053c8:	697a      	ldr	r2, [r7, #20]
 80053ca:	4313      	orrs	r3, r2
 80053cc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	697a      	ldr	r2, [r7, #20]
 80053d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	68fa      	ldr	r2, [r7, #12]
 80053d8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	685a      	ldr	r2, [r3, #4]
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	693a      	ldr	r2, [r7, #16]
 80053e6:	621a      	str	r2, [r3, #32]
}
 80053e8:	bf00      	nop
 80053ea:	371c      	adds	r7, #28
 80053ec:	46bd      	mov	sp, r7
 80053ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f2:	4770      	bx	lr
 80053f4:	40012c00 	.word	0x40012c00
 80053f8:	40014000 	.word	0x40014000
 80053fc:	40014400 	.word	0x40014400
 8005400:	40014800 	.word	0x40014800

08005404 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005404:	b480      	push	{r7}
 8005406:	b087      	sub	sp, #28
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]
 800540c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6a1b      	ldr	r3, [r3, #32]
 8005412:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	6a1b      	ldr	r3, [r3, #32]
 800541e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	685b      	ldr	r3, [r3, #4]
 8005424:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800542a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005432:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005436:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	021b      	lsls	r3, r3, #8
 800543e:	68fa      	ldr	r2, [r7, #12]
 8005440:	4313      	orrs	r3, r2
 8005442:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005444:	693b      	ldr	r3, [r7, #16]
 8005446:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800544a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800544c:	683b      	ldr	r3, [r7, #0]
 800544e:	689b      	ldr	r3, [r3, #8]
 8005450:	051b      	lsls	r3, r3, #20
 8005452:	693a      	ldr	r2, [r7, #16]
 8005454:	4313      	orrs	r3, r2
 8005456:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	4a16      	ldr	r2, [pc, #88]	; (80054b4 <TIM_OC6_SetConfig+0xb0>)
 800545c:	4293      	cmp	r3, r2
 800545e:	d00b      	beq.n	8005478 <TIM_OC6_SetConfig+0x74>
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	4a15      	ldr	r2, [pc, #84]	; (80054b8 <TIM_OC6_SetConfig+0xb4>)
 8005464:	4293      	cmp	r3, r2
 8005466:	d007      	beq.n	8005478 <TIM_OC6_SetConfig+0x74>
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	4a14      	ldr	r2, [pc, #80]	; (80054bc <TIM_OC6_SetConfig+0xb8>)
 800546c:	4293      	cmp	r3, r2
 800546e:	d003      	beq.n	8005478 <TIM_OC6_SetConfig+0x74>
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	4a13      	ldr	r2, [pc, #76]	; (80054c0 <TIM_OC6_SetConfig+0xbc>)
 8005474:	4293      	cmp	r3, r2
 8005476:	d109      	bne.n	800548c <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005478:	697b      	ldr	r3, [r7, #20]
 800547a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800547e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005480:	683b      	ldr	r3, [r7, #0]
 8005482:	695b      	ldr	r3, [r3, #20]
 8005484:	029b      	lsls	r3, r3, #10
 8005486:	697a      	ldr	r2, [r7, #20]
 8005488:	4313      	orrs	r3, r2
 800548a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	697a      	ldr	r2, [r7, #20]
 8005490:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	68fa      	ldr	r2, [r7, #12]
 8005496:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	685a      	ldr	r2, [r3, #4]
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	693a      	ldr	r2, [r7, #16]
 80054a4:	621a      	str	r2, [r3, #32]
}
 80054a6:	bf00      	nop
 80054a8:	371c      	adds	r7, #28
 80054aa:	46bd      	mov	sp, r7
 80054ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b0:	4770      	bx	lr
 80054b2:	bf00      	nop
 80054b4:	40012c00 	.word	0x40012c00
 80054b8:	40014000 	.word	0x40014000
 80054bc:	40014400 	.word	0x40014400
 80054c0:	40014800 	.word	0x40014800

080054c4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80054c4:	b480      	push	{r7}
 80054c6:	b087      	sub	sp, #28
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	60f8      	str	r0, [r7, #12]
 80054cc:	60b9      	str	r1, [r7, #8]
 80054ce:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80054d0:	68bb      	ldr	r3, [r7, #8]
 80054d2:	f003 031f 	and.w	r3, r3, #31
 80054d6:	2201      	movs	r2, #1
 80054d8:	fa02 f303 	lsl.w	r3, r2, r3
 80054dc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	6a1a      	ldr	r2, [r3, #32]
 80054e2:	697b      	ldr	r3, [r7, #20]
 80054e4:	43db      	mvns	r3, r3
 80054e6:	401a      	ands	r2, r3
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	6a1a      	ldr	r2, [r3, #32]
 80054f0:	68bb      	ldr	r3, [r7, #8]
 80054f2:	f003 031f 	and.w	r3, r3, #31
 80054f6:	6879      	ldr	r1, [r7, #4]
 80054f8:	fa01 f303 	lsl.w	r3, r1, r3
 80054fc:	431a      	orrs	r2, r3
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	621a      	str	r2, [r3, #32]
}
 8005502:	bf00      	nop
 8005504:	371c      	adds	r7, #28
 8005506:	46bd      	mov	sp, r7
 8005508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550c:	4770      	bx	lr
	...

08005510 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005510:	b480      	push	{r7}
 8005512:	b085      	sub	sp, #20
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
 8005518:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005520:	2b01      	cmp	r3, #1
 8005522:	d101      	bne.n	8005528 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005524:	2302      	movs	r3, #2
 8005526:	e054      	b.n	80055d2 <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2201      	movs	r2, #1
 800552c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2202      	movs	r2, #2
 8005534:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	685b      	ldr	r3, [r3, #4]
 800553e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	689b      	ldr	r3, [r3, #8]
 8005546:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	4a24      	ldr	r2, [pc, #144]	; (80055e0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800554e:	4293      	cmp	r3, r2
 8005550:	d108      	bne.n	8005564 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005558:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800555a:	683b      	ldr	r3, [r7, #0]
 800555c:	685b      	ldr	r3, [r3, #4]
 800555e:	68fa      	ldr	r2, [r7, #12]
 8005560:	4313      	orrs	r3, r2
 8005562:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800556a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	68fa      	ldr	r2, [r7, #12]
 8005572:	4313      	orrs	r3, r2
 8005574:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	68fa      	ldr	r2, [r7, #12]
 800557c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	4a17      	ldr	r2, [pc, #92]	; (80055e0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005584:	4293      	cmp	r3, r2
 8005586:	d00e      	beq.n	80055a6 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005590:	d009      	beq.n	80055a6 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	4a13      	ldr	r2, [pc, #76]	; (80055e4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005598:	4293      	cmp	r3, r2
 800559a:	d004      	beq.n	80055a6 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	4a11      	ldr	r2, [pc, #68]	; (80055e8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80055a2:	4293      	cmp	r3, r2
 80055a4:	d10c      	bne.n	80055c0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80055a6:	68bb      	ldr	r3, [r7, #8]
 80055a8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80055ac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80055ae:	683b      	ldr	r3, [r7, #0]
 80055b0:	689b      	ldr	r3, [r3, #8]
 80055b2:	68ba      	ldr	r2, [r7, #8]
 80055b4:	4313      	orrs	r3, r2
 80055b6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	68ba      	ldr	r2, [r7, #8]
 80055be:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2201      	movs	r2, #1
 80055c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2200      	movs	r2, #0
 80055cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80055d0:	2300      	movs	r3, #0
}
 80055d2:	4618      	mov	r0, r3
 80055d4:	3714      	adds	r7, #20
 80055d6:	46bd      	mov	sp, r7
 80055d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055dc:	4770      	bx	lr
 80055de:	bf00      	nop
 80055e0:	40012c00 	.word	0x40012c00
 80055e4:	40000400 	.word	0x40000400
 80055e8:	40014000 	.word	0x40014000

080055ec <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80055ec:	b480      	push	{r7}
 80055ee:	b085      	sub	sp, #20
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
 80055f4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80055f6:	2300      	movs	r3, #0
 80055f8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005600:	2b01      	cmp	r3, #1
 8005602:	d101      	bne.n	8005608 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005604:	2302      	movs	r3, #2
 8005606:	e060      	b.n	80056ca <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2201      	movs	r2, #1
 800560c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005616:	683b      	ldr	r3, [r7, #0]
 8005618:	68db      	ldr	r3, [r3, #12]
 800561a:	4313      	orrs	r3, r2
 800561c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005624:	683b      	ldr	r3, [r7, #0]
 8005626:	689b      	ldr	r3, [r3, #8]
 8005628:	4313      	orrs	r3, r2
 800562a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005632:	683b      	ldr	r3, [r7, #0]
 8005634:	685b      	ldr	r3, [r3, #4]
 8005636:	4313      	orrs	r3, r2
 8005638:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005640:	683b      	ldr	r3, [r7, #0]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	4313      	orrs	r3, r2
 8005646:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800564e:	683b      	ldr	r3, [r7, #0]
 8005650:	691b      	ldr	r3, [r3, #16]
 8005652:	4313      	orrs	r3, r2
 8005654:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800565c:	683b      	ldr	r3, [r7, #0]
 800565e:	695b      	ldr	r3, [r3, #20]
 8005660:	4313      	orrs	r3, r2
 8005662:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800566a:	683b      	ldr	r3, [r7, #0]
 800566c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800566e:	4313      	orrs	r3, r2
 8005670:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8005678:	683b      	ldr	r3, [r7, #0]
 800567a:	699b      	ldr	r3, [r3, #24]
 800567c:	041b      	lsls	r3, r3, #16
 800567e:	4313      	orrs	r3, r2
 8005680:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	4a14      	ldr	r2, [pc, #80]	; (80056d8 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8005688:	4293      	cmp	r3, r2
 800568a:	d115      	bne.n	80056b8 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8005692:	683b      	ldr	r3, [r7, #0]
 8005694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005696:	051b      	lsls	r3, r3, #20
 8005698:	4313      	orrs	r3, r2
 800569a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80056a2:	683b      	ldr	r3, [r7, #0]
 80056a4:	69db      	ldr	r3, [r3, #28]
 80056a6:	4313      	orrs	r3, r2
 80056a8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	6a1b      	ldr	r3, [r3, #32]
 80056b4:	4313      	orrs	r3, r2
 80056b6:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	68fa      	ldr	r2, [r7, #12]
 80056be:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2200      	movs	r2, #0
 80056c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80056c8:	2300      	movs	r3, #0
}
 80056ca:	4618      	mov	r0, r3
 80056cc:	3714      	adds	r7, #20
 80056ce:	46bd      	mov	sp, r7
 80056d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d4:	4770      	bx	lr
 80056d6:	bf00      	nop
 80056d8:	40012c00 	.word	0x40012c00

080056dc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80056dc:	b480      	push	{r7}
 80056de:	b083      	sub	sp, #12
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80056e4:	bf00      	nop
 80056e6:	370c      	adds	r7, #12
 80056e8:	46bd      	mov	sp, r7
 80056ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ee:	4770      	bx	lr

080056f0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80056f0:	b480      	push	{r7}
 80056f2:	b083      	sub	sp, #12
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80056f8:	bf00      	nop
 80056fa:	370c      	adds	r7, #12
 80056fc:	46bd      	mov	sp, r7
 80056fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005702:	4770      	bx	lr

08005704 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005704:	b480      	push	{r7}
 8005706:	b083      	sub	sp, #12
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800570c:	bf00      	nop
 800570e:	370c      	adds	r7, #12
 8005710:	46bd      	mov	sp, r7
 8005712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005716:	4770      	bx	lr

08005718 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005718:	b580      	push	{r7, lr}
 800571a:	b082      	sub	sp, #8
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2b00      	cmp	r3, #0
 8005724:	d101      	bne.n	800572a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005726:	2301      	movs	r3, #1
 8005728:	e040      	b.n	80057ac <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800572e:	2b00      	cmp	r3, #0
 8005730:	d106      	bne.n	8005740 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	2200      	movs	r2, #0
 8005736:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800573a:	6878      	ldr	r0, [r7, #4]
 800573c:	f7fc ffd8 	bl	80026f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	2224      	movs	r2, #36	; 0x24
 8005744:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	681a      	ldr	r2, [r3, #0]
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f022 0201 	bic.w	r2, r2, #1
 8005754:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005756:	6878      	ldr	r0, [r7, #4]
 8005758:	f000 fa90 	bl	8005c7c <UART_SetConfig>
 800575c:	4603      	mov	r3, r0
 800575e:	2b01      	cmp	r3, #1
 8005760:	d101      	bne.n	8005766 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005762:	2301      	movs	r3, #1
 8005764:	e022      	b.n	80057ac <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800576a:	2b00      	cmp	r3, #0
 800576c:	d002      	beq.n	8005774 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800576e:	6878      	ldr	r0, [r7, #4]
 8005770:	f000 fc06 	bl	8005f80 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	685a      	ldr	r2, [r3, #4]
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005782:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	689a      	ldr	r2, [r3, #8]
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005792:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	681a      	ldr	r2, [r3, #0]
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f042 0201 	orr.w	r2, r2, #1
 80057a2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80057a4:	6878      	ldr	r0, [r7, #4]
 80057a6:	f000 fc8d 	bl	80060c4 <UART_CheckIdleState>
 80057aa:	4603      	mov	r3, r0
}
 80057ac:	4618      	mov	r0, r3
 80057ae:	3708      	adds	r7, #8
 80057b0:	46bd      	mov	sp, r7
 80057b2:	bd80      	pop	{r7, pc}

080057b4 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80057b4:	b580      	push	{r7, lr}
 80057b6:	b084      	sub	sp, #16
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	60f8      	str	r0, [r7, #12]
 80057bc:	60b9      	str	r1, [r7, #8]
 80057be:	4613      	mov	r3, r2
 80057c0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80057c6:	2b20      	cmp	r3, #32
 80057c8:	d164      	bne.n	8005894 <HAL_UART_Transmit_DMA+0xe0>
  {
    if ((pData == NULL) || (Size == 0U))
 80057ca:	68bb      	ldr	r3, [r7, #8]
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d002      	beq.n	80057d6 <HAL_UART_Transmit_DMA+0x22>
 80057d0:	88fb      	ldrh	r3, [r7, #6]
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d101      	bne.n	80057da <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 80057d6:	2301      	movs	r3, #1
 80057d8:	e05d      	b.n	8005896 <HAL_UART_Transmit_DMA+0xe2>
    }

    __HAL_LOCK(huart);
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80057e0:	2b01      	cmp	r3, #1
 80057e2:	d101      	bne.n	80057e8 <HAL_UART_Transmit_DMA+0x34>
 80057e4:	2302      	movs	r3, #2
 80057e6:	e056      	b.n	8005896 <HAL_UART_Transmit_DMA+0xe2>
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	2201      	movs	r2, #1
 80057ec:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pTxBuffPtr  = pData;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	68ba      	ldr	r2, [r7, #8]
 80057f4:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	88fa      	ldrh	r2, [r7, #6]
 80057fa:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	88fa      	ldrh	r2, [r7, #6]
 8005802:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	2200      	movs	r2, #0
 800580a:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	2221      	movs	r2, #33	; 0x21
 8005810:	675a      	str	r2, [r3, #116]	; 0x74

    if (huart->hdmatx != NULL)
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005816:	2b00      	cmp	r3, #0
 8005818:	d02a      	beq.n	8005870 <HAL_UART_Transmit_DMA+0xbc>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800581e:	4a20      	ldr	r2, [pc, #128]	; (80058a0 <HAL_UART_Transmit_DMA+0xec>)
 8005820:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005826:	4a1f      	ldr	r2, [pc, #124]	; (80058a4 <HAL_UART_Transmit_DMA+0xf0>)
 8005828:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800582e:	4a1e      	ldr	r2, [pc, #120]	; (80058a8 <HAL_UART_Transmit_DMA+0xf4>)
 8005830:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005836:	2200      	movs	r2, #0
 8005838:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	6e98      	ldr	r0, [r3, #104]	; 0x68
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005842:	4619      	mov	r1, r3
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	3328      	adds	r3, #40	; 0x28
 800584a:	461a      	mov	r2, r3
 800584c:	88fb      	ldrh	r3, [r7, #6]
 800584e:	f7fd fab5 	bl	8002dbc <HAL_DMA_Start_IT>
 8005852:	4603      	mov	r3, r0
 8005854:	2b00      	cmp	r3, #0
 8005856:	d00b      	beq.n	8005870 <HAL_UART_Transmit_DMA+0xbc>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	2210      	movs	r2, #16
 800585c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	2200      	movs	r2, #0
 8005862:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	2220      	movs	r2, #32
 800586a:	675a      	str	r2, [r3, #116]	; 0x74

        return HAL_ERROR;
 800586c:	2301      	movs	r3, #1
 800586e:	e012      	b.n	8005896 <HAL_UART_Transmit_DMA+0xe2>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	2240      	movs	r2, #64	; 0x40
 8005876:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	2200      	movs	r2, #0
 800587c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	689a      	ldr	r2, [r3, #8]
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800588e:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 8005890:	2300      	movs	r3, #0
 8005892:	e000      	b.n	8005896 <HAL_UART_Transmit_DMA+0xe2>
  }
  else
  {
    return HAL_BUSY;
 8005894:	2302      	movs	r3, #2
  }
}
 8005896:	4618      	mov	r0, r3
 8005898:	3710      	adds	r7, #16
 800589a:	46bd      	mov	sp, r7
 800589c:	bd80      	pop	{r7, pc}
 800589e:	bf00      	nop
 80058a0:	080062af 	.word	0x080062af
 80058a4:	080062fd 	.word	0x080062fd
 80058a8:	08006397 	.word	0x08006397

080058ac <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80058ac:	b580      	push	{r7, lr}
 80058ae:	b084      	sub	sp, #16
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	60f8      	str	r0, [r7, #12]
 80058b4:	60b9      	str	r1, [r7, #8]
 80058b6:	4613      	mov	r3, r2
 80058b8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80058be:	2b20      	cmp	r3, #32
 80058c0:	d16c      	bne.n	800599c <HAL_UART_Receive_DMA+0xf0>
  {
    if ((pData == NULL) || (Size == 0U))
 80058c2:	68bb      	ldr	r3, [r7, #8]
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d002      	beq.n	80058ce <HAL_UART_Receive_DMA+0x22>
 80058c8:	88fb      	ldrh	r3, [r7, #6]
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d101      	bne.n	80058d2 <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 80058ce:	2301      	movs	r3, #1
 80058d0:	e065      	b.n	800599e <HAL_UART_Receive_DMA+0xf2>
    }

    __HAL_LOCK(huart);
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80058d8:	2b01      	cmp	r3, #1
 80058da:	d101      	bne.n	80058e0 <HAL_UART_Receive_DMA+0x34>
 80058dc:	2302      	movs	r3, #2
 80058de:	e05e      	b.n	800599e <HAL_UART_Receive_DMA+0xf2>
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	2201      	movs	r2, #1
 80058e4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr = pData;
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	68ba      	ldr	r2, [r7, #8]
 80058ec:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize = Size;
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	88fa      	ldrh	r2, [r7, #6]
 80058f2:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	2200      	movs	r2, #0
 80058fa:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	2222      	movs	r2, #34	; 0x22
 8005900:	679a      	str	r2, [r3, #120]	; 0x78

    if (huart->hdmarx != NULL)
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005906:	2b00      	cmp	r3, #0
 8005908:	d02a      	beq.n	8005960 <HAL_UART_Receive_DMA+0xb4>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800590e:	4a26      	ldr	r2, [pc, #152]	; (80059a8 <HAL_UART_Receive_DMA+0xfc>)
 8005910:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005916:	4a25      	ldr	r2, [pc, #148]	; (80059ac <HAL_UART_Receive_DMA+0x100>)
 8005918:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800591e:	4a24      	ldr	r2, [pc, #144]	; (80059b0 <HAL_UART_Receive_DMA+0x104>)
 8005920:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA abort callback */
      huart->hdmarx->XferAbortCallback = NULL;
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005926:	2200      	movs	r2, #0
 8005928:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	3324      	adds	r3, #36	; 0x24
 8005934:	4619      	mov	r1, r3
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800593a:	461a      	mov	r2, r3
 800593c:	88fb      	ldrh	r3, [r7, #6]
 800593e:	f7fd fa3d 	bl	8002dbc <HAL_DMA_Start_IT>
 8005942:	4603      	mov	r3, r0
 8005944:	2b00      	cmp	r3, #0
 8005946:	d00b      	beq.n	8005960 <HAL_UART_Receive_DMA+0xb4>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	2210      	movs	r2, #16
 800594c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	2200      	movs	r2, #0
 8005952:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	2220      	movs	r2, #32
 800595a:	675a      	str	r2, [r3, #116]	; 0x74

        return HAL_ERROR;
 800595c:	2301      	movs	r3, #1
 800595e:	e01e      	b.n	800599e <HAL_UART_Receive_DMA+0xf2>
      }
    }
    __HAL_UNLOCK(huart);
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	2200      	movs	r2, #0
 8005964:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	681a      	ldr	r2, [r3, #0]
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005976:	601a      	str	r2, [r3, #0]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	689a      	ldr	r2, [r3, #8]
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	f042 0201 	orr.w	r2, r2, #1
 8005986:	609a      	str	r2, [r3, #8]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	689a      	ldr	r2, [r3, #8]
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005996:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 8005998:	2300      	movs	r3, #0
 800599a:	e000      	b.n	800599e <HAL_UART_Receive_DMA+0xf2>
  }
  else
  {
    return HAL_BUSY;
 800599c:	2302      	movs	r3, #2
  }
}
 800599e:	4618      	mov	r0, r3
 80059a0:	3710      	adds	r7, #16
 80059a2:	46bd      	mov	sp, r7
 80059a4:	bd80      	pop	{r7, pc}
 80059a6:	bf00      	nop
 80059a8:	08006319 	.word	0x08006319
 80059ac:	0800637b 	.word	0x0800637b
 80059b0:	08006397 	.word	0x08006397

080059b4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80059b4:	b580      	push	{r7, lr}
 80059b6:	b088      	sub	sp, #32
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	69db      	ldr	r3, [r3, #28]
 80059c2:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	689b      	ldr	r3, [r3, #8]
 80059d2:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80059d4:	69fa      	ldr	r2, [r7, #28]
 80059d6:	f640 030f 	movw	r3, #2063	; 0x80f
 80059da:	4013      	ands	r3, r2
 80059dc:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 80059de:	693b      	ldr	r3, [r7, #16]
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d113      	bne.n	8005a0c <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80059e4:	69fb      	ldr	r3, [r7, #28]
 80059e6:	f003 0320 	and.w	r3, r3, #32
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d00e      	beq.n	8005a0c <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80059ee:	69bb      	ldr	r3, [r7, #24]
 80059f0:	f003 0320 	and.w	r3, r3, #32
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d009      	beq.n	8005a0c <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	f000 8114 	beq.w	8005c2a <HAL_UART_IRQHandler+0x276>
      {
        huart->RxISR(huart);
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a06:	6878      	ldr	r0, [r7, #4]
 8005a08:	4798      	blx	r3
      }
      return;
 8005a0a:	e10e      	b.n	8005c2a <HAL_UART_IRQHandler+0x276>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005a0c:	693b      	ldr	r3, [r7, #16]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	f000 80d6 	beq.w	8005bc0 <HAL_UART_IRQHandler+0x20c>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005a14:	697b      	ldr	r3, [r7, #20]
 8005a16:	f003 0301 	and.w	r3, r3, #1
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d105      	bne.n	8005a2a <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8005a1e:	69bb      	ldr	r3, [r7, #24]
 8005a20:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	f000 80cb 	beq.w	8005bc0 <HAL_UART_IRQHandler+0x20c>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005a2a:	69fb      	ldr	r3, [r7, #28]
 8005a2c:	f003 0301 	and.w	r3, r3, #1
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d00e      	beq.n	8005a52 <HAL_UART_IRQHandler+0x9e>
 8005a34:	69bb      	ldr	r3, [r7, #24]
 8005a36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d009      	beq.n	8005a52 <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	2201      	movs	r2, #1
 8005a44:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005a4a:	f043 0201 	orr.w	r2, r3, #1
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005a52:	69fb      	ldr	r3, [r7, #28]
 8005a54:	f003 0302 	and.w	r3, r3, #2
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d00e      	beq.n	8005a7a <HAL_UART_IRQHandler+0xc6>
 8005a5c:	697b      	ldr	r3, [r7, #20]
 8005a5e:	f003 0301 	and.w	r3, r3, #1
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d009      	beq.n	8005a7a <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	2202      	movs	r2, #2
 8005a6c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005a72:	f043 0204 	orr.w	r2, r3, #4
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005a7a:	69fb      	ldr	r3, [r7, #28]
 8005a7c:	f003 0304 	and.w	r3, r3, #4
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d00e      	beq.n	8005aa2 <HAL_UART_IRQHandler+0xee>
 8005a84:	697b      	ldr	r3, [r7, #20]
 8005a86:	f003 0301 	and.w	r3, r3, #1
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d009      	beq.n	8005aa2 <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	2204      	movs	r2, #4
 8005a94:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005a9a:	f043 0202 	orr.w	r2, r3, #2
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005aa2:	69fb      	ldr	r3, [r7, #28]
 8005aa4:	f003 0308 	and.w	r3, r3, #8
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d013      	beq.n	8005ad4 <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005aac:	69bb      	ldr	r3, [r7, #24]
 8005aae:	f003 0320 	and.w	r3, r3, #32
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d104      	bne.n	8005ac0 <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005ab6:	697b      	ldr	r3, [r7, #20]
 8005ab8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d009      	beq.n	8005ad4 <HAL_UART_IRQHandler+0x120>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	2208      	movs	r2, #8
 8005ac6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005acc:	f043 0208 	orr.w	r2, r3, #8
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005ad4:	69fb      	ldr	r3, [r7, #28]
 8005ad6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d00f      	beq.n	8005afe <HAL_UART_IRQHandler+0x14a>
 8005ade:	69bb      	ldr	r3, [r7, #24]
 8005ae0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d00a      	beq.n	8005afe <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005af0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005af6:	f043 0220 	orr.w	r2, r3, #32
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	f000 8093 	beq.w	8005c2e <HAL_UART_IRQHandler+0x27a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005b08:	69fb      	ldr	r3, [r7, #28]
 8005b0a:	f003 0320 	and.w	r3, r3, #32
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d00c      	beq.n	8005b2c <HAL_UART_IRQHandler+0x178>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005b12:	69bb      	ldr	r3, [r7, #24]
 8005b14:	f003 0320 	and.w	r3, r3, #32
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d007      	beq.n	8005b2c <HAL_UART_IRQHandler+0x178>
      {
        if (huart->RxISR != NULL)
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d003      	beq.n	8005b2c <HAL_UART_IRQHandler+0x178>
        {
          huart->RxISR(huart);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b28:	6878      	ldr	r0, [r7, #4]
 8005b2a:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005b30:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	689b      	ldr	r3, [r3, #8]
 8005b38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b3c:	2b40      	cmp	r3, #64	; 0x40
 8005b3e:	d004      	beq.n	8005b4a <HAL_UART_IRQHandler+0x196>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d031      	beq.n	8005bae <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005b4a:	6878      	ldr	r0, [r7, #4]
 8005b4c:	f000 fb8f 	bl	800626e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	689b      	ldr	r3, [r3, #8]
 8005b56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b5a:	2b40      	cmp	r3, #64	; 0x40
 8005b5c:	d123      	bne.n	8005ba6 <HAL_UART_IRQHandler+0x1f2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	689a      	ldr	r2, [r3, #8]
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b6c:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d013      	beq.n	8005b9e <HAL_UART_IRQHandler+0x1ea>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005b7a:	4a30      	ldr	r2, [pc, #192]	; (8005c3c <HAL_UART_IRQHandler+0x288>)
 8005b7c:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005b82:	4618      	mov	r0, r3
 8005b84:	f7fd f979 	bl	8002e7a <HAL_DMA_Abort_IT>
 8005b88:	4603      	mov	r3, r0
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d016      	beq.n	8005bbc <HAL_UART_IRQHandler+0x208>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005b92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b94:	687a      	ldr	r2, [r7, #4]
 8005b96:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8005b98:	4610      	mov	r0, r2
 8005b9a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b9c:	e00e      	b.n	8005bbc <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005b9e:	6878      	ldr	r0, [r7, #4]
 8005ba0:	f000 f862 	bl	8005c68 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ba4:	e00a      	b.n	8005bbc <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005ba6:	6878      	ldr	r0, [r7, #4]
 8005ba8:	f000 f85e 	bl	8005c68 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005bac:	e006      	b.n	8005bbc <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005bae:	6878      	ldr	r0, [r7, #4]
 8005bb0:	f000 f85a 	bl	8005c68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2200      	movs	r2, #0
 8005bb8:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 8005bba:	e038      	b.n	8005c2e <HAL_UART_IRQHandler+0x27a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005bbc:	bf00      	nop
    return;
 8005bbe:	e036      	b.n	8005c2e <HAL_UART_IRQHandler+0x27a>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005bc0:	69fb      	ldr	r3, [r7, #28]
 8005bc2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d00d      	beq.n	8005be6 <HAL_UART_IRQHandler+0x232>
 8005bca:	697b      	ldr	r3, [r7, #20]
 8005bcc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d008      	beq.n	8005be6 <HAL_UART_IRQHandler+0x232>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005bdc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005bde:	6878      	ldr	r0, [r7, #4]
 8005be0:	f000 fc44 	bl	800646c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005be4:	e026      	b.n	8005c34 <HAL_UART_IRQHandler+0x280>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005be6:	69fb      	ldr	r3, [r7, #28]
 8005be8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d00d      	beq.n	8005c0c <HAL_UART_IRQHandler+0x258>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005bf0:	69bb      	ldr	r3, [r7, #24]
 8005bf2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d008      	beq.n	8005c0c <HAL_UART_IRQHandler+0x258>
  {
    if (huart->TxISR != NULL)
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d017      	beq.n	8005c32 <HAL_UART_IRQHandler+0x27e>
    {
      huart->TxISR(huart);
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005c06:	6878      	ldr	r0, [r7, #4]
 8005c08:	4798      	blx	r3
    }
    return;
 8005c0a:	e012      	b.n	8005c32 <HAL_UART_IRQHandler+0x27e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005c0c:	69fb      	ldr	r3, [r7, #28]
 8005c0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d00e      	beq.n	8005c34 <HAL_UART_IRQHandler+0x280>
 8005c16:	69bb      	ldr	r3, [r7, #24]
 8005c18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d009      	beq.n	8005c34 <HAL_UART_IRQHandler+0x280>
  {
    UART_EndTransmit_IT(huart);
 8005c20:	6878      	ldr	r0, [r7, #4]
 8005c22:	f000 fc0a 	bl	800643a <UART_EndTransmit_IT>
    return;
 8005c26:	bf00      	nop
 8005c28:	e004      	b.n	8005c34 <HAL_UART_IRQHandler+0x280>
      return;
 8005c2a:	bf00      	nop
 8005c2c:	e002      	b.n	8005c34 <HAL_UART_IRQHandler+0x280>
    return;
 8005c2e:	bf00      	nop
 8005c30:	e000      	b.n	8005c34 <HAL_UART_IRQHandler+0x280>
    return;
 8005c32:	bf00      	nop
  }

}
 8005c34:	3720      	adds	r7, #32
 8005c36:	46bd      	mov	sp, r7
 8005c38:	bd80      	pop	{r7, pc}
 8005c3a:	bf00      	nop
 8005c3c:	0800640f 	.word	0x0800640f

08005c40 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005c40:	b480      	push	{r7}
 8005c42:	b083      	sub	sp, #12
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8005c48:	bf00      	nop
 8005c4a:	370c      	adds	r7, #12
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c52:	4770      	bx	lr

08005c54 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005c54:	b480      	push	{r7}
 8005c56:	b083      	sub	sp, #12
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8005c5c:	bf00      	nop
 8005c5e:	370c      	adds	r7, #12
 8005c60:	46bd      	mov	sp, r7
 8005c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c66:	4770      	bx	lr

08005c68 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005c68:	b480      	push	{r7}
 8005c6a:	b083      	sub	sp, #12
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005c70:	bf00      	nop
 8005c72:	370c      	adds	r7, #12
 8005c74:	46bd      	mov	sp, r7
 8005c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7a:	4770      	bx	lr

08005c7c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005c7c:	b580      	push	{r7, lr}
 8005c7e:	b088      	sub	sp, #32
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8005c84:	2300      	movs	r3, #0
 8005c86:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8005c88:	2300      	movs	r3, #0
 8005c8a:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	689a      	ldr	r2, [r3, #8]
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	691b      	ldr	r3, [r3, #16]
 8005c94:	431a      	orrs	r2, r3
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	695b      	ldr	r3, [r3, #20]
 8005c9a:	431a      	orrs	r2, r3
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	69db      	ldr	r3, [r3, #28]
 8005ca0:	4313      	orrs	r3, r2
 8005ca2:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	681a      	ldr	r2, [r3, #0]
 8005caa:	4ba2      	ldr	r3, [pc, #648]	; (8005f34 <UART_SetConfig+0x2b8>)
 8005cac:	4013      	ands	r3, r2
 8005cae:	687a      	ldr	r2, [r7, #4]
 8005cb0:	6812      	ldr	r2, [r2, #0]
 8005cb2:	6939      	ldr	r1, [r7, #16]
 8005cb4:	430b      	orrs	r3, r1
 8005cb6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	685b      	ldr	r3, [r3, #4]
 8005cbe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	68da      	ldr	r2, [r3, #12]
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	430a      	orrs	r2, r1
 8005ccc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	699b      	ldr	r3, [r3, #24]
 8005cd2:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	6a1b      	ldr	r3, [r3, #32]
 8005cd8:	693a      	ldr	r2, [r7, #16]
 8005cda:	4313      	orrs	r3, r2
 8005cdc:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	689b      	ldr	r3, [r3, #8]
 8005ce4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	693a      	ldr	r2, [r7, #16]
 8005cee:	430a      	orrs	r2, r1
 8005cf0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	4a90      	ldr	r2, [pc, #576]	; (8005f38 <UART_SetConfig+0x2bc>)
 8005cf8:	4293      	cmp	r3, r2
 8005cfa:	d121      	bne.n	8005d40 <UART_SetConfig+0xc4>
 8005cfc:	4b8f      	ldr	r3, [pc, #572]	; (8005f3c <UART_SetConfig+0x2c0>)
 8005cfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d00:	f003 0303 	and.w	r3, r3, #3
 8005d04:	2b03      	cmp	r3, #3
 8005d06:	d817      	bhi.n	8005d38 <UART_SetConfig+0xbc>
 8005d08:	a201      	add	r2, pc, #4	; (adr r2, 8005d10 <UART_SetConfig+0x94>)
 8005d0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d0e:	bf00      	nop
 8005d10:	08005d21 	.word	0x08005d21
 8005d14:	08005d2d 	.word	0x08005d2d
 8005d18:	08005d33 	.word	0x08005d33
 8005d1c:	08005d27 	.word	0x08005d27
 8005d20:	2300      	movs	r3, #0
 8005d22:	77fb      	strb	r3, [r7, #31]
 8005d24:	e01e      	b.n	8005d64 <UART_SetConfig+0xe8>
 8005d26:	2302      	movs	r3, #2
 8005d28:	77fb      	strb	r3, [r7, #31]
 8005d2a:	e01b      	b.n	8005d64 <UART_SetConfig+0xe8>
 8005d2c:	2304      	movs	r3, #4
 8005d2e:	77fb      	strb	r3, [r7, #31]
 8005d30:	e018      	b.n	8005d64 <UART_SetConfig+0xe8>
 8005d32:	2308      	movs	r3, #8
 8005d34:	77fb      	strb	r3, [r7, #31]
 8005d36:	e015      	b.n	8005d64 <UART_SetConfig+0xe8>
 8005d38:	2310      	movs	r3, #16
 8005d3a:	77fb      	strb	r3, [r7, #31]
 8005d3c:	bf00      	nop
 8005d3e:	e011      	b.n	8005d64 <UART_SetConfig+0xe8>
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	4a7e      	ldr	r2, [pc, #504]	; (8005f40 <UART_SetConfig+0x2c4>)
 8005d46:	4293      	cmp	r3, r2
 8005d48:	d102      	bne.n	8005d50 <UART_SetConfig+0xd4>
 8005d4a:	2300      	movs	r3, #0
 8005d4c:	77fb      	strb	r3, [r7, #31]
 8005d4e:	e009      	b.n	8005d64 <UART_SetConfig+0xe8>
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	4a7b      	ldr	r2, [pc, #492]	; (8005f44 <UART_SetConfig+0x2c8>)
 8005d56:	4293      	cmp	r3, r2
 8005d58:	d102      	bne.n	8005d60 <UART_SetConfig+0xe4>
 8005d5a:	2300      	movs	r3, #0
 8005d5c:	77fb      	strb	r3, [r7, #31]
 8005d5e:	e001      	b.n	8005d64 <UART_SetConfig+0xe8>
 8005d60:	2310      	movs	r3, #16
 8005d62:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	69db      	ldr	r3, [r3, #28]
 8005d68:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d6c:	f040 8082 	bne.w	8005e74 <UART_SetConfig+0x1f8>
  {
    switch (clocksource)
 8005d70:	7ffb      	ldrb	r3, [r7, #31]
 8005d72:	2b08      	cmp	r3, #8
 8005d74:	d85e      	bhi.n	8005e34 <UART_SetConfig+0x1b8>
 8005d76:	a201      	add	r2, pc, #4	; (adr r2, 8005d7c <UART_SetConfig+0x100>)
 8005d78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d7c:	08005da1 	.word	0x08005da1
 8005d80:	08005dc1 	.word	0x08005dc1
 8005d84:	08005de1 	.word	0x08005de1
 8005d88:	08005e35 	.word	0x08005e35
 8005d8c:	08005dfd 	.word	0x08005dfd
 8005d90:	08005e35 	.word	0x08005e35
 8005d94:	08005e35 	.word	0x08005e35
 8005d98:	08005e35 	.word	0x08005e35
 8005d9c:	08005e1d 	.word	0x08005e1d
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005da0:	f7fe fc1e 	bl	80045e0 <HAL_RCC_GetPCLK1Freq>
 8005da4:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	005a      	lsls	r2, r3, #1
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	685b      	ldr	r3, [r3, #4]
 8005dae:	085b      	lsrs	r3, r3, #1
 8005db0:	441a      	add	r2, r3
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	685b      	ldr	r3, [r3, #4]
 8005db6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005dba:	b29b      	uxth	r3, r3
 8005dbc:	61bb      	str	r3, [r7, #24]
        break;
 8005dbe:	e03c      	b.n	8005e3a <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005dc0:	f7fe fc30 	bl	8004624 <HAL_RCC_GetPCLK2Freq>
 8005dc4:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	005a      	lsls	r2, r3, #1
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	685b      	ldr	r3, [r3, #4]
 8005dce:	085b      	lsrs	r3, r3, #1
 8005dd0:	441a      	add	r2, r3
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	685b      	ldr	r3, [r3, #4]
 8005dd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005dda:	b29b      	uxth	r3, r3
 8005ddc:	61bb      	str	r3, [r7, #24]
        break;
 8005dde:	e02c      	b.n	8005e3a <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	685b      	ldr	r3, [r3, #4]
 8005de4:	085b      	lsrs	r3, r3, #1
 8005de6:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8005dea:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8005dee:	687a      	ldr	r2, [r7, #4]
 8005df0:	6852      	ldr	r2, [r2, #4]
 8005df2:	fbb3 f3f2 	udiv	r3, r3, r2
 8005df6:	b29b      	uxth	r3, r3
 8005df8:	61bb      	str	r3, [r7, #24]
        break;
 8005dfa:	e01e      	b.n	8005e3a <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005dfc:	f7fe fb7a 	bl	80044f4 <HAL_RCC_GetSysClockFreq>
 8005e00:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	005a      	lsls	r2, r3, #1
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	685b      	ldr	r3, [r3, #4]
 8005e0a:	085b      	lsrs	r3, r3, #1
 8005e0c:	441a      	add	r2, r3
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	685b      	ldr	r3, [r3, #4]
 8005e12:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e16:	b29b      	uxth	r3, r3
 8005e18:	61bb      	str	r3, [r7, #24]
        break;
 8005e1a:	e00e      	b.n	8005e3a <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	685b      	ldr	r3, [r3, #4]
 8005e20:	085b      	lsrs	r3, r3, #1
 8005e22:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	685b      	ldr	r3, [r3, #4]
 8005e2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e2e:	b29b      	uxth	r3, r3
 8005e30:	61bb      	str	r3, [r7, #24]
        break;
 8005e32:	e002      	b.n	8005e3a <UART_SetConfig+0x1be>
      default:
        ret = HAL_ERROR;
 8005e34:	2301      	movs	r3, #1
 8005e36:	75fb      	strb	r3, [r7, #23]
        break;
 8005e38:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005e3a:	69bb      	ldr	r3, [r7, #24]
 8005e3c:	2b0f      	cmp	r3, #15
 8005e3e:	d916      	bls.n	8005e6e <UART_SetConfig+0x1f2>
 8005e40:	69bb      	ldr	r3, [r7, #24]
 8005e42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e46:	d212      	bcs.n	8005e6e <UART_SetConfig+0x1f2>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005e48:	69bb      	ldr	r3, [r7, #24]
 8005e4a:	b29b      	uxth	r3, r3
 8005e4c:	f023 030f 	bic.w	r3, r3, #15
 8005e50:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005e52:	69bb      	ldr	r3, [r7, #24]
 8005e54:	085b      	lsrs	r3, r3, #1
 8005e56:	b29b      	uxth	r3, r3
 8005e58:	f003 0307 	and.w	r3, r3, #7
 8005e5c:	b29a      	uxth	r2, r3
 8005e5e:	897b      	ldrh	r3, [r7, #10]
 8005e60:	4313      	orrs	r3, r2
 8005e62:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	897a      	ldrh	r2, [r7, #10]
 8005e6a:	60da      	str	r2, [r3, #12]
 8005e6c:	e07d      	b.n	8005f6a <UART_SetConfig+0x2ee>
    }
    else
    {
      ret = HAL_ERROR;
 8005e6e:	2301      	movs	r3, #1
 8005e70:	75fb      	strb	r3, [r7, #23]
 8005e72:	e07a      	b.n	8005f6a <UART_SetConfig+0x2ee>
    }
  }
  else
  {
    switch (clocksource)
 8005e74:	7ffb      	ldrb	r3, [r7, #31]
 8005e76:	2b08      	cmp	r3, #8
 8005e78:	d866      	bhi.n	8005f48 <UART_SetConfig+0x2cc>
 8005e7a:	a201      	add	r2, pc, #4	; (adr r2, 8005e80 <UART_SetConfig+0x204>)
 8005e7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e80:	08005ea5 	.word	0x08005ea5
 8005e84:	08005ec3 	.word	0x08005ec3
 8005e88:	08005ee1 	.word	0x08005ee1
 8005e8c:	08005f49 	.word	0x08005f49
 8005e90:	08005efd 	.word	0x08005efd
 8005e94:	08005f49 	.word	0x08005f49
 8005e98:	08005f49 	.word	0x08005f49
 8005e9c:	08005f49 	.word	0x08005f49
 8005ea0:	08005f1b 	.word	0x08005f1b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005ea4:	f7fe fb9c 	bl	80045e0 <HAL_RCC_GetPCLK1Freq>
 8005ea8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	685b      	ldr	r3, [r3, #4]
 8005eae:	085a      	lsrs	r2, r3, #1
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	441a      	add	r2, r3
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	685b      	ldr	r3, [r3, #4]
 8005eb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ebc:	b29b      	uxth	r3, r3
 8005ebe:	61bb      	str	r3, [r7, #24]
        break;
 8005ec0:	e045      	b.n	8005f4e <UART_SetConfig+0x2d2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005ec2:	f7fe fbaf 	bl	8004624 <HAL_RCC_GetPCLK2Freq>
 8005ec6:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	685b      	ldr	r3, [r3, #4]
 8005ecc:	085a      	lsrs	r2, r3, #1
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	441a      	add	r2, r3
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	685b      	ldr	r3, [r3, #4]
 8005ed6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005eda:	b29b      	uxth	r3, r3
 8005edc:	61bb      	str	r3, [r7, #24]
        break;
 8005ede:	e036      	b.n	8005f4e <UART_SetConfig+0x2d2>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	685b      	ldr	r3, [r3, #4]
 8005ee4:	085b      	lsrs	r3, r3, #1
 8005ee6:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 8005eea:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 8005eee:	687a      	ldr	r2, [r7, #4]
 8005ef0:	6852      	ldr	r2, [r2, #4]
 8005ef2:	fbb3 f3f2 	udiv	r3, r3, r2
 8005ef6:	b29b      	uxth	r3, r3
 8005ef8:	61bb      	str	r3, [r7, #24]
        break;
 8005efa:	e028      	b.n	8005f4e <UART_SetConfig+0x2d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005efc:	f7fe fafa 	bl	80044f4 <HAL_RCC_GetSysClockFreq>
 8005f00:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	685b      	ldr	r3, [r3, #4]
 8005f06:	085a      	lsrs	r2, r3, #1
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	441a      	add	r2, r3
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	685b      	ldr	r3, [r3, #4]
 8005f10:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f14:	b29b      	uxth	r3, r3
 8005f16:	61bb      	str	r3, [r7, #24]
        break;
 8005f18:	e019      	b.n	8005f4e <UART_SetConfig+0x2d2>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	685b      	ldr	r3, [r3, #4]
 8005f1e:	085b      	lsrs	r3, r3, #1
 8005f20:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	685b      	ldr	r3, [r3, #4]
 8005f28:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f2c:	b29b      	uxth	r3, r3
 8005f2e:	61bb      	str	r3, [r7, #24]
        break;
 8005f30:	e00d      	b.n	8005f4e <UART_SetConfig+0x2d2>
 8005f32:	bf00      	nop
 8005f34:	efff69f3 	.word	0xefff69f3
 8005f38:	40013800 	.word	0x40013800
 8005f3c:	40021000 	.word	0x40021000
 8005f40:	40004400 	.word	0x40004400
 8005f44:	40004800 	.word	0x40004800
      default:
        ret = HAL_ERROR;
 8005f48:	2301      	movs	r3, #1
 8005f4a:	75fb      	strb	r3, [r7, #23]
        break;
 8005f4c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005f4e:	69bb      	ldr	r3, [r7, #24]
 8005f50:	2b0f      	cmp	r3, #15
 8005f52:	d908      	bls.n	8005f66 <UART_SetConfig+0x2ea>
 8005f54:	69bb      	ldr	r3, [r7, #24]
 8005f56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f5a:	d204      	bcs.n	8005f66 <UART_SetConfig+0x2ea>
    {
      huart->Instance->BRR = usartdiv;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	69ba      	ldr	r2, [r7, #24]
 8005f62:	60da      	str	r2, [r3, #12]
 8005f64:	e001      	b.n	8005f6a <UART_SetConfig+0x2ee>
    }
    else
    {
      ret = HAL_ERROR;
 8005f66:	2301      	movs	r3, #1
 8005f68:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	2200      	movs	r2, #0
 8005f6e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2200      	movs	r2, #0
 8005f74:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8005f76:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f78:	4618      	mov	r0, r3
 8005f7a:	3720      	adds	r7, #32
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	bd80      	pop	{r7, pc}

08005f80 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005f80:	b480      	push	{r7}
 8005f82:	b083      	sub	sp, #12
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f8c:	f003 0301 	and.w	r3, r3, #1
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d00a      	beq.n	8005faa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	685b      	ldr	r3, [r3, #4]
 8005f9a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	430a      	orrs	r2, r1
 8005fa8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fae:	f003 0302 	and.w	r3, r3, #2
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d00a      	beq.n	8005fcc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	685b      	ldr	r3, [r3, #4]
 8005fbc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	430a      	orrs	r2, r1
 8005fca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fd0:	f003 0304 	and.w	r3, r3, #4
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d00a      	beq.n	8005fee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	685b      	ldr	r3, [r3, #4]
 8005fde:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	430a      	orrs	r2, r1
 8005fec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ff2:	f003 0308 	and.w	r3, r3, #8
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d00a      	beq.n	8006010 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	685b      	ldr	r3, [r3, #4]
 8006000:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	430a      	orrs	r2, r1
 800600e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006014:	f003 0310 	and.w	r3, r3, #16
 8006018:	2b00      	cmp	r3, #0
 800601a:	d00a      	beq.n	8006032 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	689b      	ldr	r3, [r3, #8]
 8006022:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	430a      	orrs	r2, r1
 8006030:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006036:	f003 0320 	and.w	r3, r3, #32
 800603a:	2b00      	cmp	r3, #0
 800603c:	d00a      	beq.n	8006054 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	689b      	ldr	r3, [r3, #8]
 8006044:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	430a      	orrs	r2, r1
 8006052:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006058:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800605c:	2b00      	cmp	r3, #0
 800605e:	d01a      	beq.n	8006096 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	685b      	ldr	r3, [r3, #4]
 8006066:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	430a      	orrs	r2, r1
 8006074:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800607a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800607e:	d10a      	bne.n	8006096 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	685b      	ldr	r3, [r3, #4]
 8006086:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	430a      	orrs	r2, r1
 8006094:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800609a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d00a      	beq.n	80060b8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	685b      	ldr	r3, [r3, #4]
 80060a8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	430a      	orrs	r2, r1
 80060b6:	605a      	str	r2, [r3, #4]
  }
}
 80060b8:	bf00      	nop
 80060ba:	370c      	adds	r7, #12
 80060bc:	46bd      	mov	sp, r7
 80060be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c2:	4770      	bx	lr

080060c4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80060c4:	b580      	push	{r7, lr}
 80060c6:	b086      	sub	sp, #24
 80060c8:	af02      	add	r7, sp, #8
 80060ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	2200      	movs	r2, #0
 80060d0:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80060d2:	f7fc fced 	bl	8002ab0 <HAL_GetTick>
 80060d6:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	f003 0308 	and.w	r3, r3, #8
 80060e2:	2b08      	cmp	r3, #8
 80060e4:	d10e      	bne.n	8006104 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80060e6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80060ea:	9300      	str	r3, [sp, #0]
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	2200      	movs	r2, #0
 80060f0:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80060f4:	6878      	ldr	r0, [r7, #4]
 80060f6:	f000 f82a 	bl	800614e <UART_WaitOnFlagUntilTimeout>
 80060fa:	4603      	mov	r3, r0
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d001      	beq.n	8006104 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006100:	2303      	movs	r3, #3
 8006102:	e020      	b.n	8006146 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	f003 0304 	and.w	r3, r3, #4
 800610e:	2b04      	cmp	r3, #4
 8006110:	d10e      	bne.n	8006130 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006112:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006116:	9300      	str	r3, [sp, #0]
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	2200      	movs	r2, #0
 800611c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006120:	6878      	ldr	r0, [r7, #4]
 8006122:	f000 f814 	bl	800614e <UART_WaitOnFlagUntilTimeout>
 8006126:	4603      	mov	r3, r0
 8006128:	2b00      	cmp	r3, #0
 800612a:	d001      	beq.n	8006130 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800612c:	2303      	movs	r3, #3
 800612e:	e00a      	b.n	8006146 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	2220      	movs	r2, #32
 8006134:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	2220      	movs	r2, #32
 800613a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	2200      	movs	r2, #0
 8006140:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8006144:	2300      	movs	r3, #0
}
 8006146:	4618      	mov	r0, r3
 8006148:	3710      	adds	r7, #16
 800614a:	46bd      	mov	sp, r7
 800614c:	bd80      	pop	{r7, pc}

0800614e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800614e:	b580      	push	{r7, lr}
 8006150:	b084      	sub	sp, #16
 8006152:	af00      	add	r7, sp, #0
 8006154:	60f8      	str	r0, [r7, #12]
 8006156:	60b9      	str	r1, [r7, #8]
 8006158:	603b      	str	r3, [r7, #0]
 800615a:	4613      	mov	r3, r2
 800615c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800615e:	e05d      	b.n	800621c <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006160:	69bb      	ldr	r3, [r7, #24]
 8006162:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006166:	d059      	beq.n	800621c <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006168:	f7fc fca2 	bl	8002ab0 <HAL_GetTick>
 800616c:	4602      	mov	r2, r0
 800616e:	683b      	ldr	r3, [r7, #0]
 8006170:	1ad3      	subs	r3, r2, r3
 8006172:	69ba      	ldr	r2, [r7, #24]
 8006174:	429a      	cmp	r2, r3
 8006176:	d302      	bcc.n	800617e <UART_WaitOnFlagUntilTimeout+0x30>
 8006178:	69bb      	ldr	r3, [r7, #24]
 800617a:	2b00      	cmp	r3, #0
 800617c:	d11b      	bne.n	80061b6 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	681a      	ldr	r2, [r3, #0]
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800618c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	689a      	ldr	r2, [r3, #8]
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	f022 0201 	bic.w	r2, r2, #1
 800619c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	2220      	movs	r2, #32
 80061a2:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	2220      	movs	r2, #32
 80061a8:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	2200      	movs	r2, #0
 80061ae:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 80061b2:	2303      	movs	r3, #3
 80061b4:	e042      	b.n	800623c <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	f003 0304 	and.w	r3, r3, #4
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d02b      	beq.n	800621c <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	69db      	ldr	r3, [r3, #28]
 80061ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80061ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80061d2:	d123      	bne.n	800621c <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80061dc:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	681a      	ldr	r2, [r3, #0]
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80061ec:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	689a      	ldr	r2, [r3, #8]
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	f022 0201 	bic.w	r2, r2, #1
 80061fc:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	2220      	movs	r2, #32
 8006202:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	2220      	movs	r2, #32
 8006208:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	2220      	movs	r2, #32
 800620e:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	2200      	movs	r2, #0
 8006214:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8006218:	2303      	movs	r3, #3
 800621a:	e00f      	b.n	800623c <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	69da      	ldr	r2, [r3, #28]
 8006222:	68bb      	ldr	r3, [r7, #8]
 8006224:	4013      	ands	r3, r2
 8006226:	68ba      	ldr	r2, [r7, #8]
 8006228:	429a      	cmp	r2, r3
 800622a:	bf0c      	ite	eq
 800622c:	2301      	moveq	r3, #1
 800622e:	2300      	movne	r3, #0
 8006230:	b2db      	uxtb	r3, r3
 8006232:	461a      	mov	r2, r3
 8006234:	79fb      	ldrb	r3, [r7, #7]
 8006236:	429a      	cmp	r2, r3
 8006238:	d092      	beq.n	8006160 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800623a:	2300      	movs	r3, #0
}
 800623c:	4618      	mov	r0, r3
 800623e:	3710      	adds	r7, #16
 8006240:	46bd      	mov	sp, r7
 8006242:	bd80      	pop	{r7, pc}

08006244 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006244:	b480      	push	{r7}
 8006246:	b083      	sub	sp, #12
 8006248:	af00      	add	r7, sp, #0
 800624a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	681a      	ldr	r2, [r3, #0]
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800625a:	601a      	str	r2, [r3, #0]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	2220      	movs	r2, #32
 8006260:	675a      	str	r2, [r3, #116]	; 0x74
}
 8006262:	bf00      	nop
 8006264:	370c      	adds	r7, #12
 8006266:	46bd      	mov	sp, r7
 8006268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626c:	4770      	bx	lr

0800626e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800626e:	b480      	push	{r7}
 8006270:	b083      	sub	sp, #12
 8006272:	af00      	add	r7, sp, #0
 8006274:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	681a      	ldr	r2, [r3, #0]
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006284:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	689a      	ldr	r2, [r3, #8]
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	f022 0201 	bic.w	r2, r2, #1
 8006294:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	2220      	movs	r2, #32
 800629a:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2200      	movs	r2, #0
 80062a0:	661a      	str	r2, [r3, #96]	; 0x60
}
 80062a2:	bf00      	nop
 80062a4:	370c      	adds	r7, #12
 80062a6:	46bd      	mov	sp, r7
 80062a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ac:	4770      	bx	lr

080062ae <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80062ae:	b580      	push	{r7, lr}
 80062b0:	b084      	sub	sp, #16
 80062b2:	af00      	add	r7, sp, #0
 80062b4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062ba:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	699b      	ldr	r3, [r3, #24]
 80062c0:	2b20      	cmp	r3, #32
 80062c2:	d014      	beq.n	80062ee <UART_DMATransmitCplt+0x40>
  {
    huart->TxXferCount = 0U;
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	2200      	movs	r2, #0
 80062c8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	689a      	ldr	r2, [r3, #8]
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80062da:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	681a      	ldr	r2, [r3, #0]
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80062ea:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80062ec:	e002      	b.n	80062f4 <UART_DMATransmitCplt+0x46>
    HAL_UART_TxCpltCallback(huart);
 80062ee:	68f8      	ldr	r0, [r7, #12]
 80062f0:	f7fb fa0e 	bl	8001710 <HAL_UART_TxCpltCallback>
}
 80062f4:	bf00      	nop
 80062f6:	3710      	adds	r7, #16
 80062f8:	46bd      	mov	sp, r7
 80062fa:	bd80      	pop	{r7, pc}

080062fc <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80062fc:	b580      	push	{r7, lr}
 80062fe:	b084      	sub	sp, #16
 8006300:	af00      	add	r7, sp, #0
 8006302:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006308:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800630a:	68f8      	ldr	r0, [r7, #12]
 800630c:	f7ff fc98 	bl	8005c40 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006310:	bf00      	nop
 8006312:	3710      	adds	r7, #16
 8006314:	46bd      	mov	sp, r7
 8006316:	bd80      	pop	{r7, pc}

08006318 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006318:	b580      	push	{r7, lr}
 800631a:	b084      	sub	sp, #16
 800631c:	af00      	add	r7, sp, #0
 800631e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006324:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	699b      	ldr	r3, [r3, #24]
 800632a:	2b20      	cmp	r3, #32
 800632c:	d01e      	beq.n	800636c <UART_DMAReceiveCplt+0x54>
  {
    huart->RxXferCount = 0U;
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	2200      	movs	r2, #0
 8006332:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	681a      	ldr	r2, [r3, #0]
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006344:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	689a      	ldr	r2, [r3, #8]
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	f022 0201 	bic.w	r2, r2, #1
 8006354:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	689a      	ldr	r2, [r3, #8]
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006364:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	2220      	movs	r2, #32
 800636a:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 800636c:	68f8      	ldr	r0, [r7, #12]
 800636e:	f7fb f9e1 	bl	8001734 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006372:	bf00      	nop
 8006374:	3710      	adds	r7, #16
 8006376:	46bd      	mov	sp, r7
 8006378:	bd80      	pop	{r7, pc}

0800637a <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800637a:	b580      	push	{r7, lr}
 800637c:	b084      	sub	sp, #16
 800637e:	af00      	add	r7, sp, #0
 8006380:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006386:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8006388:	68f8      	ldr	r0, [r7, #12]
 800638a:	f7ff fc63 	bl	8005c54 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800638e:	bf00      	nop
 8006390:	3710      	adds	r7, #16
 8006392:	46bd      	mov	sp, r7
 8006394:	bd80      	pop	{r7, pc}

08006396 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006396:	b580      	push	{r7, lr}
 8006398:	b086      	sub	sp, #24
 800639a:	af00      	add	r7, sp, #0
 800639c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063a2:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80063a4:	697b      	ldr	r3, [r7, #20]
 80063a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80063a8:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80063aa:	697b      	ldr	r3, [r7, #20]
 80063ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80063ae:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80063b0:	697b      	ldr	r3, [r7, #20]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	689b      	ldr	r3, [r3, #8]
 80063b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063ba:	2b80      	cmp	r3, #128	; 0x80
 80063bc:	d109      	bne.n	80063d2 <UART_DMAError+0x3c>
 80063be:	693b      	ldr	r3, [r7, #16]
 80063c0:	2b21      	cmp	r3, #33	; 0x21
 80063c2:	d106      	bne.n	80063d2 <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80063c4:	697b      	ldr	r3, [r7, #20]
 80063c6:	2200      	movs	r2, #0
 80063c8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 80063cc:	6978      	ldr	r0, [r7, #20]
 80063ce:	f7ff ff39 	bl	8006244 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80063d2:	697b      	ldr	r3, [r7, #20]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	689b      	ldr	r3, [r3, #8]
 80063d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063dc:	2b40      	cmp	r3, #64	; 0x40
 80063de:	d109      	bne.n	80063f4 <UART_DMAError+0x5e>
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	2b22      	cmp	r3, #34	; 0x22
 80063e4:	d106      	bne.n	80063f4 <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80063e6:	697b      	ldr	r3, [r7, #20]
 80063e8:	2200      	movs	r2, #0
 80063ea:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 80063ee:	6978      	ldr	r0, [r7, #20]
 80063f0:	f7ff ff3d 	bl	800626e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80063f4:	697b      	ldr	r3, [r7, #20]
 80063f6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80063f8:	f043 0210 	orr.w	r2, r3, #16
 80063fc:	697b      	ldr	r3, [r7, #20]
 80063fe:	67da      	str	r2, [r3, #124]	; 0x7c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006400:	6978      	ldr	r0, [r7, #20]
 8006402:	f7ff fc31 	bl	8005c68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006406:	bf00      	nop
 8006408:	3718      	adds	r7, #24
 800640a:	46bd      	mov	sp, r7
 800640c:	bd80      	pop	{r7, pc}

0800640e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800640e:	b580      	push	{r7, lr}
 8006410:	b084      	sub	sp, #16
 8006412:	af00      	add	r7, sp, #0
 8006414:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800641a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	2200      	movs	r2, #0
 8006420:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	2200      	movs	r2, #0
 8006428:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800642c:	68f8      	ldr	r0, [r7, #12]
 800642e:	f7ff fc1b 	bl	8005c68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006432:	bf00      	nop
 8006434:	3710      	adds	r7, #16
 8006436:	46bd      	mov	sp, r7
 8006438:	bd80      	pop	{r7, pc}

0800643a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800643a:	b580      	push	{r7, lr}
 800643c:	b082      	sub	sp, #8
 800643e:	af00      	add	r7, sp, #0
 8006440:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	681a      	ldr	r2, [r3, #0]
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006450:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	2220      	movs	r2, #32
 8006456:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	2200      	movs	r2, #0
 800645c:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800645e:	6878      	ldr	r0, [r7, #4]
 8006460:	f7fb f956 	bl	8001710 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006464:	bf00      	nop
 8006466:	3708      	adds	r7, #8
 8006468:	46bd      	mov	sp, r7
 800646a:	bd80      	pop	{r7, pc}

0800646c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800646c:	b480      	push	{r7}
 800646e:	b083      	sub	sp, #12
 8006470:	af00      	add	r7, sp, #0
 8006472:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006474:	bf00      	nop
 8006476:	370c      	adds	r7, #12
 8006478:	46bd      	mov	sp, r7
 800647a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647e:	4770      	bx	lr

08006480 <__cxa_pure_virtual>:
 8006480:	b508      	push	{r3, lr}
 8006482:	f000 f80d 	bl	80064a0 <_ZSt9terminatev>

08006486 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8006486:	b508      	push	{r3, lr}
 8006488:	4780      	blx	r0
 800648a:	f000 f80e 	bl	80064aa <abort>
	...

08006490 <_ZSt13get_terminatev>:
 8006490:	4b02      	ldr	r3, [pc, #8]	; (800649c <_ZSt13get_terminatev+0xc>)
 8006492:	6818      	ldr	r0, [r3, #0]
 8006494:	f3bf 8f5b 	dmb	ish
 8006498:	4770      	bx	lr
 800649a:	bf00      	nop
 800649c:	20000010 	.word	0x20000010

080064a0 <_ZSt9terminatev>:
 80064a0:	b508      	push	{r3, lr}
 80064a2:	f7ff fff5 	bl	8006490 <_ZSt13get_terminatev>
 80064a6:	f7ff ffee 	bl	8006486 <_ZN10__cxxabiv111__terminateEPFvvE>

080064aa <abort>:
 80064aa:	b508      	push	{r3, lr}
 80064ac:	2006      	movs	r0, #6
 80064ae:	f000 f871 	bl	8006594 <raise>
 80064b2:	2001      	movs	r0, #1
 80064b4:	f7fc fa2c 	bl	8002910 <_exit>

080064b8 <__errno>:
 80064b8:	4b01      	ldr	r3, [pc, #4]	; (80064c0 <__errno+0x8>)
 80064ba:	6818      	ldr	r0, [r3, #0]
 80064bc:	4770      	bx	lr
 80064be:	bf00      	nop
 80064c0:	20000014 	.word	0x20000014

080064c4 <__libc_init_array>:
 80064c4:	b570      	push	{r4, r5, r6, lr}
 80064c6:	4e0d      	ldr	r6, [pc, #52]	; (80064fc <__libc_init_array+0x38>)
 80064c8:	4c0d      	ldr	r4, [pc, #52]	; (8006500 <__libc_init_array+0x3c>)
 80064ca:	1ba4      	subs	r4, r4, r6
 80064cc:	10a4      	asrs	r4, r4, #2
 80064ce:	2500      	movs	r5, #0
 80064d0:	42a5      	cmp	r5, r4
 80064d2:	d109      	bne.n	80064e8 <__libc_init_array+0x24>
 80064d4:	4e0b      	ldr	r6, [pc, #44]	; (8006504 <__libc_init_array+0x40>)
 80064d6:	4c0c      	ldr	r4, [pc, #48]	; (8006508 <__libc_init_array+0x44>)
 80064d8:	f000 f960 	bl	800679c <_init>
 80064dc:	1ba4      	subs	r4, r4, r6
 80064de:	10a4      	asrs	r4, r4, #2
 80064e0:	2500      	movs	r5, #0
 80064e2:	42a5      	cmp	r5, r4
 80064e4:	d105      	bne.n	80064f2 <__libc_init_array+0x2e>
 80064e6:	bd70      	pop	{r4, r5, r6, pc}
 80064e8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80064ec:	4798      	blx	r3
 80064ee:	3501      	adds	r5, #1
 80064f0:	e7ee      	b.n	80064d0 <__libc_init_array+0xc>
 80064f2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80064f6:	4798      	blx	r3
 80064f8:	3501      	adds	r5, #1
 80064fa:	e7f2      	b.n	80064e2 <__libc_init_array+0x1e>
 80064fc:	08006a48 	.word	0x08006a48
 8006500:	08006a48 	.word	0x08006a48
 8006504:	08006a48 	.word	0x08006a48
 8006508:	08006a50 	.word	0x08006a50

0800650c <memcpy>:
 800650c:	b510      	push	{r4, lr}
 800650e:	1e43      	subs	r3, r0, #1
 8006510:	440a      	add	r2, r1
 8006512:	4291      	cmp	r1, r2
 8006514:	d100      	bne.n	8006518 <memcpy+0xc>
 8006516:	bd10      	pop	{r4, pc}
 8006518:	f811 4b01 	ldrb.w	r4, [r1], #1
 800651c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006520:	e7f7      	b.n	8006512 <memcpy+0x6>

08006522 <memset>:
 8006522:	4402      	add	r2, r0
 8006524:	4603      	mov	r3, r0
 8006526:	4293      	cmp	r3, r2
 8006528:	d100      	bne.n	800652c <memset+0xa>
 800652a:	4770      	bx	lr
 800652c:	f803 1b01 	strb.w	r1, [r3], #1
 8006530:	e7f9      	b.n	8006526 <memset+0x4>
	...

08006534 <realloc>:
 8006534:	4b02      	ldr	r3, [pc, #8]	; (8006540 <realloc+0xc>)
 8006536:	460a      	mov	r2, r1
 8006538:	4601      	mov	r1, r0
 800653a:	6818      	ldr	r0, [r3, #0]
 800653c:	f000 b8a0 	b.w	8006680 <_realloc_r>
 8006540:	20000014 	.word	0x20000014

08006544 <_raise_r>:
 8006544:	291f      	cmp	r1, #31
 8006546:	b538      	push	{r3, r4, r5, lr}
 8006548:	4604      	mov	r4, r0
 800654a:	460d      	mov	r5, r1
 800654c:	d904      	bls.n	8006558 <_raise_r+0x14>
 800654e:	2316      	movs	r3, #22
 8006550:	6003      	str	r3, [r0, #0]
 8006552:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006556:	bd38      	pop	{r3, r4, r5, pc}
 8006558:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800655a:	b112      	cbz	r2, 8006562 <_raise_r+0x1e>
 800655c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006560:	b94b      	cbnz	r3, 8006576 <_raise_r+0x32>
 8006562:	4620      	mov	r0, r4
 8006564:	f000 f830 	bl	80065c8 <_getpid_r>
 8006568:	462a      	mov	r2, r5
 800656a:	4601      	mov	r1, r0
 800656c:	4620      	mov	r0, r4
 800656e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006572:	f000 b817 	b.w	80065a4 <_kill_r>
 8006576:	2b01      	cmp	r3, #1
 8006578:	d00a      	beq.n	8006590 <_raise_r+0x4c>
 800657a:	1c59      	adds	r1, r3, #1
 800657c:	d103      	bne.n	8006586 <_raise_r+0x42>
 800657e:	2316      	movs	r3, #22
 8006580:	6003      	str	r3, [r0, #0]
 8006582:	2001      	movs	r0, #1
 8006584:	e7e7      	b.n	8006556 <_raise_r+0x12>
 8006586:	2400      	movs	r4, #0
 8006588:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800658c:	4628      	mov	r0, r5
 800658e:	4798      	blx	r3
 8006590:	2000      	movs	r0, #0
 8006592:	e7e0      	b.n	8006556 <_raise_r+0x12>

08006594 <raise>:
 8006594:	4b02      	ldr	r3, [pc, #8]	; (80065a0 <raise+0xc>)
 8006596:	4601      	mov	r1, r0
 8006598:	6818      	ldr	r0, [r3, #0]
 800659a:	f7ff bfd3 	b.w	8006544 <_raise_r>
 800659e:	bf00      	nop
 80065a0:	20000014 	.word	0x20000014

080065a4 <_kill_r>:
 80065a4:	b538      	push	{r3, r4, r5, lr}
 80065a6:	4c07      	ldr	r4, [pc, #28]	; (80065c4 <_kill_r+0x20>)
 80065a8:	2300      	movs	r3, #0
 80065aa:	4605      	mov	r5, r0
 80065ac:	4608      	mov	r0, r1
 80065ae:	4611      	mov	r1, r2
 80065b0:	6023      	str	r3, [r4, #0]
 80065b2:	f7fc f99d 	bl	80028f0 <_kill>
 80065b6:	1c43      	adds	r3, r0, #1
 80065b8:	d102      	bne.n	80065c0 <_kill_r+0x1c>
 80065ba:	6823      	ldr	r3, [r4, #0]
 80065bc:	b103      	cbz	r3, 80065c0 <_kill_r+0x1c>
 80065be:	602b      	str	r3, [r5, #0]
 80065c0:	bd38      	pop	{r3, r4, r5, pc}
 80065c2:	bf00      	nop
 80065c4:	20000bf8 	.word	0x20000bf8

080065c8 <_getpid_r>:
 80065c8:	f7fc b98a 	b.w	80028e0 <_getpid>

080065cc <_malloc_r>:
 80065cc:	b570      	push	{r4, r5, r6, lr}
 80065ce:	1ccd      	adds	r5, r1, #3
 80065d0:	f025 0503 	bic.w	r5, r5, #3
 80065d4:	3508      	adds	r5, #8
 80065d6:	2d0c      	cmp	r5, #12
 80065d8:	bf38      	it	cc
 80065da:	250c      	movcc	r5, #12
 80065dc:	2d00      	cmp	r5, #0
 80065de:	4606      	mov	r6, r0
 80065e0:	db01      	blt.n	80065e6 <_malloc_r+0x1a>
 80065e2:	42a9      	cmp	r1, r5
 80065e4:	d903      	bls.n	80065ee <_malloc_r+0x22>
 80065e6:	230c      	movs	r3, #12
 80065e8:	6033      	str	r3, [r6, #0]
 80065ea:	2000      	movs	r0, #0
 80065ec:	bd70      	pop	{r4, r5, r6, pc}
 80065ee:	f000 f87d 	bl	80066ec <__malloc_lock>
 80065f2:	4a21      	ldr	r2, [pc, #132]	; (8006678 <_malloc_r+0xac>)
 80065f4:	6814      	ldr	r4, [r2, #0]
 80065f6:	4621      	mov	r1, r4
 80065f8:	b991      	cbnz	r1, 8006620 <_malloc_r+0x54>
 80065fa:	4c20      	ldr	r4, [pc, #128]	; (800667c <_malloc_r+0xb0>)
 80065fc:	6823      	ldr	r3, [r4, #0]
 80065fe:	b91b      	cbnz	r3, 8006608 <_malloc_r+0x3c>
 8006600:	4630      	mov	r0, r6
 8006602:	f000 f863 	bl	80066cc <_sbrk_r>
 8006606:	6020      	str	r0, [r4, #0]
 8006608:	4629      	mov	r1, r5
 800660a:	4630      	mov	r0, r6
 800660c:	f000 f85e 	bl	80066cc <_sbrk_r>
 8006610:	1c43      	adds	r3, r0, #1
 8006612:	d124      	bne.n	800665e <_malloc_r+0x92>
 8006614:	230c      	movs	r3, #12
 8006616:	6033      	str	r3, [r6, #0]
 8006618:	4630      	mov	r0, r6
 800661a:	f000 f868 	bl	80066ee <__malloc_unlock>
 800661e:	e7e4      	b.n	80065ea <_malloc_r+0x1e>
 8006620:	680b      	ldr	r3, [r1, #0]
 8006622:	1b5b      	subs	r3, r3, r5
 8006624:	d418      	bmi.n	8006658 <_malloc_r+0x8c>
 8006626:	2b0b      	cmp	r3, #11
 8006628:	d90f      	bls.n	800664a <_malloc_r+0x7e>
 800662a:	600b      	str	r3, [r1, #0]
 800662c:	50cd      	str	r5, [r1, r3]
 800662e:	18cc      	adds	r4, r1, r3
 8006630:	4630      	mov	r0, r6
 8006632:	f000 f85c 	bl	80066ee <__malloc_unlock>
 8006636:	f104 000b 	add.w	r0, r4, #11
 800663a:	1d23      	adds	r3, r4, #4
 800663c:	f020 0007 	bic.w	r0, r0, #7
 8006640:	1ac3      	subs	r3, r0, r3
 8006642:	d0d3      	beq.n	80065ec <_malloc_r+0x20>
 8006644:	425a      	negs	r2, r3
 8006646:	50e2      	str	r2, [r4, r3]
 8006648:	e7d0      	b.n	80065ec <_malloc_r+0x20>
 800664a:	428c      	cmp	r4, r1
 800664c:	684b      	ldr	r3, [r1, #4]
 800664e:	bf16      	itet	ne
 8006650:	6063      	strne	r3, [r4, #4]
 8006652:	6013      	streq	r3, [r2, #0]
 8006654:	460c      	movne	r4, r1
 8006656:	e7eb      	b.n	8006630 <_malloc_r+0x64>
 8006658:	460c      	mov	r4, r1
 800665a:	6849      	ldr	r1, [r1, #4]
 800665c:	e7cc      	b.n	80065f8 <_malloc_r+0x2c>
 800665e:	1cc4      	adds	r4, r0, #3
 8006660:	f024 0403 	bic.w	r4, r4, #3
 8006664:	42a0      	cmp	r0, r4
 8006666:	d005      	beq.n	8006674 <_malloc_r+0xa8>
 8006668:	1a21      	subs	r1, r4, r0
 800666a:	4630      	mov	r0, r6
 800666c:	f000 f82e 	bl	80066cc <_sbrk_r>
 8006670:	3001      	adds	r0, #1
 8006672:	d0cf      	beq.n	8006614 <_malloc_r+0x48>
 8006674:	6025      	str	r5, [r4, #0]
 8006676:	e7db      	b.n	8006630 <_malloc_r+0x64>
 8006678:	20000a24 	.word	0x20000a24
 800667c:	20000a28 	.word	0x20000a28

08006680 <_realloc_r>:
 8006680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006682:	4607      	mov	r7, r0
 8006684:	4614      	mov	r4, r2
 8006686:	460e      	mov	r6, r1
 8006688:	b921      	cbnz	r1, 8006694 <_realloc_r+0x14>
 800668a:	4611      	mov	r1, r2
 800668c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006690:	f7ff bf9c 	b.w	80065cc <_malloc_r>
 8006694:	b922      	cbnz	r2, 80066a0 <_realloc_r+0x20>
 8006696:	f000 f82b 	bl	80066f0 <_free_r>
 800669a:	4625      	mov	r5, r4
 800669c:	4628      	mov	r0, r5
 800669e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80066a0:	f000 f874 	bl	800678c <_malloc_usable_size_r>
 80066a4:	42a0      	cmp	r0, r4
 80066a6:	d20f      	bcs.n	80066c8 <_realloc_r+0x48>
 80066a8:	4621      	mov	r1, r4
 80066aa:	4638      	mov	r0, r7
 80066ac:	f7ff ff8e 	bl	80065cc <_malloc_r>
 80066b0:	4605      	mov	r5, r0
 80066b2:	2800      	cmp	r0, #0
 80066b4:	d0f2      	beq.n	800669c <_realloc_r+0x1c>
 80066b6:	4631      	mov	r1, r6
 80066b8:	4622      	mov	r2, r4
 80066ba:	f7ff ff27 	bl	800650c <memcpy>
 80066be:	4631      	mov	r1, r6
 80066c0:	4638      	mov	r0, r7
 80066c2:	f000 f815 	bl	80066f0 <_free_r>
 80066c6:	e7e9      	b.n	800669c <_realloc_r+0x1c>
 80066c8:	4635      	mov	r5, r6
 80066ca:	e7e7      	b.n	800669c <_realloc_r+0x1c>

080066cc <_sbrk_r>:
 80066cc:	b538      	push	{r3, r4, r5, lr}
 80066ce:	4c06      	ldr	r4, [pc, #24]	; (80066e8 <_sbrk_r+0x1c>)
 80066d0:	2300      	movs	r3, #0
 80066d2:	4605      	mov	r5, r0
 80066d4:	4608      	mov	r0, r1
 80066d6:	6023      	str	r3, [r4, #0]
 80066d8:	f7fc f924 	bl	8002924 <_sbrk>
 80066dc:	1c43      	adds	r3, r0, #1
 80066de:	d102      	bne.n	80066e6 <_sbrk_r+0x1a>
 80066e0:	6823      	ldr	r3, [r4, #0]
 80066e2:	b103      	cbz	r3, 80066e6 <_sbrk_r+0x1a>
 80066e4:	602b      	str	r3, [r5, #0]
 80066e6:	bd38      	pop	{r3, r4, r5, pc}
 80066e8:	20000bf8 	.word	0x20000bf8

080066ec <__malloc_lock>:
 80066ec:	4770      	bx	lr

080066ee <__malloc_unlock>:
 80066ee:	4770      	bx	lr

080066f0 <_free_r>:
 80066f0:	b538      	push	{r3, r4, r5, lr}
 80066f2:	4605      	mov	r5, r0
 80066f4:	2900      	cmp	r1, #0
 80066f6:	d045      	beq.n	8006784 <_free_r+0x94>
 80066f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80066fc:	1f0c      	subs	r4, r1, #4
 80066fe:	2b00      	cmp	r3, #0
 8006700:	bfb8      	it	lt
 8006702:	18e4      	addlt	r4, r4, r3
 8006704:	f7ff fff2 	bl	80066ec <__malloc_lock>
 8006708:	4a1f      	ldr	r2, [pc, #124]	; (8006788 <_free_r+0x98>)
 800670a:	6813      	ldr	r3, [r2, #0]
 800670c:	4610      	mov	r0, r2
 800670e:	b933      	cbnz	r3, 800671e <_free_r+0x2e>
 8006710:	6063      	str	r3, [r4, #4]
 8006712:	6014      	str	r4, [r2, #0]
 8006714:	4628      	mov	r0, r5
 8006716:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800671a:	f7ff bfe8 	b.w	80066ee <__malloc_unlock>
 800671e:	42a3      	cmp	r3, r4
 8006720:	d90c      	bls.n	800673c <_free_r+0x4c>
 8006722:	6821      	ldr	r1, [r4, #0]
 8006724:	1862      	adds	r2, r4, r1
 8006726:	4293      	cmp	r3, r2
 8006728:	bf04      	itt	eq
 800672a:	681a      	ldreq	r2, [r3, #0]
 800672c:	685b      	ldreq	r3, [r3, #4]
 800672e:	6063      	str	r3, [r4, #4]
 8006730:	bf04      	itt	eq
 8006732:	1852      	addeq	r2, r2, r1
 8006734:	6022      	streq	r2, [r4, #0]
 8006736:	6004      	str	r4, [r0, #0]
 8006738:	e7ec      	b.n	8006714 <_free_r+0x24>
 800673a:	4613      	mov	r3, r2
 800673c:	685a      	ldr	r2, [r3, #4]
 800673e:	b10a      	cbz	r2, 8006744 <_free_r+0x54>
 8006740:	42a2      	cmp	r2, r4
 8006742:	d9fa      	bls.n	800673a <_free_r+0x4a>
 8006744:	6819      	ldr	r1, [r3, #0]
 8006746:	1858      	adds	r0, r3, r1
 8006748:	42a0      	cmp	r0, r4
 800674a:	d10b      	bne.n	8006764 <_free_r+0x74>
 800674c:	6820      	ldr	r0, [r4, #0]
 800674e:	4401      	add	r1, r0
 8006750:	1858      	adds	r0, r3, r1
 8006752:	4282      	cmp	r2, r0
 8006754:	6019      	str	r1, [r3, #0]
 8006756:	d1dd      	bne.n	8006714 <_free_r+0x24>
 8006758:	6810      	ldr	r0, [r2, #0]
 800675a:	6852      	ldr	r2, [r2, #4]
 800675c:	605a      	str	r2, [r3, #4]
 800675e:	4401      	add	r1, r0
 8006760:	6019      	str	r1, [r3, #0]
 8006762:	e7d7      	b.n	8006714 <_free_r+0x24>
 8006764:	d902      	bls.n	800676c <_free_r+0x7c>
 8006766:	230c      	movs	r3, #12
 8006768:	602b      	str	r3, [r5, #0]
 800676a:	e7d3      	b.n	8006714 <_free_r+0x24>
 800676c:	6820      	ldr	r0, [r4, #0]
 800676e:	1821      	adds	r1, r4, r0
 8006770:	428a      	cmp	r2, r1
 8006772:	bf04      	itt	eq
 8006774:	6811      	ldreq	r1, [r2, #0]
 8006776:	6852      	ldreq	r2, [r2, #4]
 8006778:	6062      	str	r2, [r4, #4]
 800677a:	bf04      	itt	eq
 800677c:	1809      	addeq	r1, r1, r0
 800677e:	6021      	streq	r1, [r4, #0]
 8006780:	605c      	str	r4, [r3, #4]
 8006782:	e7c7      	b.n	8006714 <_free_r+0x24>
 8006784:	bd38      	pop	{r3, r4, r5, pc}
 8006786:	bf00      	nop
 8006788:	20000a24 	.word	0x20000a24

0800678c <_malloc_usable_size_r>:
 800678c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006790:	1f18      	subs	r0, r3, #4
 8006792:	2b00      	cmp	r3, #0
 8006794:	bfbc      	itt	lt
 8006796:	580b      	ldrlt	r3, [r1, r0]
 8006798:	18c0      	addlt	r0, r0, r3
 800679a:	4770      	bx	lr

0800679c <_init>:
 800679c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800679e:	bf00      	nop
 80067a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80067a2:	bc08      	pop	{r3}
 80067a4:	469e      	mov	lr, r3
 80067a6:	4770      	bx	lr

080067a8 <_fini>:
 80067a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067aa:	bf00      	nop
 80067ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80067ae:	bc08      	pop	{r3}
 80067b0:	469e      	mov	lr, r3
 80067b2:	4770      	bx	lr
